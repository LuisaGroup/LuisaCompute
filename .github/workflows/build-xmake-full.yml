name: build-xmake

on:
  push:
    branches:
      - 'stable'
  pull_request:
    branches:
      - 'stable'

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
        toolchain:
          - { name: gcc, version: 11 }
          - { name: gcc, version: 12 }
          - { name: gcc, version: 13 }
          - { name: clang, version: 14 }
          - { name: clang, version: 15 }
          - { name: clang, version: 16 }
          - { name: clang, version: 17 }
        config: [ release, debug ]
    name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.toolchain.name }}-${{ matrix.toolchain.version }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Install Dependencies"
        run: |
          if [ "${{ matrix.toolchain.name }}" = "gcc" ]; then
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get -y install gcc-${{ matrix.toolchain.version }} g++-${{ matrix.toolchain.version }}
          else
            wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
            sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-${{ matrix.toolchain.version }} main"
            sudo apt-get -y remove "libc++1-*" "libc++abi1-*" "libunwind-*"
            sudo apt-get update
            sudo apt-get -y install clang-${{ matrix.toolchain.version }} lld-${{ matrix.toolchain.version }}
            sudo apt-get -y install libc++-${{ matrix.toolchain.version }}-dev libc++abi-${{ matrix.toolchain.version }}-dev
          fi
          sudo apt-get update
          sudo apt-get -y install build-essential uuid-dev libxinerama-dev libxcursor-dev libxi-dev libvulkan-dev libdirectfb-dev
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - name: "Setup CUDA"
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
          sudo dpkg -i cuda-keyring_1.0-1_all.deb
          sudo apt-get update
          sudo apt-get -y install cuda
      - name: "Setup Vulkan SDK"
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: "Setup XMake"
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest
      - name: "Configure and Build"
        run: |
          xmake f -p linux -a x86_64 --toolchain=${{ matrix.toolchain.name }}-${{ matrix.toolchain.version }} -m ${{ matrix.config }} --cuda_backend=true --enable_dsl=true --enable_gui=true --enable_unity_build=false --enable_tests=true
          xmake

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-13 ]
        compiler: [ homebrew-clang, system-clang ]
        config: [ Release, Debug ]
    name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Install Dependencies"
        run: |
          brew install --overwrite python@3.12
          brew install --overwrite llvm
      - name: "Setup XMake"
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest
      - name: "Setup Vulkan SDK"
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: "Configure and Build"
        run: |
          if [ "${{ matrix.compiler }}" = "homebrew-clang" ]; then
            export PATH=/usr/local/opt/llvm/bin:$PATH
          fi
          xmake f -p macosx --toolchain=llvm -m ${{ matrix.config }} --mm=clang --mxx=clang++ --metal_backend=true --enable_dsl=true --enable_gui=true --enable_unity_build=false --enable_tests=true
          xmake

  build-windows:
    strategy:
      fail-fast: false
      matrix:
        config: [ release, debug ]
        compiler: [ msvc, clang-cl, llvm ]
    name: windows / ${{ matrix.config }} / ${{ matrix.compiler }}
    runs-on: [ self-hosted, windows, x64 ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Configure and Build"
        shell: cmd
        run: |
          if "${{ matrix.compiler }}" == "llvm" (
            xmake f -p windows -a x64 --toolchain=llvm --sdk=D:/LLVM -m ${{ matrix.config }} --dx_backend=true --cuda_backend=true --enable_dsl=true --enable_gui=true --enable_unity_build=false --enable_tests=true
          ) else (
            xmake f -p windows -a x64 --toolchain=${{ matrix.compiler }} -m ${{ matrix.config }} --dx_backend=true --cuda_backend=true --enable_dsl=true --enable_gui=true --enable_unity_build=false --enable_tests=true
          )
          xmake
