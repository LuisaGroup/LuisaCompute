name: build-cmake

on: [ push, pull_request ]

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
        compiler:
          - { name: gcc, version: 13 }
          - { name: clang, version: 17 }
        config: [ Release, Debug ]
    name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.compiler.name }}-${{ matrix.compiler.version }}
    runs-on: [ self-hosted, x64, linux ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Install Rust"
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - name: "Configure and Build"
        run: |
          if [ "${{ matrix.compiler.name }}" = "gcc" ]; then
            export LUISA_CC=gcc-${{ matrix.compiler.version }}
            export LUISA_CXX=g++-${{ matrix.compiler.version }}
            export LUISA_FLAGS=""
          else
            export LUISA_CC=clang-${{ matrix.compiler.version }}
            export LUISA_CXX=clang++-${{ matrix.compiler.version }}
            export LUISA_FLAGS="-stdlib=libc++"
          fi
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.config }} -D CMAKE_C_COMPILER=${LUISA_CC} -D CMAKE_CXX_COMPILER=${LUISA_CXX} -D CMAKE_CXX_FLAGS="${LUISA_FLAGS}"
          cmake --build build -j 8
      - name: "Install"
        run: |
          if [ "${{ matrix.config }}" = "Release" ]; then
            sudo cmake --install build --prefix dist -v
          fi

  # build-macos:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ macos-13 ]
  #       compiler: [ homebrew-clang, system-clang ]
  #       config: [ Release, Debug ]
  #   name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.compiler }}
  #   runs-on: [ self-hosted, macos, arm64 ]
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: recursive
  #     - name: "Install Rust"
  #       run: |
  #         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  #     - name: "Install Dependencies"
  #       run: |
  #         brew install --overwrite python@3.12
  #         brew install --overwrite cmake ninja llvm sccache
  #     - name: "Setup Vulkan SDK"
  #       uses: humbletim/setup-vulkan-sdk@v1.2.0
  #       with:
  #         vulkan-query-version: 1.3.204.0
  #         vulkan-components: Vulkan-Headers, Vulkan-Loader
  #         vulkan-use-cache: true
  #     - name: "Configure and Build"
  #       run: |
  #         if [ "${{ matrix.compiler }}" = "homebrew-clang" ]; then
  #           export PATH=/usr/local/opt/llvm/bin:$PATH
  #         fi
  #         cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.config }} -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -D LUISA_COMPUTE_ENABLE_UNITY_BUILD=OFF
  #         cmake --build build
  #     - name: "Install"
  #       run: |
  #         sudo cmake --install build --prefix dist -v

  build-windows:
    strategy:
      fail-fast: false
      matrix:
        os: [ 2022 ]
        config: [ Release, Debug ]
        compiler: [ cl, clang, clang-cl ]
    name: windows / ${{ matrix.config }} / ${{ matrix.compiler }}
    runs-on: [ self-hosted, windows, x64 ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Setup Ninja"
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.11.1
      - name: "Configure and Build"
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\${{ matrix.os }}\Community\VC\Auxiliary\Build\vcvarsall.bat"
          cmake --version
          ninja --version
          IF "${{ matrix.compiler }}" == "clang" (
            set CC=clang
            set CXX=clang++
          ) ELSE (
            set CC=${{ matrix.compiler }}
            set CXX=${{ matrix.compiler }}
          )
          cmake -S . -G Ninja -B build -D CMAKE_BUILD_TYPE=${{ matrix.config }}
          cmake --build build -v
      - name: "Install"
        run: |
          cmake --install build --prefix dist -v
