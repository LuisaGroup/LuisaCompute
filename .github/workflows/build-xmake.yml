name: build-xmake

on: [ push, pull_request ]

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
        toolchain:
          - { name: gcc, version: 13 }
          - { name: clang, version: 17 }
        config: [ release, debug ]
    name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.toolchain.name }}-${{ matrix.toolchain.version }}
    runs-on: [ self-hosted, x64, linux]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Configure and Build"
        run: |
          xmake f -p linux -a x86_64 --toolchain=${{ matrix.toolchain.name }}-${{ matrix.toolchain.version }} -m ${{ matrix.config }} --cuda_backend=true --enable_dsl=true --enable_gui=true --enable_unity_build=false --enable_tests=true
          xmake --jobs=8

  # build-macos:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ macos-13 ]
  #       compiler: [ homebrew-clang, system-clang ]
  #       config: [ Release, Debug ]
  #   name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.compiler }}
  #   runs-on: [ self-hosted, macos, arm64 ]
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: recursive
  #     - name: "Install Dependencies"
  #       run: |
  #         brew install --overwrite python@3.12
  #         brew install --overwrite llvm
  #     - name: "Setup Vulkan SDK"
  #       uses: humbletim/setup-vulkan-sdk@v1.2.0
  #       with:
  #         vulkan-query-version: 1.3.204.0
  #         vulkan-components: Vulkan-Headers, Vulkan-Loader
  #         vulkan-use-cache: true
  #     - name: "Setup XMake"
  #       uses: xmake-io/github-action-setup-xmake@v1
  #       with:
  #         xmake-version: latest
  #     - name: "Configure and Build"
  #       run: |
  #         if [ "${{ matrix.compiler }}" = "homebrew-clang" ]; then
  #           export PATH=/usr/local/opt/llvm/bin:$PATH
  #         fi
  #         xmake f -p macosx --toolchain=llvm -m ${{ matrix.config }} --mm=clang --mxx=clang++ --metal_backend=true --enable_dsl=true --enable_gui=true --enable_unity_build=false --enable_tests=true
  #         xmake

  build-windows:
    strategy:
      fail-fast: false
      matrix:
        config: [ release, debug ]
        compiler: [ msvc, clang-cl, llvm ]
    name: windows / ${{ matrix.config }} / ${{ matrix.compiler }}
    runs-on: [ self-hosted, windows, x64 ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Configure and Build"
        shell: cmd
        run: |
          if "${{ matrix.compiler }}" == "llvm" (
            xmake f -p windows -a x64 --toolchain=llvm --sdk="C:/Program Files/LLVM" -m ${{ matrix.config }} --dx_backend=true --cuda_backend=true --enable_dsl=true --enable_gui=true --enable_unity_build=false --enable_tests=true
          ) else (
            xmake f -p windows -a x64 --toolchain=${{ matrix.compiler }} -m ${{ matrix.config }} --dx_backend=true --cuda_backend=true --enable_dsl=true --enable_gui=true --enable_unity_build=false --enable_tests=true
          )
          xmake -v
