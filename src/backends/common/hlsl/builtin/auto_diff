// autodiff
#define _MARK_GRAD(x,dx) x##_grad=dx
#define _GRAD(x) (x##_grad)
void _accum_grad(inout float x_grad,float dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout float2 x_grad,float2 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout float3 x_grad,float3 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout float4 x_grad,float4 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout _wfloat3 x_grad,_wfloat3 dx){_accum_grad(x_grad.v,dx.v);}
void _accum_grad(inout float16_t x_grad,float16_t dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout float16_t2 x_grad,float16_t2 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout float16_t3 x_grad,float16_t3 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout float16_t4 x_grad,float16_t4 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout _wfloat16_t3 x_grad,_wfloat16_t3 dx){_accum_grad(x_grad.v,dx.v);}
void _accum_grad(inout float2x2 x_grad,float2x2 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout float3x3 x_grad,float3x3 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout float3x4 x_grad,float3x4 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout float4x4 x_grad,float4x4 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout float4x3 x_grad,float4x3 dx){x_grad+=select(isnan(dx),0,dx);}
void _accum_grad(inout _WrappedFloat2x2 x_grad,_WrappedFloat2x2 dx){x_grad.m+=select(isnan(dx.m),0,dx.m);}
void _accum_grad(inout _WrappedFloat3x3 x_grad,_WrappedFloat3x3 dx){x_grad.m+=select(isnan(dx.m),0,dx.m);}
void _accum_grad(inout _WrappedFloat4x4 x_grad,_WrappedFloat4x4 dx){x_grad.m+=select(isnan(dx.m),0,dx.m);}
#define _REQUIRES_GRAD(x,type) x##_grad=_zero(type)
template<typename T>
T _detach(T x) { return x; }
