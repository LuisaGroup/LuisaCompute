#define _CLOSEST_HIT_RAY_FLAG (RAY_FLAG_FORCE_OPAQUE|RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES)
#define _ANY_HIT_RAY_FLAG (RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH|RAY_FLAG_SKIP_CLOSEST_HIT_SHADER|RAY_FLAG_FORCE_OPAQUE|RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES)
typedef RayQuery<RAY_FLAG_NONE> _LC_RayQueryAll;
typedef RayQuery<RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH> _LC_RayQueryAny;
template<typename T>
_Hit1 _TraceClosest(RaytracingAccelerationStructure accel,T rayDesc,uint mask){
RayDesc ray;
ray.Origin=float3(rayDesc.v0.v[0],rayDesc.v0.v[1],rayDesc.v0.v[2]);
ray.Direction=float3(rayDesc.v2.v[0],rayDesc.v2.v[1],rayDesc.v2.v[2]);
ray.TMin=rayDesc.v1;
ray.TMax=rayDesc.v3;
RayQuery<_CLOSEST_HIT_RAY_FLAG> q;
q.TraceRayInline(accel,_CLOSEST_HIT_RAY_FLAG,mask,ray);
_Hit1 pl;
q.Proceed();
if(q.CommittedStatus()==COMMITTED_TRIANGLE_HIT){
pl.v0=q.CommittedInstanceIndex();
pl.v1=q.CommittedPrimitiveIndex();
pl.v2=q.CommittedTriangleBarycentrics();
pl.v3=q.CommittedRayT();
}else{
pl.v0=4294967295;
}
return pl;
}
template<typename T>
_LC_RayQueryAll _QueryAll(RaytracingAccelerationStructure accel,T rayDesc,uint mask){
RayDesc ray;
ray.Origin=float3(rayDesc.v0.v[0],rayDesc.v0.v[1],rayDesc.v0.v[2]);
ray.Direction=float3(rayDesc.v2.v[0],rayDesc.v2.v[1],rayDesc.v2.v[2]);
ray.TMin=rayDesc.v1;
ray.TMax=rayDesc.v3;
_LC_RayQueryAll q;
q.TraceRayInline(accel,RAY_FLAG_NONE,mask,ray);
return q;
}
template<typename T>
_LC_RayQueryAny _QueryAny(RaytracingAccelerationStructure accel,T rayDesc,uint mask){
RayDesc ray;
ray.Origin=float3(rayDesc.v0.v[0],rayDesc.v0.v[1],rayDesc.v0.v[2]);
ray.Direction=float3(rayDesc.v2.v[0],rayDesc.v2.v[1],rayDesc.v2.v[2]);
ray.TMin=rayDesc.v1;
ray.TMax=rayDesc.v3;
_LC_RayQueryAny q;
q.TraceRayInline(accel,RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH,mask,ray);
return q;
}
template<typename T, typename Q>
T _RayQueryGetWorldRay(Q q) {
float3 o=q.WorldRayOrigin();
float3 d=q.WorldRayDirection();
T ray;
ray.v0.v[0]=o.x;
ray.v0.v[1]=o.y;
ray.v0.v[2]=o.z;
ray.v1=q.RayTMin();
ray.v2.v[0]=d.x;
ray.v2.v[1]=d.y;
ray.v2.v[2]=d.z;
ray.v3=q.CommittedRayT();
return ray;
}
template<typename Q>
_Hit0 _GetCommitedHit(Q q){
_Hit0 pl;
switch(q.CommittedStatus()){
case COMMITTED_TRIANGLE_HIT:
pl.v0=q.CommittedInstanceIndex();
pl.v1=q.CommittedPrimitiveIndex();
pl.v2=q.CommittedTriangleBarycentrics();
pl.v3=1;
pl.v4=q.CommittedRayT();
break;
case COMMITTED_PROCEDURAL_PRIMITIVE_HIT:
pl.v0=q.CommittedInstanceIndex();
pl.v1=q.CommittedPrimitiveIndex();
pl.v2=0;
pl.v3=2;
pl.v4=q.CommittedRayT();
break;
default:
pl.v3=0;
break;
}
return pl;
}
template<typename Q>
_Hit1 _GetTriangleCandidateHit(Q q){
_Hit1 pl;
pl.v0=q.CandidateInstanceIndex();
pl.v1=q.CandidatePrimitiveIndex();
pl.v2=q.CandidateTriangleBarycentrics();
pl.v3=q.CandidateTriangleRayT();
return pl;
}
template<typename Q>
_Hit2 _GetProceduralCandidateHit(Q q){
_Hit2 pl;
pl.v0=q.CandidateInstanceIndex();
pl.v1=q.CandidatePrimitiveIndex();
return pl;
}
template<typename Q>
void _CommitProcedural(Q q,float dist){
if(dist<q.CommittedRayT())
q.CommitProceduralPrimitiveHit(dist);
}
template<typename T>
bool _TraceAny(RaytracingAccelerationStructure accel,T rayDesc,uint mask){
RayDesc ray;
ray.Origin=float3(rayDesc.v0.v[0],rayDesc.v0.v[1],rayDesc.v0.v[2]);
ray.Direction=float3(rayDesc.v2.v[0],rayDesc.v2.v[1],rayDesc.v2.v[2]);
ray.TMin=rayDesc.v1;
ray.TMax=rayDesc.v3;
RayQuery<_ANY_HIT_RAY_FLAG> q;
q.TraceRayInline(accel,_ANY_HIT_RAY_FLAG,mask,ray);
q.Proceed();
return q.CommittedStatus()!=COMMITTED_NOTHING;
}
