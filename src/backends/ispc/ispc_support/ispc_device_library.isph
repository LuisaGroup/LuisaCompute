// constants
#define M_E         2.71828182845904523536028747135266250f   /* e              */
#define M_LOG2E     1.44269504088896340735992468100189214f   /* log2(e)        */
#define M_LOG10E    0.434294481903251827651128918916605082f  /* log10(e)       */
#define M_LN2       0.693147180559945309417232121458176568f  /* loge(2)        */
#define M_LN10      2.30258509299404568401799145468436421f   /* loge(10)       */
#define M_PI        3.14159265358979323846264338327950288f   /* pi             */
#define M_PI_2      1.57079632679489661923132169163975144f   /* pi/2           */
#define M_PI_4      0.785398163397448309615660845819875721f  /* pi/4           */
#define M_1_PI      0.318309886183790671537767526745028724f  /* 1/pi           */
#define M_2_PI      0.636619772367581343075535053490057448f  /* 2/pi           */
#define M_2_SQRTPI  1.12837916709551257389615890312154517f   /* 2/sqrt(pi)     */
#define M_SQRT2     1.41421356237309504880168872420969808f   /* sqrt(2)        */
#define M_SQRT1_2   0.707106781186547524400844362104849039f  /* 1/sqrt(2)      */

#define _x v[0]
#define _y v[1]
#define _z v[2]
#define _w v[3]

#define unreachable()
#define array_access(arr, i) ((arr).a[i])
#define vector_access(vec, i) ((vec).v[i])
#define matrix_access(mat, i) ((mat).cols[i])
#define buffer_access(buf, i) ((buf)[i])
#define buffer_read(buf, i) buffer_access(buf, i)
#define buffer_write(buf, i, value) ((void)(buffer_access(buf, i) = (value)))

struct int2 { int v[2]; };
struct int3 { int v[4]; };
struct int4 { int v[4]; };

struct uint2 { uint v[2]; };
struct uint3 { uint v[4]; };
struct uint4 { uint v[4]; };

struct float2 { float v[2]; };
struct float3 { float v[4]; };
struct float4 { float v[4]; };

struct bool2 { bool v[2]; };
struct bool3 { bool v[4]; };
struct bool4 { bool v[4]; };

inline uniform int2 make_int2() {
    uniform int2 v;
    v.v[0] = v.v[1] = 0;
    return v;
}
inline uniform int3 make_int3() {
    uniform int3 v;
    v.v[0] = v.v[1] = v.v[2] = 0;
    return v;
}
inline uniform int4 make_int4() {
    uniform int4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = 0;
    return v;
}

inline uniform uint2 make_uint2() {
    uniform uint2 v;
    v.v[0] = v.v[1] = 0;
    return v;
}
inline uniform uint3 make_uint3() {
    uniform uint3 v;
    v.v[0] = v.v[1] = v.v[2] = 0;
    return v;
}
inline uniform uint4 make_uint4() {
    uniform uint4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = 0;
    return v;
}

inline uniform float2 make_float2() {
    uniform float2 v;
    v.v[0] = v.v[1] = 0;
    return v;
}
inline uniform float3 make_float3() {
    uniform float3 v;
    v.v[0] = v.v[1] = v.v[2] = 0;
    return v;
}
inline uniform float4 make_float4() {
    uniform float4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = 0;
    return v;
}

inline uniform bool2 make_bool2() {
    uniform bool2 v;
    v.v[0] = v.v[1] = 0;
    return v;
}
inline uniform bool3 make_bool3() {
    uniform bool3 v;
    v.v[0] = v.v[1] = v.v[2] = 0;
    return v;
}
inline uniform bool4 make_bool4() {
    uniform bool4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = 0;
    return v;
}

// make_int2 functions
inline int2 make_int2(int s) {
    int2 v;
    v.v[0] = v.v[1] = s;
    return v;
}
inline int2 make_int2(int x, int y) {
    int2 v;
    v.v[0] = x;
    v.v[1] = y;
    return v;
}
inline int2 make_int2(int2 v) {
    return v;
}
inline int2 make_int2(int3 v) {
    int2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}
inline int2 make_int2(int4 v) {
    int2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}

// make_int3 functions
inline int3 make_int3(int s) {
    int3 v;
    v.v[0] = v.v[1] = v.v[2] = s;
    return v;
}
inline int3 make_int3(int x, int y, int z) {
    int3 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    return v;
}
inline int3 make_int3(int x, int2 yz) {
    int3 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    return v;
}
inline int3 make_int3(int2 xy, int z) {
    int3 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    return v;
}
inline int3 make_int3(int3 v) {
    return v;
}
inline int3 make_int3(int4 v) {
    int3 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    u.v[2] = v.v[2];
    return u;
}

// make_int4 functions
inline int4 make_int4(int s) {
    int4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = s;
    return v;
}
inline int4 make_int4(int x, int y, int z, int w) {
    int4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline int4 make_int4(int x, int y, int2 zw) {
    int4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline int4 make_int4(int x, int2 yz, int w) {
    int4 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    v.v[3] = w;
    return v;
}
inline int4 make_int4(int2 xy, int z, int w) {
    int4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline int4 make_int4(int2 xy, int2 zw) {
    int4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline int4 make_int4(int x, int3 yzw) {
    int4 v;
    v.v[0] = x;
    v.v[1] = yzw.v[0];
    v.v[2] = yzw.v[1];
    v.v[3] = yzw.v[2];
    return v;
}
inline int4 make_int4(int3 xyz, int w) {
    int4 v;
    v.v[0] = xyz.v[0];
    v.v[1] = xyz.v[1];
    v.v[2] = xyz.v[2];
    v.v[3] = w;
    return v;
}
inline int4 make_int4(int4 v) {
    return v;
}

// make_int2 functions
inline uniform int2 make_int2(uniform int s) {
    uniform int2 v;
    v.v[0] = v.v[1] = s;
    return v;
}
inline uniform int2 make_int2(uniform int x, uniform int y) {
    uniform int2 v;
    v.v[0] = x;
    v.v[1] = y;
    return v;
}
inline uniform int2 make_int2(uniform int2 v) {
    return v;
}
inline uniform int2 make_int2(uniform int3 v) {
    uniform int2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}
inline uniform int2 make_int2(uniform int4 v) {
    uniform int2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}

// make_int3 functions
inline uniform int3 make_int3(uniform int s) {
    uniform int3 v;
    v.v[0] = v.v[1] = v.v[2] = s;
    return v;
}
inline uniform int3 make_int3(uniform int x, uniform int y, uniform int z) {
    uniform int3 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    return v;
}
inline uniform int3 make_int3(uniform int x, uniform int2 yz) {
    uniform int3 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    return v;
}
inline uniform int3 make_int3(uniform int2 xy, uniform int z) {
    uniform int3 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    return v;
}
inline uniform int3 make_int3(uniform int3 v) {
    return v;
}
inline uniform int3 make_int3(uniform int4 v) {
    uniform int3 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    u.v[2] = v.v[2];
    return u;
}

// make_int4 functions
inline uniform int4 make_int4(uniform int s) {
    uniform int4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = s;
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int y, uniform int z, uniform int w) {
    uniform int4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int y, uniform int2 zw) {
    uniform int4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int2 yz, uniform int w) {
    uniform int4 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    v.v[3] = w;
    return v;
}
inline uniform int4 make_int4(uniform int2 xy, uniform int z, uniform int w) {
    uniform int4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline uniform int4 make_int4(uniform int2 xy, uniform int2 zw) {
    uniform int4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int3 yzw) {
    uniform int4 v;
    v.v[0] = x;
    v.v[1] = yzw.v[0];
    v.v[2] = yzw.v[1];
    v.v[3] = yzw.v[2];
    return v;
}
inline uniform int4 make_int4(uniform int3 xyz, uniform int w) {
    uniform int4 v;
    v.v[0] = xyz.v[0];
    v.v[1] = xyz.v[1];
    v.v[2] = xyz.v[2];
    v.v[3] = w;
    return v;
}
inline uniform int4 make_int4(uniform int4 v) {
    return v;
}

// make_uint2 functions
inline uint2 make_uint2(uint s) {
    uint2 v;
    v.v[0] = v.v[1] = s;
    return v;
}
inline uint2 make_uint2(uint x, uint y) {
    uint2 v;
    v.v[0] = x;
    v.v[1] = y;
    return v;
}
inline uint2 make_uint2(uint2 v) {
    return v;
}
inline uint2 make_uint2(uint3 v) {
    uint2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}
inline uint2 make_uint2(uint4 v) {
    uint2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}

// make_uint3 functions
inline uint3 make_uint3(uint s) {
    uint3 v;
    v.v[0] = v.v[1] = v.v[2] = s;
    return v;
}
inline uint3 make_uint3(uint x, uint y, uint z) {
    uint3 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    return v;
}
inline uint3 make_uint3(uint x, uint2 yz) {
    uint3 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    return v;
}
inline uint3 make_uint3(uint2 xy, uint z) {
    uint3 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    return v;
}
inline uint3 make_uint3(uint3 v) {
    return v;
}
inline uint3 make_uint3(uint4 v) {
    uint3 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    u.v[2] = v.v[2];
    return u;
}

// make_uint4 functions
inline uint4 make_uint4(uint s) {
    uint4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = s;
    return v;
}
inline uint4 make_uint4(uint x, uint y, uint z, uint w) {
    uint4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline uint4 make_uint4(uint x, uint y, uint2 zw) {
    uint4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline uint4 make_uint4(uint x, uint2 yz, uint w) {
    uint4 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    v.v[3] = w;
    return v;
}
inline uint4 make_uint4(uint2 xy, uint z, uint w) {
    uint4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline uint4 make_uint4(uint2 xy, uint2 zw) {
    uint4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline uint4 make_uint4(uint x, uint3 yzw) {
    uint4 v;
    v.v[0] = x;
    v.v[1] = yzw.v[0];
    v.v[2] = yzw.v[1];
    v.v[3] = yzw.v[2];
    return v;
}
inline uint4 make_uint4(uint3 xyz, uint w) {
    uint4 v;
    v.v[0] = xyz.v[0];
    v.v[1] = xyz.v[1];
    v.v[2] = xyz.v[2];
    v.v[3] = w;
    return v;
}
inline uint4 make_uint4(uint4 v) {
    return v;
}

// make_uint2 functions
inline uniform uint2 make_uint2(uniform uint s) {
    uniform uint2 v;
    v.v[0] = v.v[1] = s;
    return v;
}
inline uniform uint2 make_uint2(uniform uint x, uniform uint y) {
    uniform uint2 v;
    v.v[0] = x;
    v.v[1] = y;
    return v;
}
inline uniform uint2 make_uint2(uniform uint2 v) {
    return v;
}
inline uniform uint2 make_uint2(uniform uint3 v) {
    uniform uint2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}
inline uniform uint2 make_uint2(uniform uint4 v) {
    uniform uint2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}

// make_uint3 functions
inline uniform uint3 make_uint3(uniform uint s) {
    uniform uint3 v;
    v.v[0] = v.v[1] = v.v[2] = s;
    return v;
}
inline uniform uint3 make_uint3(uniform uint x, uniform uint y, uniform uint z) {
    uniform uint3 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    return v;
}
inline uniform uint3 make_uint3(uniform uint x, uniform uint2 yz) {
    uniform uint3 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    return v;
}
inline uniform uint3 make_uint3(uniform uint2 xy, uniform uint z) {
    uniform uint3 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    return v;
}
inline uniform uint3 make_uint3(uniform uint3 v) {
    return v;
}
inline uniform uint3 make_uint3(uniform uint4 v) {
    uniform uint3 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    u.v[2] = v.v[2];
    return u;
}

// make_uint4 functions
inline uniform uint4 make_uint4(uniform uint s) {
    uniform uint4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = s;
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint y, uniform uint z, uniform uint w) {
    uniform uint4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint y, uniform uint2 zw) {
    uniform uint4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint2 yz, uniform uint w) {
    uniform uint4 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    v.v[3] = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint2 xy, uniform uint z, uniform uint w) {
    uniform uint4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint2 xy, uniform uint2 zw) {
    uniform uint4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint3 yzw) {
    uniform uint4 v;
    v.v[0] = x;
    v.v[1] = yzw.v[0];
    v.v[2] = yzw.v[1];
    v.v[3] = yzw.v[2];
    return v;
}
inline uniform uint4 make_uint4(uniform uint3 xyz, uniform uint w) {
    uniform uint4 v;
    v.v[0] = xyz.v[0];
    v.v[1] = xyz.v[1];
    v.v[2] = xyz.v[2];
    v.v[3] = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint4 v) {
    return v;
}

// make_float2 functions
inline float2 make_float2(float s) {
    float2 v;
    v.v[0] = v.v[1] = s;
    return v;
}
inline float2 make_float2(float x, float y) {
    float2 v;
    v.v[0] = x;
    v.v[1] = y;
    return v;
}
inline float2 make_float2(float2 v) {
    return v;
}
inline float2 make_float2(float3 v) {
    float2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}
inline float2 make_float2(float4 v) {
    float2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}

// make_float3 functions
inline float3 make_float3(float s) {
    float3 v;
    v.v[0] = v.v[1] = v.v[2] = s;
    return v;
}
inline float3 make_float3(float x, float y, float z) {
    float3 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    return v;
}
inline float3 make_float3(float x, float2 yz) {
    float3 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    return v;
}
inline float3 make_float3(float2 xy, float z) {
    float3 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    return v;
}
inline float3 make_float3(float3 v) {
    return v;
}
inline float3 make_float3(float4 v) {
    float3 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    u.v[2] = v.v[2];
    return u;
}

// make_float4 functions
inline float4 make_float4(float s) {
    float4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = s;
    return v;
}
inline float4 make_float4(float x, float y, float z, float w) {
    float4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline float4 make_float4(float x, float y, float2 zw) {
    float4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline float4 make_float4(float x, float2 yz, float w) {
    float4 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    v.v[3] = w;
    return v;
}
inline float4 make_float4(float2 xy, float z, float w) {
    float4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline float4 make_float4(float2 xy, float2 zw) {
    float4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline float4 make_float4(float x, float3 yzw) {
    float4 v;
    v.v[0] = x;
    v.v[1] = yzw.v[0];
    v.v[2] = yzw.v[1];
    v.v[3] = yzw.v[2];
    return v;
}
inline float4 make_float4(float3 xyz, float w) {
    float4 v;
    v.v[0] = xyz.v[0];
    v.v[1] = xyz.v[1];
    v.v[2] = xyz.v[2];
    v.v[3] = w;
    return v;
}
inline float4 make_float4(float4 v) {
    return v;
}

// make_float2 functions
inline uniform float2 make_float2(uniform float s) {
    uniform float2 v;
    v.v[0] = v.v[1] = s;
    return v;
}
inline uniform float2 make_float2(uniform float x, uniform float y) {
    uniform float2 v;
    v.v[0] = x;
    v.v[1] = y;
    return v;
}
inline uniform float2 make_float2(uniform float2 v) {
    return v;
}
inline uniform float2 make_float2(uniform float3 v) {
    uniform float2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}
inline uniform float2 make_float2(uniform float4 v) {
    uniform float2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}

// make_float3 functions
inline uniform float3 make_float3(uniform float s) {
    uniform float3 v;
    v.v[0] = v.v[1] = v.v[2] = s;
    return v;
}
inline uniform float3 make_float3(uniform float x, uniform float y, uniform float z) {
    uniform float3 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    return v;
}
inline uniform float3 make_float3(uniform float x, uniform float2 yz) {
    uniform float3 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    return v;
}
inline uniform float3 make_float3(uniform float2 xy, uniform float z) {
    uniform float3 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    return v;
}
inline uniform float3 make_float3(uniform float3 v) {
    return v;
}
inline uniform float3 make_float3(uniform float4 v) {
    uniform float3 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    u.v[2] = v.v[2];
    return u;
}

// make_float4 functions
inline uniform float4 make_float4(uniform float s) {
    uniform float4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = s;
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float y, uniform float z, uniform float w) {
    uniform float4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float y, uniform float2 zw) {
    uniform float4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float2 yz, uniform float w) {
    uniform float4 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    v.v[3] = w;
    return v;
}
inline uniform float4 make_float4(uniform float2 xy, uniform float z, uniform float w) {
    uniform float4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline uniform float4 make_float4(uniform float2 xy, uniform float2 zw) {
    uniform float4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float3 yzw) {
    uniform float4 v;
    v.v[0] = x;
    v.v[1] = yzw.v[0];
    v.v[2] = yzw.v[1];
    v.v[3] = yzw.v[2];
    return v;
}
inline uniform float4 make_float4(uniform float3 xyz, uniform float w) {
    uniform float4 v;
    v.v[0] = xyz.v[0];
    v.v[1] = xyz.v[1];
    v.v[2] = xyz.v[2];
    v.v[3] = w;
    return v;
}
inline uniform float4 make_float4(uniform float4 v) {
    return v;
}

// make_bool2 functions
inline bool2 make_bool2(bool s) {
    bool2 v;
    v.v[0] = v.v[1] = s;
    return v;
}
inline bool2 make_bool2(bool x, bool y) {
    bool2 v;
    v.v[0] = x;
    v.v[1] = y;
    return v;
}
inline bool2 make_bool2(bool2 v) {
    return v;
}
inline bool2 make_bool2(bool3 v) {
    bool2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}
inline bool2 make_bool2(bool4 v) {
    bool2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}

// make_bool3 functions
inline bool3 make_bool3(bool s) {
    bool3 v;
    v.v[0] = v.v[1] = v.v[2] = s;
    return v;
}
inline bool3 make_bool3(bool x, bool y, bool z) {
    bool3 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    return v;
}
inline bool3 make_bool3(bool x, bool2 yz) {
    bool3 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    return v;
}
inline bool3 make_bool3(bool2 xy, bool z) {
    bool3 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    return v;
}
inline bool3 make_bool3(bool3 v) {
    return v;
}
inline bool3 make_bool3(bool4 v) {
    bool3 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    u.v[2] = v.v[2];
    return u;
}

// make_bool4 functions
inline bool4 make_bool4(bool s) {
    bool4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = s;
    return v;
}
inline bool4 make_bool4(bool x, bool y, bool z, bool w) {
    bool4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline bool4 make_bool4(bool x, bool y, bool2 zw) {
    bool4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline bool4 make_bool4(bool x, bool2 yz, bool w) {
    bool4 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    v.v[3] = w;
    return v;
}
inline bool4 make_bool4(bool2 xy, bool z, bool w) {
    bool4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline bool4 make_bool4(bool2 xy, bool2 zw) {
    bool4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline bool4 make_bool4(bool x, bool3 yzw) {
    bool4 v;
    v.v[0] = x;
    v.v[1] = yzw.v[0];
    v.v[2] = yzw.v[1];
    v.v[3] = yzw.v[2];
    return v;
}
inline bool4 make_bool4(bool3 xyz, bool w) {
    bool4 v;
    v.v[0] = xyz.v[0];
    v.v[1] = xyz.v[1];
    v.v[2] = xyz.v[2];
    v.v[3] = w;
    return v;
}
inline bool4 make_bool4(bool4 v) {
    return v;
}

// make_bool2 functions
inline uniform bool2 make_bool2(uniform bool s) {
    uniform bool2 v;
    v.v[0] = v.v[1] = s;
    return v;
}
inline uniform bool2 make_bool2(uniform bool x, uniform bool y) {
    uniform bool2 v;
    v.v[0] = x;
    v.v[1] = y;
    return v;
}
inline uniform bool2 make_bool2(uniform bool2 v) {
    return v;
}
inline uniform bool2 make_bool2(uniform bool3 v) {
    uniform bool2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}
inline uniform bool2 make_bool2(uniform bool4 v) {
    uniform bool2 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    return u;
}

// make_bool3 functions
inline uniform bool3 make_bool3(uniform bool s) {
    uniform bool3 v;
    v.v[0] = v.v[1] = v.v[2] = s;
    return v;
}
inline uniform bool3 make_bool3(uniform bool x, uniform bool y, uniform bool z) {
    uniform bool3 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    return v;
}
inline uniform bool3 make_bool3(uniform bool x, uniform bool2 yz) {
    uniform bool3 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    return v;
}
inline uniform bool3 make_bool3(uniform bool2 xy, uniform bool z) {
    uniform bool3 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    return v;
}
inline uniform bool3 make_bool3(uniform bool3 v) {
    return v;
}
inline uniform bool3 make_bool3(uniform bool4 v) {
    uniform bool3 u;
    u.v[0] = v.v[0];
    u.v[1] = v.v[1];
    u.v[2] = v.v[2];
    return u;
}

// make_bool4 functions
inline uniform bool4 make_bool4(uniform bool s) {
    uniform bool4 v;
    v.v[0] = v.v[1] = v.v[2] = v.v[3] = s;
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool y, uniform bool z, uniform bool w) {
    uniform bool4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool y, uniform bool2 zw) {
    uniform bool4 v;
    v.v[0] = x;
    v.v[1] = y;
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool2 yz, uniform bool w) {
    uniform bool4 v;
    v.v[0] = x;
    v.v[1] = yz.v[0];
    v.v[2] = yz.v[1];
    v.v[3] = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool2 xy, uniform bool z, uniform bool w) {
    uniform bool4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = z;
    v.v[3] = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool2 xy, uniform bool2 zw) {
    uniform bool4 v;
    v.v[0] = xy.v[0];
    v.v[1] = xy.v[1];
    v.v[2] = zw.v[0];
    v.v[3] = zw.v[1];
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool3 yzw) {
    uniform bool4 v;
    v.v[0] = x;
    v.v[1] = yzw.v[0];
    v.v[2] = yzw.v[1];
    v.v[3] = yzw.v[2];
    return v;
}
inline uniform bool4 make_bool4(uniform bool3 xyz, uniform bool w) {
    uniform bool4 v;
    v.v[0] = xyz.v[0];
    v.v[1] = xyz.v[1];
    v.v[2] = xyz.v[2];
    v.v[3] = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool4 v) {
    return v;
}

// conversions
inline int2 make_int2(uint2 v) {
    int2 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    return u;
}
inline int2 make_int2(uint3 v) {
    int2 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    return u;
}
inline int2 make_int2(uint4 v) {
    int2 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    return u;
}
inline int3 make_int3(uint3 v) {
    int3 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    u.v[2] = (int)v.v[2];
    return u;
}
inline int3 make_int3(uint4 v) {
    int3 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    u.v[2] = (int)v.v[2];
    return u;
}
inline int4 make_int4(uint4 v) {
    int4 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    u.v[2] = (int)v.v[2];
    u.v[3] = (int)v.v[3];
    return u;
}

// conversions
inline uniform int2 make_int2(uniform uint2 v) {
    uniform int2 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    return u;
}
inline uniform int2 make_int2(uniform uint3 v) {
    uniform int2 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    return u;
}
inline uniform int2 make_int2(uniform uint4 v) {
    uniform int2 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    return u;
}
inline uniform int3 make_int3(uniform uint3 v) {
    uniform int3 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    u.v[2] = (uniform int)v.v[2];
    return u;
}
inline uniform int3 make_int3(uniform uint4 v) {
    uniform int3 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    u.v[2] = (uniform int)v.v[2];
    return u;
}
inline uniform int4 make_int4(uniform uint4 v) {
    uniform int4 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    u.v[2] = (uniform int)v.v[2];
    u.v[3] = (uniform int)v.v[3];
    return u;
}

// conversions
inline int2 make_int2(float2 v) {
    int2 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    return u;
}
inline int2 make_int2(float3 v) {
    int2 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    return u;
}
inline int2 make_int2(float4 v) {
    int2 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    return u;
}
inline int3 make_int3(float3 v) {
    int3 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    u.v[2] = (int)v.v[2];
    return u;
}
inline int3 make_int3(float4 v) {
    int3 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    u.v[2] = (int)v.v[2];
    return u;
}
inline int4 make_int4(float4 v) {
    int4 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    u.v[2] = (int)v.v[2];
    u.v[3] = (int)v.v[3];
    return u;
}

// conversions
inline uniform int2 make_int2(uniform float2 v) {
    uniform int2 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    return u;
}
inline uniform int2 make_int2(uniform float3 v) {
    uniform int2 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    return u;
}
inline uniform int2 make_int2(uniform float4 v) {
    uniform int2 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    return u;
}
inline uniform int3 make_int3(uniform float3 v) {
    uniform int3 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    u.v[2] = (uniform int)v.v[2];
    return u;
}
inline uniform int3 make_int3(uniform float4 v) {
    uniform int3 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    u.v[2] = (uniform int)v.v[2];
    return u;
}
inline uniform int4 make_int4(uniform float4 v) {
    uniform int4 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    u.v[2] = (uniform int)v.v[2];
    u.v[3] = (uniform int)v.v[3];
    return u;
}

// conversions
inline int2 make_int2(bool2 v) {
    int2 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    return u;
}
inline int2 make_int2(bool3 v) {
    int2 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    return u;
}
inline int2 make_int2(bool4 v) {
    int2 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    return u;
}
inline int3 make_int3(bool3 v) {
    int3 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    u.v[2] = (int)v.v[2];
    return u;
}
inline int3 make_int3(bool4 v) {
    int3 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    u.v[2] = (int)v.v[2];
    return u;
}
inline int4 make_int4(bool4 v) {
    int4 u;
    u.v[0] = (int)v.v[0];
    u.v[1] = (int)v.v[1];
    u.v[2] = (int)v.v[2];
    u.v[3] = (int)v.v[3];
    return u;
}

// conversions
inline uniform int2 make_int2(uniform bool2 v) {
    uniform int2 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    return u;
}
inline uniform int2 make_int2(uniform bool3 v) {
    uniform int2 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    return u;
}
inline uniform int2 make_int2(uniform bool4 v) {
    uniform int2 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    return u;
}
inline uniform int3 make_int3(uniform bool3 v) {
    uniform int3 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    u.v[2] = (uniform int)v.v[2];
    return u;
}
inline uniform int3 make_int3(uniform bool4 v) {
    uniform int3 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    u.v[2] = (uniform int)v.v[2];
    return u;
}
inline uniform int4 make_int4(uniform bool4 v) {
    uniform int4 u;
    u.v[0] = (uniform int)v.v[0];
    u.v[1] = (uniform int)v.v[1];
    u.v[2] = (uniform int)v.v[2];
    u.v[3] = (uniform int)v.v[3];
    return u;
}

// conversions
inline uint2 make_uint2(int2 v) {
    uint2 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    return u;
}
inline uint2 make_uint2(int3 v) {
    uint2 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    return u;
}
inline uint2 make_uint2(int4 v) {
    uint2 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    return u;
}
inline uint3 make_uint3(int3 v) {
    uint3 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    u.v[2] = (uint)v.v[2];
    return u;
}
inline uint3 make_uint3(int4 v) {
    uint3 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    u.v[2] = (uint)v.v[2];
    return u;
}
inline uint4 make_uint4(int4 v) {
    uint4 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    u.v[2] = (uint)v.v[2];
    u.v[3] = (uint)v.v[3];
    return u;
}

// conversions
inline uniform uint2 make_uint2(uniform int2 v) {
    uniform uint2 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    return u;
}
inline uniform uint2 make_uint2(uniform int3 v) {
    uniform uint2 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    return u;
}
inline uniform uint2 make_uint2(uniform int4 v) {
    uniform uint2 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    return u;
}
inline uniform uint3 make_uint3(uniform int3 v) {
    uniform uint3 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    u.v[2] = (uniform uint)v.v[2];
    return u;
}
inline uniform uint3 make_uint3(uniform int4 v) {
    uniform uint3 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    u.v[2] = (uniform uint)v.v[2];
    return u;
}
inline uniform uint4 make_uint4(uniform int4 v) {
    uniform uint4 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    u.v[2] = (uniform uint)v.v[2];
    u.v[3] = (uniform uint)v.v[3];
    return u;
}

// conversions
inline uint2 make_uint2(float2 v) {
    uint2 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    return u;
}
inline uint2 make_uint2(float3 v) {
    uint2 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    return u;
}
inline uint2 make_uint2(float4 v) {
    uint2 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    return u;
}
inline uint3 make_uint3(float3 v) {
    uint3 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    u.v[2] = (uint)v.v[2];
    return u;
}
inline uint3 make_uint3(float4 v) {
    uint3 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    u.v[2] = (uint)v.v[2];
    return u;
}
inline uint4 make_uint4(float4 v) {
    uint4 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    u.v[2] = (uint)v.v[2];
    u.v[3] = (uint)v.v[3];
    return u;
}

// conversions
inline uniform uint2 make_uint2(uniform float2 v) {
    uniform uint2 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    return u;
}
inline uniform uint2 make_uint2(uniform float3 v) {
    uniform uint2 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    return u;
}
inline uniform uint2 make_uint2(uniform float4 v) {
    uniform uint2 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    return u;
}
inline uniform uint3 make_uint3(uniform float3 v) {
    uniform uint3 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    u.v[2] = (uniform uint)v.v[2];
    return u;
}
inline uniform uint3 make_uint3(uniform float4 v) {
    uniform uint3 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    u.v[2] = (uniform uint)v.v[2];
    return u;
}
inline uniform uint4 make_uint4(uniform float4 v) {
    uniform uint4 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    u.v[2] = (uniform uint)v.v[2];
    u.v[3] = (uniform uint)v.v[3];
    return u;
}

// conversions
inline uint2 make_uint2(bool2 v) {
    uint2 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    return u;
}
inline uint2 make_uint2(bool3 v) {
    uint2 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    return u;
}
inline uint2 make_uint2(bool4 v) {
    uint2 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    return u;
}
inline uint3 make_uint3(bool3 v) {
    uint3 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    u.v[2] = (uint)v.v[2];
    return u;
}
inline uint3 make_uint3(bool4 v) {
    uint3 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    u.v[2] = (uint)v.v[2];
    return u;
}
inline uint4 make_uint4(bool4 v) {
    uint4 u;
    u.v[0] = (uint)v.v[0];
    u.v[1] = (uint)v.v[1];
    u.v[2] = (uint)v.v[2];
    u.v[3] = (uint)v.v[3];
    return u;
}

// conversions
inline uniform uint2 make_uint2(uniform bool2 v) {
    uniform uint2 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    return u;
}
inline uniform uint2 make_uint2(uniform bool3 v) {
    uniform uint2 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    return u;
}
inline uniform uint2 make_uint2(uniform bool4 v) {
    uniform uint2 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    return u;
}
inline uniform uint3 make_uint3(uniform bool3 v) {
    uniform uint3 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    u.v[2] = (uniform uint)v.v[2];
    return u;
}
inline uniform uint3 make_uint3(uniform bool4 v) {
    uniform uint3 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    u.v[2] = (uniform uint)v.v[2];
    return u;
}
inline uniform uint4 make_uint4(uniform bool4 v) {
    uniform uint4 u;
    u.v[0] = (uniform uint)v.v[0];
    u.v[1] = (uniform uint)v.v[1];
    u.v[2] = (uniform uint)v.v[2];
    u.v[3] = (uniform uint)v.v[3];
    return u;
}

// conversions
inline float2 make_float2(int2 v) {
    float2 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    return u;
}
inline float2 make_float2(int3 v) {
    float2 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    return u;
}
inline float2 make_float2(int4 v) {
    float2 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    return u;
}
inline float3 make_float3(int3 v) {
    float3 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    u.v[2] = (float)v.v[2];
    return u;
}
inline float3 make_float3(int4 v) {
    float3 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    u.v[2] = (float)v.v[2];
    return u;
}
inline float4 make_float4(int4 v) {
    float4 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    u.v[2] = (float)v.v[2];
    u.v[3] = (float)v.v[3];
    return u;
}

// conversions
inline uniform float2 make_float2(uniform int2 v) {
    uniform float2 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    return u;
}
inline uniform float2 make_float2(uniform int3 v) {
    uniform float2 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    return u;
}
inline uniform float2 make_float2(uniform int4 v) {
    uniform float2 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    return u;
}
inline uniform float3 make_float3(uniform int3 v) {
    uniform float3 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    u.v[2] = (uniform float)v.v[2];
    return u;
}
inline uniform float3 make_float3(uniform int4 v) {
    uniform float3 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    u.v[2] = (uniform float)v.v[2];
    return u;
}
inline uniform float4 make_float4(uniform int4 v) {
    uniform float4 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    u.v[2] = (uniform float)v.v[2];
    u.v[3] = (uniform float)v.v[3];
    return u;
}

// conversions
inline float2 make_float2(uint2 v) {
    float2 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    return u;
}
inline float2 make_float2(uint3 v) {
    float2 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    return u;
}
inline float2 make_float2(uint4 v) {
    float2 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    return u;
}
inline float3 make_float3(uint3 v) {
    float3 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    u.v[2] = (float)v.v[2];
    return u;
}
inline float3 make_float3(uint4 v) {
    float3 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    u.v[2] = (float)v.v[2];
    return u;
}
inline float4 make_float4(uint4 v) {
    float4 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    u.v[2] = (float)v.v[2];
    u.v[3] = (float)v.v[3];
    return u;
}

// conversions
inline uniform float2 make_float2(uniform uint2 v) {
    uniform float2 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    return u;
}
inline uniform float2 make_float2(uniform uint3 v) {
    uniform float2 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    return u;
}
inline uniform float2 make_float2(uniform uint4 v) {
    uniform float2 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    return u;
}
inline uniform float3 make_float3(uniform uint3 v) {
    uniform float3 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    u.v[2] = (uniform float)v.v[2];
    return u;
}
inline uniform float3 make_float3(uniform uint4 v) {
    uniform float3 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    u.v[2] = (uniform float)v.v[2];
    return u;
}
inline uniform float4 make_float4(uniform uint4 v) {
    uniform float4 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    u.v[2] = (uniform float)v.v[2];
    u.v[3] = (uniform float)v.v[3];
    return u;
}

// conversions
inline float2 make_float2(bool2 v) {
    float2 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    return u;
}
inline float2 make_float2(bool3 v) {
    float2 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    return u;
}
inline float2 make_float2(bool4 v) {
    float2 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    return u;
}
inline float3 make_float3(bool3 v) {
    float3 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    u.v[2] = (float)v.v[2];
    return u;
}
inline float3 make_float3(bool4 v) {
    float3 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    u.v[2] = (float)v.v[2];
    return u;
}
inline float4 make_float4(bool4 v) {
    float4 u;
    u.v[0] = (float)v.v[0];
    u.v[1] = (float)v.v[1];
    u.v[2] = (float)v.v[2];
    u.v[3] = (float)v.v[3];
    return u;
}

// conversions
inline uniform float2 make_float2(uniform bool2 v) {
    uniform float2 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    return u;
}
inline uniform float2 make_float2(uniform bool3 v) {
    uniform float2 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    return u;
}
inline uniform float2 make_float2(uniform bool4 v) {
    uniform float2 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    return u;
}
inline uniform float3 make_float3(uniform bool3 v) {
    uniform float3 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    u.v[2] = (uniform float)v.v[2];
    return u;
}
inline uniform float3 make_float3(uniform bool4 v) {
    uniform float3 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    u.v[2] = (uniform float)v.v[2];
    return u;
}
inline uniform float4 make_float4(uniform bool4 v) {
    uniform float4 u;
    u.v[0] = (uniform float)v.v[0];
    u.v[1] = (uniform float)v.v[1];
    u.v[2] = (uniform float)v.v[2];
    u.v[3] = (uniform float)v.v[3];
    return u;
}

// conversions
inline bool2 make_bool2(int2 v) {
    bool2 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    return u;
}
inline bool2 make_bool2(int3 v) {
    bool2 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    return u;
}
inline bool2 make_bool2(int4 v) {
    bool2 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    return u;
}
inline bool3 make_bool3(int3 v) {
    bool3 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    u.v[2] = (bool)v.v[2];
    return u;
}
inline bool3 make_bool3(int4 v) {
    bool3 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    u.v[2] = (bool)v.v[2];
    return u;
}
inline bool4 make_bool4(int4 v) {
    bool4 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    u.v[2] = (bool)v.v[2];
    u.v[3] = (bool)v.v[3];
    return u;
}

// conversions
inline uniform bool2 make_bool2(uniform int2 v) {
    uniform bool2 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    return u;
}
inline uniform bool2 make_bool2(uniform int3 v) {
    uniform bool2 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    return u;
}
inline uniform bool2 make_bool2(uniform int4 v) {
    uniform bool2 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    return u;
}
inline uniform bool3 make_bool3(uniform int3 v) {
    uniform bool3 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    u.v[2] = (uniform bool)v.v[2];
    return u;
}
inline uniform bool3 make_bool3(uniform int4 v) {
    uniform bool3 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    u.v[2] = (uniform bool)v.v[2];
    return u;
}
inline uniform bool4 make_bool4(uniform int4 v) {
    uniform bool4 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    u.v[2] = (uniform bool)v.v[2];
    u.v[3] = (uniform bool)v.v[3];
    return u;
}

// conversions
inline bool2 make_bool2(uint2 v) {
    bool2 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    return u;
}
inline bool2 make_bool2(uint3 v) {
    bool2 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    return u;
}
inline bool2 make_bool2(uint4 v) {
    bool2 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    return u;
}
inline bool3 make_bool3(uint3 v) {
    bool3 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    u.v[2] = (bool)v.v[2];
    return u;
}
inline bool3 make_bool3(uint4 v) {
    bool3 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    u.v[2] = (bool)v.v[2];
    return u;
}
inline bool4 make_bool4(uint4 v) {
    bool4 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    u.v[2] = (bool)v.v[2];
    u.v[3] = (bool)v.v[3];
    return u;
}

// conversions
inline uniform bool2 make_bool2(uniform uint2 v) {
    uniform bool2 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    return u;
}
inline uniform bool2 make_bool2(uniform uint3 v) {
    uniform bool2 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    return u;
}
inline uniform bool2 make_bool2(uniform uint4 v) {
    uniform bool2 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    return u;
}
inline uniform bool3 make_bool3(uniform uint3 v) {
    uniform bool3 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    u.v[2] = (uniform bool)v.v[2];
    return u;
}
inline uniform bool3 make_bool3(uniform uint4 v) {
    uniform bool3 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    u.v[2] = (uniform bool)v.v[2];
    return u;
}
inline uniform bool4 make_bool4(uniform uint4 v) {
    uniform bool4 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    u.v[2] = (uniform bool)v.v[2];
    u.v[3] = (uniform bool)v.v[3];
    return u;
}

// conversions
inline bool2 make_bool2(float2 v) {
    bool2 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    return u;
}
inline bool2 make_bool2(float3 v) {
    bool2 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    return u;
}
inline bool2 make_bool2(float4 v) {
    bool2 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    return u;
}
inline bool3 make_bool3(float3 v) {
    bool3 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    u.v[2] = (bool)v.v[2];
    return u;
}
inline bool3 make_bool3(float4 v) {
    bool3 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    u.v[2] = (bool)v.v[2];
    return u;
}
inline bool4 make_bool4(float4 v) {
    bool4 u;
    u.v[0] = (bool)v.v[0];
    u.v[1] = (bool)v.v[1];
    u.v[2] = (bool)v.v[2];
    u.v[3] = (bool)v.v[3];
    return u;
}

// conversions
inline uniform bool2 make_bool2(uniform float2 v) {
    uniform bool2 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    return u;
}
inline uniform bool2 make_bool2(uniform float3 v) {
    uniform bool2 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    return u;
}
inline uniform bool2 make_bool2(uniform float4 v) {
    uniform bool2 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    return u;
}
inline uniform bool3 make_bool3(uniform float3 v) {
    uniform bool3 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    u.v[2] = (uniform bool)v.v[2];
    return u;
}
inline uniform bool3 make_bool3(uniform float4 v) {
    uniform bool3 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    u.v[2] = (uniform bool)v.v[2];
    return u;
}
inline uniform bool4 make_bool4(uniform float4 v) {
    uniform bool4 u;
    u.v[0] = (uniform bool)v.v[0];
    u.v[1] = (uniform bool)v.v[1];
    u.v[2] = (uniform bool)v.v[2];
    u.v[3] = (uniform bool)v.v[3];
    return u;
}

inline bool unary_not(int s) { return !s; }
inline uniform bool unary_not(uniform int s) { return !s; }
inline int unary_plus(int s) { return +s; }
inline int unary_minus(int s) { return -s; }
inline uniform int unary_plus(uniform int s) { return +s; }
inline uniform int unary_minus(uniform int s) { return -s; }
inline int unary_bit_not(int s) { return ~s; }
inline uniform int unary_bit_not(uniform int s) { return ~s; }
inline bool2 unary_not(int2 v) { return make_bool2(!v.v[0], !v.v[1]); }
inline uniform bool2 unary_not(uniform int2 v) { return make_bool2(!v.v[0], !v.v[1]); }
inline int2 unary_plus(int2 v) { return make_int2(+v.v[0], +v.v[1]); }
inline int2 unary_minus(int2 v) { return make_int2(-v.v[0], -v.v[1]); }
inline uniform int2 unary_plus(uniform int2 v) { return make_int2(+v.v[0], +v.v[1]); }
inline uniform int2 unary_minus(uniform int2 v) { return make_int2(-v.v[0], -v.v[1]); }
inline int2 unary_bit_not(int2 v) { return make_int2(~v.v[0], ~v.v[1]); }
inline int2 unary_bit_not(uniform int2 v) { return make_int2(~v.v[0], ~v.v[1]); }
inline bool3 unary_not(int3 v) { return make_bool3(!v.v[0], !v.v[1], !v.v[2]); }
inline uniform bool3 unary_not(uniform int3 v) { return make_bool3(!v.v[0], !v.v[1], !v.v[2]); }
inline int3 unary_plus(int3 v) { return make_int3(+v.v[0], +v.v[1], +v.v[2]); }
inline int3 unary_minus(int3 v) { return make_int3(-v.v[0], -v.v[1], -v.v[2]); }
inline uniform int3 unary_plus(uniform int3 v) { return make_int3(+v.v[0], +v.v[1], +v.v[2]); }
inline uniform int3 unary_minus(uniform int3 v) { return make_int3(-v.v[0], -v.v[1], -v.v[2]); }
inline int3 unary_bit_not(int3 v) { return make_int3(~v.v[0], ~v.v[1], ~v.v[2]); }
inline int3 unary_bit_not(uniform int3 v) { return make_int3(~v.v[0], ~v.v[1], ~v.v[2]); }
inline bool4 unary_not(int4 v) { return make_bool4(!v.v[0], !v.v[1], !v.v[2], !v.v[3]); }
inline uniform bool4 unary_not(uniform int4 v) { return make_bool4(!v.v[0], !v.v[1], !v.v[2], !v.v[3]); }
inline int4 unary_plus(int4 v) { return make_int4(+v.v[0], +v.v[1], +v.v[2], +v.v[3]); }
inline int4 unary_minus(int4 v) { return make_int4(-v.v[0], -v.v[1], -v.v[2], -v.v[3]); }
inline uniform int4 unary_plus(uniform int4 v) { return make_int4(+v.v[0], +v.v[1], +v.v[2], +v.v[3]); }
inline uniform int4 unary_minus(uniform int4 v) { return make_int4(-v.v[0], -v.v[1], -v.v[2], -v.v[3]); }
inline int4 unary_bit_not(int4 v) { return make_int4(~v.v[0], ~v.v[1], ~v.v[2], ~v.v[3]); }
inline int4 unary_bit_not(uniform int4 v) { return make_int4(~v.v[0], ~v.v[1], ~v.v[2], ~v.v[3]); }

inline bool unary_not(uint s) { return !s; }
inline uniform bool unary_not(uniform uint s) { return !s; }
inline uint unary_plus(uint s) { return +s; }
inline uint unary_minus(uint s) { return -s; }
inline uniform uint unary_plus(uniform uint s) { return +s; }
inline uniform uint unary_minus(uniform uint s) { return -s; }
inline uint unary_bit_not(uint s) { return ~s; }
inline uniform uint unary_bit_not(uniform uint s) { return ~s; }
inline bool2 unary_not(uint2 v) { return make_bool2(!v.v[0], !v.v[1]); }
inline uniform bool2 unary_not(uniform uint2 v) { return make_bool2(!v.v[0], !v.v[1]); }
inline uint2 unary_plus(uint2 v) { return make_uint2(+v.v[0], +v.v[1]); }
inline uint2 unary_minus(uint2 v) { return make_uint2(-v.v[0], -v.v[1]); }
inline uniform uint2 unary_plus(uniform uint2 v) { return make_uint2(+v.v[0], +v.v[1]); }
inline uniform uint2 unary_minus(uniform uint2 v) { return make_uint2(-v.v[0], -v.v[1]); }
inline uint2 unary_bit_not(uint2 v) { return make_uint2(~v.v[0], ~v.v[1]); }
inline uint2 unary_bit_not(uniform uint2 v) { return make_uint2(~v.v[0], ~v.v[1]); }
inline bool3 unary_not(uint3 v) { return make_bool3(!v.v[0], !v.v[1], !v.v[2]); }
inline uniform bool3 unary_not(uniform uint3 v) { return make_bool3(!v.v[0], !v.v[1], !v.v[2]); }
inline uint3 unary_plus(uint3 v) { return make_uint3(+v.v[0], +v.v[1], +v.v[2]); }
inline uint3 unary_minus(uint3 v) { return make_uint3(-v.v[0], -v.v[1], -v.v[2]); }
inline uniform uint3 unary_plus(uniform uint3 v) { return make_uint3(+v.v[0], +v.v[1], +v.v[2]); }
inline uniform uint3 unary_minus(uniform uint3 v) { return make_uint3(-v.v[0], -v.v[1], -v.v[2]); }
inline uint3 unary_bit_not(uint3 v) { return make_uint3(~v.v[0], ~v.v[1], ~v.v[2]); }
inline uint3 unary_bit_not(uniform uint3 v) { return make_uint3(~v.v[0], ~v.v[1], ~v.v[2]); }
inline bool4 unary_not(uint4 v) { return make_bool4(!v.v[0], !v.v[1], !v.v[2], !v.v[3]); }
inline uniform bool4 unary_not(uniform uint4 v) { return make_bool4(!v.v[0], !v.v[1], !v.v[2], !v.v[3]); }
inline uint4 unary_plus(uint4 v) { return make_uint4(+v.v[0], +v.v[1], +v.v[2], +v.v[3]); }
inline uint4 unary_minus(uint4 v) { return make_uint4(-v.v[0], -v.v[1], -v.v[2], -v.v[3]); }
inline uniform uint4 unary_plus(uniform uint4 v) { return make_uint4(+v.v[0], +v.v[1], +v.v[2], +v.v[3]); }
inline uniform uint4 unary_minus(uniform uint4 v) { return make_uint4(-v.v[0], -v.v[1], -v.v[2], -v.v[3]); }
inline uint4 unary_bit_not(uint4 v) { return make_uint4(~v.v[0], ~v.v[1], ~v.v[2], ~v.v[3]); }
inline uint4 unary_bit_not(uniform uint4 v) { return make_uint4(~v.v[0], ~v.v[1], ~v.v[2], ~v.v[3]); }

inline bool unary_not(float s) { return !s; }
inline uniform bool unary_not(uniform float s) { return !s; }
inline float unary_plus(float s) { return +s; }
inline float unary_minus(float s) { return -s; }
inline uniform float unary_plus(uniform float s) { return +s; }
inline uniform float unary_minus(uniform float s) { return -s; }
inline bool2 unary_not(float2 v) { return make_bool2(!v.v[0], !v.v[1]); }
inline uniform bool2 unary_not(uniform float2 v) { return make_bool2(!v.v[0], !v.v[1]); }
inline float2 unary_plus(float2 v) { return make_float2(+v.v[0], +v.v[1]); }
inline float2 unary_minus(float2 v) { return make_float2(-v.v[0], -v.v[1]); }
inline uniform float2 unary_plus(uniform float2 v) { return make_float2(+v.v[0], +v.v[1]); }
inline uniform float2 unary_minus(uniform float2 v) { return make_float2(-v.v[0], -v.v[1]); }
inline bool3 unary_not(float3 v) { return make_bool3(!v.v[0], !v.v[1], !v.v[2]); }
inline uniform bool3 unary_not(uniform float3 v) { return make_bool3(!v.v[0], !v.v[1], !v.v[2]); }
inline float3 unary_plus(float3 v) { return make_float3(+v.v[0], +v.v[1], +v.v[2]); }
inline float3 unary_minus(float3 v) { return make_float3(-v.v[0], -v.v[1], -v.v[2]); }
inline uniform float3 unary_plus(uniform float3 v) { return make_float3(+v.v[0], +v.v[1], +v.v[2]); }
inline uniform float3 unary_minus(uniform float3 v) { return make_float3(-v.v[0], -v.v[1], -v.v[2]); }
inline bool4 unary_not(float4 v) { return make_bool4(!v.v[0], !v.v[1], !v.v[2], !v.v[3]); }
inline uniform bool4 unary_not(uniform float4 v) { return make_bool4(!v.v[0], !v.v[1], !v.v[2], !v.v[3]); }
inline float4 unary_plus(float4 v) { return make_float4(+v.v[0], +v.v[1], +v.v[2], +v.v[3]); }
inline float4 unary_minus(float4 v) { return make_float4(-v.v[0], -v.v[1], -v.v[2], -v.v[3]); }
inline uniform float4 unary_plus(uniform float4 v) { return make_float4(+v.v[0], +v.v[1], +v.v[2], +v.v[3]); }
inline uniform float4 unary_minus(uniform float4 v) { return make_float4(-v.v[0], -v.v[1], -v.v[2], -v.v[3]); }

inline bool unary_not(bool s) { return !s; }
inline uniform bool unary_not(uniform bool s) { return !s; }
inline bool2 unary_not(bool2 v) { return make_bool2(!v.v[0], !v.v[1]); }
inline uniform bool2 unary_not(uniform bool2 v) { return make_bool2(!v.v[0], !v.v[1]); }
inline bool3 unary_not(bool3 v) { return make_bool3(!v.v[0], !v.v[1], !v.v[2]); }
inline uniform bool3 unary_not(uniform bool3 v) { return make_bool3(!v.v[0], !v.v[1], !v.v[2]); }
inline bool4 unary_not(bool4 v) { return make_bool4(!v.v[0], !v.v[1], !v.v[2], !v.v[3]); }
inline uniform bool4 unary_not(uniform bool4 v) { return make_bool4(!v.v[0], !v.v[1], !v.v[2], !v.v[3]); }

inline uniform bool binary_eq(uniform int lhs, uniform int rhs) { return lhs == rhs; }
inline bool binary_eq(int lhs, uniform int rhs) { return lhs == rhs; }
inline bool binary_eq(uniform int lhs, int rhs) { return lhs == rhs; }
inline bool binary_eq(int lhs, int rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline uniform bool2 binary_eq(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(uniform int2 lhs, int rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(int2 lhs, int rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline uniform bool2 binary_eq(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(int lhs, uniform int2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(uniform int lhs, int2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(int lhs, int2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline uniform bool3 binary_eq(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline uniform bool3 binary_eq(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(uniform int3 lhs, int rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(int3 lhs, int rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline uniform bool3 binary_eq(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(int lhs, uniform int3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(uniform int lhs, int3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(int lhs, int3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline uniform bool4 binary_eq(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline uniform bool4 binary_eq(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(uniform int4 lhs, int rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(int4 lhs, int rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline uniform bool4 binary_eq(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(int lhs, uniform int4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(uniform int lhs, int4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(int lhs, int4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline uniform bool binary_eq(uniform uint lhs, uniform uint rhs) { return lhs == rhs; }
inline bool binary_eq(uint lhs, uniform uint rhs) { return lhs == rhs; }
inline bool binary_eq(uniform uint lhs, uint rhs) { return lhs == rhs; }
inline bool binary_eq(uint lhs, uint rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline uniform bool2 binary_eq(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline uniform bool2 binary_eq(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(uint lhs, uniform uint2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(uniform uint lhs, uint2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(uint lhs, uint2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline uniform bool3 binary_eq(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline uniform bool3 binary_eq(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline uniform bool3 binary_eq(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(uint lhs, uniform uint3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(uniform uint lhs, uint3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(uint lhs, uint3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline uniform bool4 binary_eq(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline uniform bool4 binary_eq(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline uniform bool4 binary_eq(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(uint lhs, uniform uint4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(uniform uint lhs, uint4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(uint lhs, uint4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline uniform bool binary_eq(uniform float lhs, uniform float rhs) { return lhs == rhs; }
inline bool binary_eq(float lhs, uniform float rhs) { return lhs == rhs; }
inline bool binary_eq(uniform float lhs, float rhs) { return lhs == rhs; }
inline bool binary_eq(float lhs, float rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline uniform bool2 binary_eq(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(uniform float2 lhs, float rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(float2 lhs, float rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline uniform bool2 binary_eq(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(float lhs, uniform float2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(uniform float lhs, float2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(float lhs, float2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline uniform bool3 binary_eq(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline uniform bool3 binary_eq(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(uniform float3 lhs, float rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(float3 lhs, float rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline uniform bool3 binary_eq(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(float lhs, uniform float3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(uniform float lhs, float3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(float lhs, float3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline uniform bool4 binary_eq(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline uniform bool4 binary_eq(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(uniform float4 lhs, float rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(float4 lhs, float rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline uniform bool4 binary_eq(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(float lhs, uniform float4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(uniform float lhs, float4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(float lhs, float4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline uniform bool binary_eq(uniform bool lhs, uniform bool rhs) { return lhs == rhs; }
inline bool binary_eq(bool lhs, uniform bool rhs) { return lhs == rhs; }
inline bool binary_eq(uniform bool lhs, bool rhs) { return lhs == rhs; }
inline bool binary_eq(bool lhs, bool rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline bool2 binary_eq(bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1]); }
inline uniform bool2 binary_eq(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline bool2 binary_eq(bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] == rhs, lhs.v[1] == rhs); }
inline uniform bool2 binary_eq(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(bool lhs, uniform bool2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(uniform bool lhs, bool2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline bool2 binary_eq(bool lhs, bool2 rhs) { return make_bool2(lhs == rhs.v[0], lhs == rhs.v[1]); }
inline uniform bool3 binary_eq(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline bool3 binary_eq(bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2]); }
inline uniform bool3 binary_eq(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline bool3 binary_eq(bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs); }
inline uniform bool3 binary_eq(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(bool lhs, uniform bool3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(uniform bool lhs, bool3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline bool3 binary_eq(bool lhs, bool3 rhs) { return make_bool3(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2]); }
inline uniform bool4 binary_eq(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline bool4 binary_eq(bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] == rhs.v[0], lhs.v[1] == rhs.v[1], lhs.v[2] == rhs.v[2], lhs.v[3] == rhs.v[3]); }
inline uniform bool4 binary_eq(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline bool4 binary_eq(bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] == rhs, lhs.v[1] == rhs, lhs.v[2] == rhs, lhs.v[3] == rhs); }
inline uniform bool4 binary_eq(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(bool lhs, uniform bool4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(uniform bool lhs, bool4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }
inline bool4 binary_eq(bool lhs, bool4 rhs) { return make_bool4(lhs == rhs.v[0], lhs == rhs.v[1], lhs == rhs.v[2], lhs == rhs.v[3]); }

inline uniform bool binary_ne(uniform int lhs, uniform int rhs) { return lhs != rhs; }
inline bool binary_ne(int lhs, uniform int rhs) { return lhs != rhs; }
inline bool binary_ne(uniform int lhs, int rhs) { return lhs != rhs; }
inline bool binary_ne(int lhs, int rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline uniform bool2 binary_ne(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(uniform int2 lhs, int rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(int2 lhs, int rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline uniform bool2 binary_ne(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(int lhs, uniform int2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(uniform int lhs, int2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(int lhs, int2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline uniform bool3 binary_ne(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline uniform bool3 binary_ne(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(uniform int3 lhs, int rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(int3 lhs, int rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline uniform bool3 binary_ne(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(int lhs, uniform int3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(uniform int lhs, int3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(int lhs, int3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline uniform bool4 binary_ne(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline uniform bool4 binary_ne(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(uniform int4 lhs, int rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(int4 lhs, int rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline uniform bool4 binary_ne(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(int lhs, uniform int4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(uniform int lhs, int4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(int lhs, int4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline uniform bool binary_ne(uniform uint lhs, uniform uint rhs) { return lhs != rhs; }
inline bool binary_ne(uint lhs, uniform uint rhs) { return lhs != rhs; }
inline bool binary_ne(uniform uint lhs, uint rhs) { return lhs != rhs; }
inline bool binary_ne(uint lhs, uint rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline uniform bool2 binary_ne(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline uniform bool2 binary_ne(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(uint lhs, uniform uint2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(uniform uint lhs, uint2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(uint lhs, uint2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline uniform bool3 binary_ne(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline uniform bool3 binary_ne(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline uniform bool3 binary_ne(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(uint lhs, uniform uint3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(uniform uint lhs, uint3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(uint lhs, uint3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline uniform bool4 binary_ne(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline uniform bool4 binary_ne(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline uniform bool4 binary_ne(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(uint lhs, uniform uint4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(uniform uint lhs, uint4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(uint lhs, uint4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline uniform bool binary_ne(uniform float lhs, uniform float rhs) { return lhs != rhs; }
inline bool binary_ne(float lhs, uniform float rhs) { return lhs != rhs; }
inline bool binary_ne(uniform float lhs, float rhs) { return lhs != rhs; }
inline bool binary_ne(float lhs, float rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline uniform bool2 binary_ne(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(uniform float2 lhs, float rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(float2 lhs, float rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline uniform bool2 binary_ne(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(float lhs, uniform float2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(uniform float lhs, float2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(float lhs, float2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline uniform bool3 binary_ne(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline uniform bool3 binary_ne(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(uniform float3 lhs, float rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(float3 lhs, float rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline uniform bool3 binary_ne(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(float lhs, uniform float3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(uniform float lhs, float3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(float lhs, float3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline uniform bool4 binary_ne(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline uniform bool4 binary_ne(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(uniform float4 lhs, float rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(float4 lhs, float rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline uniform bool4 binary_ne(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(float lhs, uniform float4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(uniform float lhs, float4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(float lhs, float4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline uniform bool binary_ne(uniform bool lhs, uniform bool rhs) { return lhs != rhs; }
inline bool binary_ne(bool lhs, uniform bool rhs) { return lhs != rhs; }
inline bool binary_ne(uniform bool lhs, bool rhs) { return lhs != rhs; }
inline bool binary_ne(bool lhs, bool rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline bool2 binary_ne(bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1]); }
inline uniform bool2 binary_ne(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline bool2 binary_ne(bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] != rhs, lhs.v[1] != rhs); }
inline uniform bool2 binary_ne(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(bool lhs, uniform bool2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(uniform bool lhs, bool2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline bool2 binary_ne(bool lhs, bool2 rhs) { return make_bool2(lhs != rhs.v[0], lhs != rhs.v[1]); }
inline uniform bool3 binary_ne(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline bool3 binary_ne(bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2]); }
inline uniform bool3 binary_ne(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline bool3 binary_ne(bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs); }
inline uniform bool3 binary_ne(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(bool lhs, uniform bool3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(uniform bool lhs, bool3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline bool3 binary_ne(bool lhs, bool3 rhs) { return make_bool3(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2]); }
inline uniform bool4 binary_ne(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline bool4 binary_ne(bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] != rhs.v[0], lhs.v[1] != rhs.v[1], lhs.v[2] != rhs.v[2], lhs.v[3] != rhs.v[3]); }
inline uniform bool4 binary_ne(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline bool4 binary_ne(bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] != rhs, lhs.v[1] != rhs, lhs.v[2] != rhs, lhs.v[3] != rhs); }
inline uniform bool4 binary_ne(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(bool lhs, uniform bool4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(uniform bool lhs, bool4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }
inline bool4 binary_ne(bool lhs, bool4 rhs) { return make_bool4(lhs != rhs.v[0], lhs != rhs.v[1], lhs != rhs.v[2], lhs != rhs.v[3]); }

inline uniform bool binary_lt(uniform int lhs, uniform int rhs) { return lhs < rhs; }
inline bool binary_lt(int lhs, uniform int rhs) { return lhs < rhs; }
inline bool binary_lt(uniform int lhs, int rhs) { return lhs < rhs; }
inline bool binary_lt(int lhs, int rhs) { return lhs < rhs; }
inline uniform bool2 binary_lt(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline bool2 binary_lt(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline bool2 binary_lt(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline bool2 binary_lt(int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline uniform bool2 binary_lt(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline bool2 binary_lt(int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline bool2 binary_lt(uniform int2 lhs, int rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline bool2 binary_lt(int2 lhs, int rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline uniform bool2 binary_lt(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline bool2 binary_lt(int lhs, uniform int2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline bool2 binary_lt(uniform int lhs, int2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline bool2 binary_lt(int lhs, int2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline uniform bool3 binary_lt(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline bool3 binary_lt(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline bool3 binary_lt(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline bool3 binary_lt(int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline uniform bool3 binary_lt(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline bool3 binary_lt(int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline bool3 binary_lt(uniform int3 lhs, int rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline bool3 binary_lt(int3 lhs, int rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline uniform bool3 binary_lt(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline bool3 binary_lt(int lhs, uniform int3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline bool3 binary_lt(uniform int lhs, int3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline bool3 binary_lt(int lhs, int3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline uniform bool4 binary_lt(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline bool4 binary_lt(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline bool4 binary_lt(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline bool4 binary_lt(int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline uniform bool4 binary_lt(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline bool4 binary_lt(int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline bool4 binary_lt(uniform int4 lhs, int rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline bool4 binary_lt(int4 lhs, int rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline uniform bool4 binary_lt(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline bool4 binary_lt(int lhs, uniform int4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline bool4 binary_lt(uniform int lhs, int4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline bool4 binary_lt(int lhs, int4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline uniform bool binary_lt(uniform uint lhs, uniform uint rhs) { return lhs < rhs; }
inline bool binary_lt(uint lhs, uniform uint rhs) { return lhs < rhs; }
inline bool binary_lt(uniform uint lhs, uint rhs) { return lhs < rhs; }
inline bool binary_lt(uint lhs, uint rhs) { return lhs < rhs; }
inline uniform bool2 binary_lt(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline bool2 binary_lt(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline bool2 binary_lt(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline bool2 binary_lt(uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline uniform bool2 binary_lt(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline bool2 binary_lt(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline bool2 binary_lt(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline bool2 binary_lt(uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline uniform bool2 binary_lt(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline bool2 binary_lt(uint lhs, uniform uint2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline bool2 binary_lt(uniform uint lhs, uint2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline bool2 binary_lt(uint lhs, uint2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline uniform bool3 binary_lt(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline bool3 binary_lt(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline bool3 binary_lt(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline bool3 binary_lt(uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline uniform bool3 binary_lt(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline bool3 binary_lt(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline bool3 binary_lt(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline bool3 binary_lt(uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline uniform bool3 binary_lt(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline bool3 binary_lt(uint lhs, uniform uint3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline bool3 binary_lt(uniform uint lhs, uint3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline bool3 binary_lt(uint lhs, uint3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline uniform bool4 binary_lt(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline bool4 binary_lt(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline bool4 binary_lt(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline bool4 binary_lt(uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline uniform bool4 binary_lt(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline bool4 binary_lt(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline bool4 binary_lt(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline bool4 binary_lt(uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline uniform bool4 binary_lt(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline bool4 binary_lt(uint lhs, uniform uint4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline bool4 binary_lt(uniform uint lhs, uint4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline bool4 binary_lt(uint lhs, uint4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline uniform bool binary_lt(uniform float lhs, uniform float rhs) { return lhs < rhs; }
inline bool binary_lt(float lhs, uniform float rhs) { return lhs < rhs; }
inline bool binary_lt(uniform float lhs, float rhs) { return lhs < rhs; }
inline bool binary_lt(float lhs, float rhs) { return lhs < rhs; }
inline uniform bool2 binary_lt(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline bool2 binary_lt(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline bool2 binary_lt(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline bool2 binary_lt(float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1]); }
inline uniform bool2 binary_lt(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline bool2 binary_lt(float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline bool2 binary_lt(uniform float2 lhs, float rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline bool2 binary_lt(float2 lhs, float rhs) { return make_bool2(lhs.v[0] < rhs, lhs.v[1] < rhs); }
inline uniform bool2 binary_lt(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline bool2 binary_lt(float lhs, uniform float2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline bool2 binary_lt(uniform float lhs, float2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline bool2 binary_lt(float lhs, float2 rhs) { return make_bool2(lhs < rhs.v[0], lhs < rhs.v[1]); }
inline uniform bool3 binary_lt(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline bool3 binary_lt(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline bool3 binary_lt(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline bool3 binary_lt(float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2]); }
inline uniform bool3 binary_lt(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline bool3 binary_lt(float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline bool3 binary_lt(uniform float3 lhs, float rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline bool3 binary_lt(float3 lhs, float rhs) { return make_bool3(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs); }
inline uniform bool3 binary_lt(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline bool3 binary_lt(float lhs, uniform float3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline bool3 binary_lt(uniform float lhs, float3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline bool3 binary_lt(float lhs, float3 rhs) { return make_bool3(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2]); }
inline uniform bool4 binary_lt(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline bool4 binary_lt(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline bool4 binary_lt(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline bool4 binary_lt(float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] < rhs.v[0], lhs.v[1] < rhs.v[1], lhs.v[2] < rhs.v[2], lhs.v[3] < rhs.v[3]); }
inline uniform bool4 binary_lt(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline bool4 binary_lt(float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline bool4 binary_lt(uniform float4 lhs, float rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline bool4 binary_lt(float4 lhs, float rhs) { return make_bool4(lhs.v[0] < rhs, lhs.v[1] < rhs, lhs.v[2] < rhs, lhs.v[3] < rhs); }
inline uniform bool4 binary_lt(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline bool4 binary_lt(float lhs, uniform float4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline bool4 binary_lt(uniform float lhs, float4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }
inline bool4 binary_lt(float lhs, float4 rhs) { return make_bool4(lhs < rhs.v[0], lhs < rhs.v[1], lhs < rhs.v[2], lhs < rhs.v[3]); }

inline uniform bool binary_gt(uniform int lhs, uniform int rhs) { return lhs > rhs; }
inline bool binary_gt(int lhs, uniform int rhs) { return lhs > rhs; }
inline bool binary_gt(uniform int lhs, int rhs) { return lhs > rhs; }
inline bool binary_gt(int lhs, int rhs) { return lhs > rhs; }
inline uniform bool2 binary_gt(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline bool2 binary_gt(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline bool2 binary_gt(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline bool2 binary_gt(int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline uniform bool2 binary_gt(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline bool2 binary_gt(int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline bool2 binary_gt(uniform int2 lhs, int rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline bool2 binary_gt(int2 lhs, int rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline uniform bool2 binary_gt(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline bool2 binary_gt(int lhs, uniform int2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline bool2 binary_gt(uniform int lhs, int2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline bool2 binary_gt(int lhs, int2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline uniform bool3 binary_gt(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline bool3 binary_gt(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline bool3 binary_gt(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline bool3 binary_gt(int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline uniform bool3 binary_gt(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline bool3 binary_gt(int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline bool3 binary_gt(uniform int3 lhs, int rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline bool3 binary_gt(int3 lhs, int rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline uniform bool3 binary_gt(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline bool3 binary_gt(int lhs, uniform int3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline bool3 binary_gt(uniform int lhs, int3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline bool3 binary_gt(int lhs, int3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline uniform bool4 binary_gt(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline bool4 binary_gt(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline bool4 binary_gt(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline bool4 binary_gt(int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline uniform bool4 binary_gt(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline bool4 binary_gt(int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline bool4 binary_gt(uniform int4 lhs, int rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline bool4 binary_gt(int4 lhs, int rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline uniform bool4 binary_gt(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline bool4 binary_gt(int lhs, uniform int4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline bool4 binary_gt(uniform int lhs, int4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline bool4 binary_gt(int lhs, int4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline uniform bool binary_gt(uniform uint lhs, uniform uint rhs) { return lhs > rhs; }
inline bool binary_gt(uint lhs, uniform uint rhs) { return lhs > rhs; }
inline bool binary_gt(uniform uint lhs, uint rhs) { return lhs > rhs; }
inline bool binary_gt(uint lhs, uint rhs) { return lhs > rhs; }
inline uniform bool2 binary_gt(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline bool2 binary_gt(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline bool2 binary_gt(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline bool2 binary_gt(uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline uniform bool2 binary_gt(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline bool2 binary_gt(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline bool2 binary_gt(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline bool2 binary_gt(uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline uniform bool2 binary_gt(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline bool2 binary_gt(uint lhs, uniform uint2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline bool2 binary_gt(uniform uint lhs, uint2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline bool2 binary_gt(uint lhs, uint2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline uniform bool3 binary_gt(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline bool3 binary_gt(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline bool3 binary_gt(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline bool3 binary_gt(uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline uniform bool3 binary_gt(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline bool3 binary_gt(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline bool3 binary_gt(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline bool3 binary_gt(uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline uniform bool3 binary_gt(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline bool3 binary_gt(uint lhs, uniform uint3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline bool3 binary_gt(uniform uint lhs, uint3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline bool3 binary_gt(uint lhs, uint3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline uniform bool4 binary_gt(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline bool4 binary_gt(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline bool4 binary_gt(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline bool4 binary_gt(uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline uniform bool4 binary_gt(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline bool4 binary_gt(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline bool4 binary_gt(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline bool4 binary_gt(uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline uniform bool4 binary_gt(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline bool4 binary_gt(uint lhs, uniform uint4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline bool4 binary_gt(uniform uint lhs, uint4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline bool4 binary_gt(uint lhs, uint4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline uniform bool binary_gt(uniform float lhs, uniform float rhs) { return lhs > rhs; }
inline bool binary_gt(float lhs, uniform float rhs) { return lhs > rhs; }
inline bool binary_gt(uniform float lhs, float rhs) { return lhs > rhs; }
inline bool binary_gt(float lhs, float rhs) { return lhs > rhs; }
inline uniform bool2 binary_gt(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline bool2 binary_gt(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline bool2 binary_gt(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline bool2 binary_gt(float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1]); }
inline uniform bool2 binary_gt(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline bool2 binary_gt(float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline bool2 binary_gt(uniform float2 lhs, float rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline bool2 binary_gt(float2 lhs, float rhs) { return make_bool2(lhs.v[0] > rhs, lhs.v[1] > rhs); }
inline uniform bool2 binary_gt(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline bool2 binary_gt(float lhs, uniform float2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline bool2 binary_gt(uniform float lhs, float2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline bool2 binary_gt(float lhs, float2 rhs) { return make_bool2(lhs > rhs.v[0], lhs > rhs.v[1]); }
inline uniform bool3 binary_gt(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline bool3 binary_gt(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline bool3 binary_gt(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline bool3 binary_gt(float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2]); }
inline uniform bool3 binary_gt(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline bool3 binary_gt(float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline bool3 binary_gt(uniform float3 lhs, float rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline bool3 binary_gt(float3 lhs, float rhs) { return make_bool3(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs); }
inline uniform bool3 binary_gt(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline bool3 binary_gt(float lhs, uniform float3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline bool3 binary_gt(uniform float lhs, float3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline bool3 binary_gt(float lhs, float3 rhs) { return make_bool3(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2]); }
inline uniform bool4 binary_gt(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline bool4 binary_gt(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline bool4 binary_gt(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline bool4 binary_gt(float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] > rhs.v[0], lhs.v[1] > rhs.v[1], lhs.v[2] > rhs.v[2], lhs.v[3] > rhs.v[3]); }
inline uniform bool4 binary_gt(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline bool4 binary_gt(float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline bool4 binary_gt(uniform float4 lhs, float rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline bool4 binary_gt(float4 lhs, float rhs) { return make_bool4(lhs.v[0] > rhs, lhs.v[1] > rhs, lhs.v[2] > rhs, lhs.v[3] > rhs); }
inline uniform bool4 binary_gt(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline bool4 binary_gt(float lhs, uniform float4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline bool4 binary_gt(uniform float lhs, float4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }
inline bool4 binary_gt(float lhs, float4 rhs) { return make_bool4(lhs > rhs.v[0], lhs > rhs.v[1], lhs > rhs.v[2], lhs > rhs.v[3]); }

inline uniform bool binary_le(uniform int lhs, uniform int rhs) { return lhs <= rhs; }
inline bool binary_le(int lhs, uniform int rhs) { return lhs <= rhs; }
inline bool binary_le(uniform int lhs, int rhs) { return lhs <= rhs; }
inline bool binary_le(int lhs, int rhs) { return lhs <= rhs; }
inline uniform bool2 binary_le(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline bool2 binary_le(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline bool2 binary_le(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline bool2 binary_le(int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline uniform bool2 binary_le(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline bool2 binary_le(int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline bool2 binary_le(uniform int2 lhs, int rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline bool2 binary_le(int2 lhs, int rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline uniform bool2 binary_le(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline bool2 binary_le(int lhs, uniform int2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline bool2 binary_le(uniform int lhs, int2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline bool2 binary_le(int lhs, int2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline uniform bool3 binary_le(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline bool3 binary_le(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline bool3 binary_le(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline bool3 binary_le(int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline uniform bool3 binary_le(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline bool3 binary_le(int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline bool3 binary_le(uniform int3 lhs, int rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline bool3 binary_le(int3 lhs, int rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline uniform bool3 binary_le(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline bool3 binary_le(int lhs, uniform int3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline bool3 binary_le(uniform int lhs, int3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline bool3 binary_le(int lhs, int3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline uniform bool4 binary_le(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline bool4 binary_le(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline bool4 binary_le(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline bool4 binary_le(int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline uniform bool4 binary_le(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline bool4 binary_le(int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline bool4 binary_le(uniform int4 lhs, int rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline bool4 binary_le(int4 lhs, int rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline uniform bool4 binary_le(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline bool4 binary_le(int lhs, uniform int4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline bool4 binary_le(uniform int lhs, int4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline bool4 binary_le(int lhs, int4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline uniform bool binary_le(uniform uint lhs, uniform uint rhs) { return lhs <= rhs; }
inline bool binary_le(uint lhs, uniform uint rhs) { return lhs <= rhs; }
inline bool binary_le(uniform uint lhs, uint rhs) { return lhs <= rhs; }
inline bool binary_le(uint lhs, uint rhs) { return lhs <= rhs; }
inline uniform bool2 binary_le(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline bool2 binary_le(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline bool2 binary_le(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline bool2 binary_le(uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline uniform bool2 binary_le(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline bool2 binary_le(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline bool2 binary_le(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline bool2 binary_le(uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline uniform bool2 binary_le(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline bool2 binary_le(uint lhs, uniform uint2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline bool2 binary_le(uniform uint lhs, uint2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline bool2 binary_le(uint lhs, uint2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline uniform bool3 binary_le(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline bool3 binary_le(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline bool3 binary_le(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline bool3 binary_le(uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline uniform bool3 binary_le(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline bool3 binary_le(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline bool3 binary_le(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline bool3 binary_le(uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline uniform bool3 binary_le(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline bool3 binary_le(uint lhs, uniform uint3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline bool3 binary_le(uniform uint lhs, uint3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline bool3 binary_le(uint lhs, uint3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline uniform bool4 binary_le(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline bool4 binary_le(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline bool4 binary_le(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline bool4 binary_le(uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline uniform bool4 binary_le(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline bool4 binary_le(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline bool4 binary_le(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline bool4 binary_le(uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline uniform bool4 binary_le(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline bool4 binary_le(uint lhs, uniform uint4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline bool4 binary_le(uniform uint lhs, uint4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline bool4 binary_le(uint lhs, uint4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline uniform bool binary_le(uniform float lhs, uniform float rhs) { return lhs <= rhs; }
inline bool binary_le(float lhs, uniform float rhs) { return lhs <= rhs; }
inline bool binary_le(uniform float lhs, float rhs) { return lhs <= rhs; }
inline bool binary_le(float lhs, float rhs) { return lhs <= rhs; }
inline uniform bool2 binary_le(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline bool2 binary_le(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline bool2 binary_le(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline bool2 binary_le(float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1]); }
inline uniform bool2 binary_le(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline bool2 binary_le(float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline bool2 binary_le(uniform float2 lhs, float rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline bool2 binary_le(float2 lhs, float rhs) { return make_bool2(lhs.v[0] <= rhs, lhs.v[1] <= rhs); }
inline uniform bool2 binary_le(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline bool2 binary_le(float lhs, uniform float2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline bool2 binary_le(uniform float lhs, float2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline bool2 binary_le(float lhs, float2 rhs) { return make_bool2(lhs <= rhs.v[0], lhs <= rhs.v[1]); }
inline uniform bool3 binary_le(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline bool3 binary_le(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline bool3 binary_le(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline bool3 binary_le(float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2]); }
inline uniform bool3 binary_le(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline bool3 binary_le(float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline bool3 binary_le(uniform float3 lhs, float rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline bool3 binary_le(float3 lhs, float rhs) { return make_bool3(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs); }
inline uniform bool3 binary_le(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline bool3 binary_le(float lhs, uniform float3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline bool3 binary_le(uniform float lhs, float3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline bool3 binary_le(float lhs, float3 rhs) { return make_bool3(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2]); }
inline uniform bool4 binary_le(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline bool4 binary_le(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline bool4 binary_le(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline bool4 binary_le(float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] <= rhs.v[0], lhs.v[1] <= rhs.v[1], lhs.v[2] <= rhs.v[2], lhs.v[3] <= rhs.v[3]); }
inline uniform bool4 binary_le(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline bool4 binary_le(float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline bool4 binary_le(uniform float4 lhs, float rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline bool4 binary_le(float4 lhs, float rhs) { return make_bool4(lhs.v[0] <= rhs, lhs.v[1] <= rhs, lhs.v[2] <= rhs, lhs.v[3] <= rhs); }
inline uniform bool4 binary_le(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline bool4 binary_le(float lhs, uniform float4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline bool4 binary_le(uniform float lhs, float4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }
inline bool4 binary_le(float lhs, float4 rhs) { return make_bool4(lhs <= rhs.v[0], lhs <= rhs.v[1], lhs <= rhs.v[2], lhs <= rhs.v[3]); }

inline uniform bool binary_ge(uniform int lhs, uniform int rhs) { return lhs >= rhs; }
inline bool binary_ge(int lhs, uniform int rhs) { return lhs >= rhs; }
inline bool binary_ge(uniform int lhs, int rhs) { return lhs >= rhs; }
inline bool binary_ge(int lhs, int rhs) { return lhs >= rhs; }
inline uniform bool2 binary_ge(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline bool2 binary_ge(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline bool2 binary_ge(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline bool2 binary_ge(int2 lhs, int2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline uniform bool2 binary_ge(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline bool2 binary_ge(int2 lhs, uniform int rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline bool2 binary_ge(uniform int2 lhs, int rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline bool2 binary_ge(int2 lhs, int rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline uniform bool2 binary_ge(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline bool2 binary_ge(int lhs, uniform int2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline bool2 binary_ge(uniform int lhs, int2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline bool2 binary_ge(int lhs, int2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline uniform bool3 binary_ge(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline bool3 binary_ge(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline bool3 binary_ge(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline bool3 binary_ge(int3 lhs, int3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline uniform bool3 binary_ge(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline bool3 binary_ge(int3 lhs, uniform int rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline bool3 binary_ge(uniform int3 lhs, int rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline bool3 binary_ge(int3 lhs, int rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline uniform bool3 binary_ge(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline bool3 binary_ge(int lhs, uniform int3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline bool3 binary_ge(uniform int lhs, int3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline bool3 binary_ge(int lhs, int3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline uniform bool4 binary_ge(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline bool4 binary_ge(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline bool4 binary_ge(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline bool4 binary_ge(int4 lhs, int4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline uniform bool4 binary_ge(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline bool4 binary_ge(int4 lhs, uniform int rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline bool4 binary_ge(uniform int4 lhs, int rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline bool4 binary_ge(int4 lhs, int rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline uniform bool4 binary_ge(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline bool4 binary_ge(int lhs, uniform int4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline bool4 binary_ge(uniform int lhs, int4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline bool4 binary_ge(int lhs, int4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline uniform bool binary_ge(uniform uint lhs, uniform uint rhs) { return lhs >= rhs; }
inline bool binary_ge(uint lhs, uniform uint rhs) { return lhs >= rhs; }
inline bool binary_ge(uniform uint lhs, uint rhs) { return lhs >= rhs; }
inline bool binary_ge(uint lhs, uint rhs) { return lhs >= rhs; }
inline uniform bool2 binary_ge(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline bool2 binary_ge(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline bool2 binary_ge(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline bool2 binary_ge(uint2 lhs, uint2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline uniform bool2 binary_ge(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline bool2 binary_ge(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline bool2 binary_ge(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline bool2 binary_ge(uint2 lhs, uint rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline uniform bool2 binary_ge(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline bool2 binary_ge(uint lhs, uniform uint2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline bool2 binary_ge(uniform uint lhs, uint2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline bool2 binary_ge(uint lhs, uint2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline uniform bool3 binary_ge(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline bool3 binary_ge(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline bool3 binary_ge(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline bool3 binary_ge(uint3 lhs, uint3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline uniform bool3 binary_ge(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline bool3 binary_ge(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline bool3 binary_ge(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline bool3 binary_ge(uint3 lhs, uint rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline uniform bool3 binary_ge(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline bool3 binary_ge(uint lhs, uniform uint3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline bool3 binary_ge(uniform uint lhs, uint3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline bool3 binary_ge(uint lhs, uint3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline uniform bool4 binary_ge(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline bool4 binary_ge(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline bool4 binary_ge(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline bool4 binary_ge(uint4 lhs, uint4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline uniform bool4 binary_ge(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline bool4 binary_ge(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline bool4 binary_ge(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline bool4 binary_ge(uint4 lhs, uint rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline uniform bool4 binary_ge(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline bool4 binary_ge(uint lhs, uniform uint4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline bool4 binary_ge(uniform uint lhs, uint4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline bool4 binary_ge(uint lhs, uint4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline uniform bool binary_ge(uniform float lhs, uniform float rhs) { return lhs >= rhs; }
inline bool binary_ge(float lhs, uniform float rhs) { return lhs >= rhs; }
inline bool binary_ge(uniform float lhs, float rhs) { return lhs >= rhs; }
inline bool binary_ge(float lhs, float rhs) { return lhs >= rhs; }
inline uniform bool2 binary_ge(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline bool2 binary_ge(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline bool2 binary_ge(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline bool2 binary_ge(float2 lhs, float2 rhs) { return make_bool2(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1]); }
inline uniform bool2 binary_ge(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline bool2 binary_ge(float2 lhs, uniform float rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline bool2 binary_ge(uniform float2 lhs, float rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline bool2 binary_ge(float2 lhs, float rhs) { return make_bool2(lhs.v[0] >= rhs, lhs.v[1] >= rhs); }
inline uniform bool2 binary_ge(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline bool2 binary_ge(float lhs, uniform float2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline bool2 binary_ge(uniform float lhs, float2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline bool2 binary_ge(float lhs, float2 rhs) { return make_bool2(lhs >= rhs.v[0], lhs >= rhs.v[1]); }
inline uniform bool3 binary_ge(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline bool3 binary_ge(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline bool3 binary_ge(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline bool3 binary_ge(float3 lhs, float3 rhs) { return make_bool3(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2]); }
inline uniform bool3 binary_ge(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline bool3 binary_ge(float3 lhs, uniform float rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline bool3 binary_ge(uniform float3 lhs, float rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline bool3 binary_ge(float3 lhs, float rhs) { return make_bool3(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs); }
inline uniform bool3 binary_ge(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline bool3 binary_ge(float lhs, uniform float3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline bool3 binary_ge(uniform float lhs, float3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline bool3 binary_ge(float lhs, float3 rhs) { return make_bool3(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2]); }
inline uniform bool4 binary_ge(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline bool4 binary_ge(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline bool4 binary_ge(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline bool4 binary_ge(float4 lhs, float4 rhs) { return make_bool4(lhs.v[0] >= rhs.v[0], lhs.v[1] >= rhs.v[1], lhs.v[2] >= rhs.v[2], lhs.v[3] >= rhs.v[3]); }
inline uniform bool4 binary_ge(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline bool4 binary_ge(float4 lhs, uniform float rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline bool4 binary_ge(uniform float4 lhs, float rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline bool4 binary_ge(float4 lhs, float rhs) { return make_bool4(lhs.v[0] >= rhs, lhs.v[1] >= rhs, lhs.v[2] >= rhs, lhs.v[3] >= rhs); }
inline uniform bool4 binary_ge(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline bool4 binary_ge(float lhs, uniform float4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline bool4 binary_ge(uniform float lhs, float4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }
inline bool4 binary_ge(float lhs, float4 rhs) { return make_bool4(lhs >= rhs.v[0], lhs >= rhs.v[1], lhs >= rhs.v[2], lhs >= rhs.v[3]); }

inline uniform int binary_add(uniform int lhs, uniform int rhs) { return lhs + rhs; }
inline int binary_add(int lhs, uniform int rhs) { return lhs + rhs; }
inline int binary_add(uniform int lhs, int rhs) { return lhs + rhs; }
inline int binary_add(int lhs, int rhs) { return lhs + rhs; }
inline uniform int2 binary_add(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline int2 binary_add(int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline int2 binary_add(uniform int2 lhs, int2 rhs) { return make_int2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline int2 binary_add(int2 lhs, int2 rhs) { return make_int2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline uniform int2 binary_add(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline int2 binary_add(int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline int2 binary_add(uniform int2 lhs, int rhs) { return make_int2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline int2 binary_add(int2 lhs, int rhs) { return make_int2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline uniform int2 binary_add(uniform int lhs, uniform int2 rhs) { return make_int2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline int2 binary_add(int lhs, uniform int2 rhs) { return make_int2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline int2 binary_add(uniform int lhs, int2 rhs) { return make_int2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline int2 binary_add(int lhs, int2 rhs) { return make_int2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline uniform int3 binary_add(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline int3 binary_add(int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline int3 binary_add(uniform int3 lhs, int3 rhs) { return make_int3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline int3 binary_add(int3 lhs, int3 rhs) { return make_int3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline uniform int3 binary_add(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline int3 binary_add(int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline int3 binary_add(uniform int3 lhs, int rhs) { return make_int3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline int3 binary_add(int3 lhs, int rhs) { return make_int3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline uniform int3 binary_add(uniform int lhs, uniform int3 rhs) { return make_int3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline int3 binary_add(int lhs, uniform int3 rhs) { return make_int3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline int3 binary_add(uniform int lhs, int3 rhs) { return make_int3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline int3 binary_add(int lhs, int3 rhs) { return make_int3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline uniform int4 binary_add(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline int4 binary_add(int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline int4 binary_add(uniform int4 lhs, int4 rhs) { return make_int4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline int4 binary_add(int4 lhs, int4 rhs) { return make_int4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline uniform int4 binary_add(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline int4 binary_add(int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline int4 binary_add(uniform int4 lhs, int rhs) { return make_int4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline int4 binary_add(int4 lhs, int rhs) { return make_int4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline uniform int4 binary_add(uniform int lhs, uniform int4 rhs) { return make_int4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline int4 binary_add(int lhs, uniform int4 rhs) { return make_int4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline int4 binary_add(uniform int lhs, int4 rhs) { return make_int4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline int4 binary_add(int lhs, int4 rhs) { return make_int4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline uniform uint binary_add(uniform uint lhs, uniform uint rhs) { return lhs + rhs; }
inline uint binary_add(uint lhs, uniform uint rhs) { return lhs + rhs; }
inline uint binary_add(uniform uint lhs, uint rhs) { return lhs + rhs; }
inline uint binary_add(uint lhs, uint rhs) { return lhs + rhs; }
inline uniform uint2 binary_add(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline uint2 binary_add(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline uint2 binary_add(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline uint2 binary_add(uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline uniform uint2 binary_add(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline uint2 binary_add(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline uint2 binary_add(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline uint2 binary_add(uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline uniform uint2 binary_add(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline uint2 binary_add(uint lhs, uniform uint2 rhs) { return make_uint2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline uint2 binary_add(uniform uint lhs, uint2 rhs) { return make_uint2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline uint2 binary_add(uint lhs, uint2 rhs) { return make_uint2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline uniform uint3 binary_add(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline uint3 binary_add(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline uint3 binary_add(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline uint3 binary_add(uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline uniform uint3 binary_add(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline uint3 binary_add(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline uint3 binary_add(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline uint3 binary_add(uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline uniform uint3 binary_add(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline uint3 binary_add(uint lhs, uniform uint3 rhs) { return make_uint3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline uint3 binary_add(uniform uint lhs, uint3 rhs) { return make_uint3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline uint3 binary_add(uint lhs, uint3 rhs) { return make_uint3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline uniform uint4 binary_add(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline uint4 binary_add(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline uint4 binary_add(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline uint4 binary_add(uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline uniform uint4 binary_add(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline uint4 binary_add(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline uint4 binary_add(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline uint4 binary_add(uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline uniform uint4 binary_add(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline uint4 binary_add(uint lhs, uniform uint4 rhs) { return make_uint4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline uint4 binary_add(uniform uint lhs, uint4 rhs) { return make_uint4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline uint4 binary_add(uint lhs, uint4 rhs) { return make_uint4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline uniform float binary_add(uniform float lhs, uniform float rhs) { return lhs + rhs; }
inline float binary_add(float lhs, uniform float rhs) { return lhs + rhs; }
inline float binary_add(uniform float lhs, float rhs) { return lhs + rhs; }
inline float binary_add(float lhs, float rhs) { return lhs + rhs; }
inline uniform float2 binary_add(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline float2 binary_add(float2 lhs, uniform float2 rhs) { return make_float2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline float2 binary_add(uniform float2 lhs, float2 rhs) { return make_float2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline float2 binary_add(float2 lhs, float2 rhs) { return make_float2(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1]); }
inline uniform float2 binary_add(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline float2 binary_add(float2 lhs, uniform float rhs) { return make_float2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline float2 binary_add(uniform float2 lhs, float rhs) { return make_float2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline float2 binary_add(float2 lhs, float rhs) { return make_float2(lhs.v[0] + rhs, lhs.v[1] + rhs); }
inline uniform float2 binary_add(uniform float lhs, uniform float2 rhs) { return make_float2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline float2 binary_add(float lhs, uniform float2 rhs) { return make_float2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline float2 binary_add(uniform float lhs, float2 rhs) { return make_float2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline float2 binary_add(float lhs, float2 rhs) { return make_float2(lhs + rhs.v[0], lhs + rhs.v[1]); }
inline uniform float3 binary_add(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline float3 binary_add(float3 lhs, uniform float3 rhs) { return make_float3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline float3 binary_add(uniform float3 lhs, float3 rhs) { return make_float3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline float3 binary_add(float3 lhs, float3 rhs) { return make_float3(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2]); }
inline uniform float3 binary_add(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline float3 binary_add(float3 lhs, uniform float rhs) { return make_float3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline float3 binary_add(uniform float3 lhs, float rhs) { return make_float3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline float3 binary_add(float3 lhs, float rhs) { return make_float3(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs); }
inline uniform float3 binary_add(uniform float lhs, uniform float3 rhs) { return make_float3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline float3 binary_add(float lhs, uniform float3 rhs) { return make_float3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline float3 binary_add(uniform float lhs, float3 rhs) { return make_float3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline float3 binary_add(float lhs, float3 rhs) { return make_float3(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2]); }
inline uniform float4 binary_add(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline float4 binary_add(float4 lhs, uniform float4 rhs) { return make_float4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline float4 binary_add(uniform float4 lhs, float4 rhs) { return make_float4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline float4 binary_add(float4 lhs, float4 rhs) { return make_float4(lhs.v[0] + rhs.v[0], lhs.v[1] + rhs.v[1], lhs.v[2] + rhs.v[2], lhs.v[3] + rhs.v[3]); }
inline uniform float4 binary_add(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline float4 binary_add(float4 lhs, uniform float rhs) { return make_float4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline float4 binary_add(uniform float4 lhs, float rhs) { return make_float4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline float4 binary_add(float4 lhs, float rhs) { return make_float4(lhs.v[0] + rhs, lhs.v[1] + rhs, lhs.v[2] + rhs, lhs.v[3] + rhs); }
inline uniform float4 binary_add(uniform float lhs, uniform float4 rhs) { return make_float4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline float4 binary_add(float lhs, uniform float4 rhs) { return make_float4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline float4 binary_add(uniform float lhs, float4 rhs) { return make_float4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }
inline float4 binary_add(float lhs, float4 rhs) { return make_float4(lhs + rhs.v[0], lhs + rhs.v[1], lhs + rhs.v[2], lhs + rhs.v[3]); }

inline uniform int binary_sub(uniform int lhs, uniform int rhs) { return lhs - rhs; }
inline int binary_sub(int lhs, uniform int rhs) { return lhs - rhs; }
inline int binary_sub(uniform int lhs, int rhs) { return lhs - rhs; }
inline int binary_sub(int lhs, int rhs) { return lhs - rhs; }
inline uniform int2 binary_sub(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline int2 binary_sub(int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline int2 binary_sub(uniform int2 lhs, int2 rhs) { return make_int2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline int2 binary_sub(int2 lhs, int2 rhs) { return make_int2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline uniform int2 binary_sub(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline int2 binary_sub(int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline int2 binary_sub(uniform int2 lhs, int rhs) { return make_int2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline int2 binary_sub(int2 lhs, int rhs) { return make_int2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline uniform int2 binary_sub(uniform int lhs, uniform int2 rhs) { return make_int2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline int2 binary_sub(int lhs, uniform int2 rhs) { return make_int2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline int2 binary_sub(uniform int lhs, int2 rhs) { return make_int2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline int2 binary_sub(int lhs, int2 rhs) { return make_int2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline uniform int3 binary_sub(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline int3 binary_sub(int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline int3 binary_sub(uniform int3 lhs, int3 rhs) { return make_int3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline int3 binary_sub(int3 lhs, int3 rhs) { return make_int3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline uniform int3 binary_sub(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline int3 binary_sub(int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline int3 binary_sub(uniform int3 lhs, int rhs) { return make_int3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline int3 binary_sub(int3 lhs, int rhs) { return make_int3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline uniform int3 binary_sub(uniform int lhs, uniform int3 rhs) { return make_int3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline int3 binary_sub(int lhs, uniform int3 rhs) { return make_int3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline int3 binary_sub(uniform int lhs, int3 rhs) { return make_int3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline int3 binary_sub(int lhs, int3 rhs) { return make_int3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline uniform int4 binary_sub(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline int4 binary_sub(int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline int4 binary_sub(uniform int4 lhs, int4 rhs) { return make_int4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline int4 binary_sub(int4 lhs, int4 rhs) { return make_int4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline uniform int4 binary_sub(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline int4 binary_sub(int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline int4 binary_sub(uniform int4 lhs, int rhs) { return make_int4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline int4 binary_sub(int4 lhs, int rhs) { return make_int4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline uniform int4 binary_sub(uniform int lhs, uniform int4 rhs) { return make_int4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline int4 binary_sub(int lhs, uniform int4 rhs) { return make_int4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline int4 binary_sub(uniform int lhs, int4 rhs) { return make_int4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline int4 binary_sub(int lhs, int4 rhs) { return make_int4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline uniform uint binary_sub(uniform uint lhs, uniform uint rhs) { return lhs - rhs; }
inline uint binary_sub(uint lhs, uniform uint rhs) { return lhs - rhs; }
inline uint binary_sub(uniform uint lhs, uint rhs) { return lhs - rhs; }
inline uint binary_sub(uint lhs, uint rhs) { return lhs - rhs; }
inline uniform uint2 binary_sub(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline uint2 binary_sub(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline uint2 binary_sub(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline uint2 binary_sub(uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline uniform uint2 binary_sub(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline uint2 binary_sub(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline uint2 binary_sub(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline uint2 binary_sub(uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline uniform uint2 binary_sub(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline uint2 binary_sub(uint lhs, uniform uint2 rhs) { return make_uint2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline uint2 binary_sub(uniform uint lhs, uint2 rhs) { return make_uint2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline uint2 binary_sub(uint lhs, uint2 rhs) { return make_uint2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline uniform uint3 binary_sub(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline uint3 binary_sub(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline uint3 binary_sub(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline uint3 binary_sub(uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline uniform uint3 binary_sub(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline uint3 binary_sub(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline uint3 binary_sub(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline uint3 binary_sub(uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline uniform uint3 binary_sub(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline uint3 binary_sub(uint lhs, uniform uint3 rhs) { return make_uint3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline uint3 binary_sub(uniform uint lhs, uint3 rhs) { return make_uint3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline uint3 binary_sub(uint lhs, uint3 rhs) { return make_uint3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline uniform uint4 binary_sub(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline uint4 binary_sub(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline uint4 binary_sub(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline uint4 binary_sub(uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline uniform uint4 binary_sub(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline uint4 binary_sub(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline uint4 binary_sub(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline uint4 binary_sub(uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline uniform uint4 binary_sub(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline uint4 binary_sub(uint lhs, uniform uint4 rhs) { return make_uint4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline uint4 binary_sub(uniform uint lhs, uint4 rhs) { return make_uint4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline uint4 binary_sub(uint lhs, uint4 rhs) { return make_uint4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline uniform float binary_sub(uniform float lhs, uniform float rhs) { return lhs - rhs; }
inline float binary_sub(float lhs, uniform float rhs) { return lhs - rhs; }
inline float binary_sub(uniform float lhs, float rhs) { return lhs - rhs; }
inline float binary_sub(float lhs, float rhs) { return lhs - rhs; }
inline uniform float2 binary_sub(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline float2 binary_sub(float2 lhs, uniform float2 rhs) { return make_float2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline float2 binary_sub(uniform float2 lhs, float2 rhs) { return make_float2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline float2 binary_sub(float2 lhs, float2 rhs) { return make_float2(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1]); }
inline uniform float2 binary_sub(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline float2 binary_sub(float2 lhs, uniform float rhs) { return make_float2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline float2 binary_sub(uniform float2 lhs, float rhs) { return make_float2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline float2 binary_sub(float2 lhs, float rhs) { return make_float2(lhs.v[0] - rhs, lhs.v[1] - rhs); }
inline uniform float2 binary_sub(uniform float lhs, uniform float2 rhs) { return make_float2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline float2 binary_sub(float lhs, uniform float2 rhs) { return make_float2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline float2 binary_sub(uniform float lhs, float2 rhs) { return make_float2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline float2 binary_sub(float lhs, float2 rhs) { return make_float2(lhs - rhs.v[0], lhs - rhs.v[1]); }
inline uniform float3 binary_sub(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline float3 binary_sub(float3 lhs, uniform float3 rhs) { return make_float3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline float3 binary_sub(uniform float3 lhs, float3 rhs) { return make_float3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline float3 binary_sub(float3 lhs, float3 rhs) { return make_float3(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2]); }
inline uniform float3 binary_sub(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline float3 binary_sub(float3 lhs, uniform float rhs) { return make_float3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline float3 binary_sub(uniform float3 lhs, float rhs) { return make_float3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline float3 binary_sub(float3 lhs, float rhs) { return make_float3(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs); }
inline uniform float3 binary_sub(uniform float lhs, uniform float3 rhs) { return make_float3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline float3 binary_sub(float lhs, uniform float3 rhs) { return make_float3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline float3 binary_sub(uniform float lhs, float3 rhs) { return make_float3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline float3 binary_sub(float lhs, float3 rhs) { return make_float3(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2]); }
inline uniform float4 binary_sub(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline float4 binary_sub(float4 lhs, uniform float4 rhs) { return make_float4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline float4 binary_sub(uniform float4 lhs, float4 rhs) { return make_float4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline float4 binary_sub(float4 lhs, float4 rhs) { return make_float4(lhs.v[0] - rhs.v[0], lhs.v[1] - rhs.v[1], lhs.v[2] - rhs.v[2], lhs.v[3] - rhs.v[3]); }
inline uniform float4 binary_sub(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline float4 binary_sub(float4 lhs, uniform float rhs) { return make_float4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline float4 binary_sub(uniform float4 lhs, float rhs) { return make_float4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline float4 binary_sub(float4 lhs, float rhs) { return make_float4(lhs.v[0] - rhs, lhs.v[1] - rhs, lhs.v[2] - rhs, lhs.v[3] - rhs); }
inline uniform float4 binary_sub(uniform float lhs, uniform float4 rhs) { return make_float4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline float4 binary_sub(float lhs, uniform float4 rhs) { return make_float4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline float4 binary_sub(uniform float lhs, float4 rhs) { return make_float4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }
inline float4 binary_sub(float lhs, float4 rhs) { return make_float4(lhs - rhs.v[0], lhs - rhs.v[1], lhs - rhs.v[2], lhs - rhs.v[3]); }

inline uniform int binary_mul(uniform int lhs, uniform int rhs) { return lhs * rhs; }
inline int binary_mul(int lhs, uniform int rhs) { return lhs * rhs; }
inline int binary_mul(uniform int lhs, int rhs) { return lhs * rhs; }
inline int binary_mul(int lhs, int rhs) { return lhs * rhs; }
inline uniform int2 binary_mul(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline int2 binary_mul(int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline int2 binary_mul(uniform int2 lhs, int2 rhs) { return make_int2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline int2 binary_mul(int2 lhs, int2 rhs) { return make_int2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline uniform int2 binary_mul(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline int2 binary_mul(int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline int2 binary_mul(uniform int2 lhs, int rhs) { return make_int2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline int2 binary_mul(int2 lhs, int rhs) { return make_int2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline uniform int2 binary_mul(uniform int lhs, uniform int2 rhs) { return make_int2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline int2 binary_mul(int lhs, uniform int2 rhs) { return make_int2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline int2 binary_mul(uniform int lhs, int2 rhs) { return make_int2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline int2 binary_mul(int lhs, int2 rhs) { return make_int2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline uniform int3 binary_mul(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline int3 binary_mul(int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline int3 binary_mul(uniform int3 lhs, int3 rhs) { return make_int3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline int3 binary_mul(int3 lhs, int3 rhs) { return make_int3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline uniform int3 binary_mul(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline int3 binary_mul(int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline int3 binary_mul(uniform int3 lhs, int rhs) { return make_int3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline int3 binary_mul(int3 lhs, int rhs) { return make_int3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline uniform int3 binary_mul(uniform int lhs, uniform int3 rhs) { return make_int3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline int3 binary_mul(int lhs, uniform int3 rhs) { return make_int3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline int3 binary_mul(uniform int lhs, int3 rhs) { return make_int3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline int3 binary_mul(int lhs, int3 rhs) { return make_int3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline uniform int4 binary_mul(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline int4 binary_mul(int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline int4 binary_mul(uniform int4 lhs, int4 rhs) { return make_int4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline int4 binary_mul(int4 lhs, int4 rhs) { return make_int4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline uniform int4 binary_mul(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline int4 binary_mul(int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline int4 binary_mul(uniform int4 lhs, int rhs) { return make_int4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline int4 binary_mul(int4 lhs, int rhs) { return make_int4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline uniform int4 binary_mul(uniform int lhs, uniform int4 rhs) { return make_int4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline int4 binary_mul(int lhs, uniform int4 rhs) { return make_int4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline int4 binary_mul(uniform int lhs, int4 rhs) { return make_int4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline int4 binary_mul(int lhs, int4 rhs) { return make_int4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline uniform uint binary_mul(uniform uint lhs, uniform uint rhs) { return lhs * rhs; }
inline uint binary_mul(uint lhs, uniform uint rhs) { return lhs * rhs; }
inline uint binary_mul(uniform uint lhs, uint rhs) { return lhs * rhs; }
inline uint binary_mul(uint lhs, uint rhs) { return lhs * rhs; }
inline uniform uint2 binary_mul(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline uint2 binary_mul(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline uint2 binary_mul(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline uint2 binary_mul(uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline uniform uint2 binary_mul(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline uint2 binary_mul(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline uint2 binary_mul(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline uint2 binary_mul(uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline uniform uint2 binary_mul(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline uint2 binary_mul(uint lhs, uniform uint2 rhs) { return make_uint2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline uint2 binary_mul(uniform uint lhs, uint2 rhs) { return make_uint2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline uint2 binary_mul(uint lhs, uint2 rhs) { return make_uint2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline uniform uint3 binary_mul(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline uint3 binary_mul(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline uint3 binary_mul(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline uint3 binary_mul(uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline uniform uint3 binary_mul(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline uint3 binary_mul(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline uint3 binary_mul(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline uint3 binary_mul(uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline uniform uint3 binary_mul(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline uint3 binary_mul(uint lhs, uniform uint3 rhs) { return make_uint3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline uint3 binary_mul(uniform uint lhs, uint3 rhs) { return make_uint3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline uint3 binary_mul(uint lhs, uint3 rhs) { return make_uint3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline uniform uint4 binary_mul(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline uint4 binary_mul(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline uint4 binary_mul(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline uint4 binary_mul(uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline uniform uint4 binary_mul(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline uint4 binary_mul(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline uint4 binary_mul(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline uint4 binary_mul(uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline uniform uint4 binary_mul(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline uint4 binary_mul(uint lhs, uniform uint4 rhs) { return make_uint4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline uint4 binary_mul(uniform uint lhs, uint4 rhs) { return make_uint4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline uint4 binary_mul(uint lhs, uint4 rhs) { return make_uint4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline uniform float binary_mul(uniform float lhs, uniform float rhs) { return lhs * rhs; }
inline float binary_mul(float lhs, uniform float rhs) { return lhs * rhs; }
inline float binary_mul(uniform float lhs, float rhs) { return lhs * rhs; }
inline float binary_mul(float lhs, float rhs) { return lhs * rhs; }
inline uniform float2 binary_mul(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline float2 binary_mul(float2 lhs, uniform float2 rhs) { return make_float2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline float2 binary_mul(uniform float2 lhs, float2 rhs) { return make_float2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline float2 binary_mul(float2 lhs, float2 rhs) { return make_float2(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1]); }
inline uniform float2 binary_mul(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline float2 binary_mul(float2 lhs, uniform float rhs) { return make_float2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline float2 binary_mul(uniform float2 lhs, float rhs) { return make_float2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline float2 binary_mul(float2 lhs, float rhs) { return make_float2(lhs.v[0] * rhs, lhs.v[1] * rhs); }
inline uniform float2 binary_mul(uniform float lhs, uniform float2 rhs) { return make_float2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline float2 binary_mul(float lhs, uniform float2 rhs) { return make_float2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline float2 binary_mul(uniform float lhs, float2 rhs) { return make_float2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline float2 binary_mul(float lhs, float2 rhs) { return make_float2(lhs * rhs.v[0], lhs * rhs.v[1]); }
inline uniform float3 binary_mul(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline float3 binary_mul(float3 lhs, uniform float3 rhs) { return make_float3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline float3 binary_mul(uniform float3 lhs, float3 rhs) { return make_float3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline float3 binary_mul(float3 lhs, float3 rhs) { return make_float3(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2]); }
inline uniform float3 binary_mul(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline float3 binary_mul(float3 lhs, uniform float rhs) { return make_float3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline float3 binary_mul(uniform float3 lhs, float rhs) { return make_float3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline float3 binary_mul(float3 lhs, float rhs) { return make_float3(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs); }
inline uniform float3 binary_mul(uniform float lhs, uniform float3 rhs) { return make_float3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline float3 binary_mul(float lhs, uniform float3 rhs) { return make_float3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline float3 binary_mul(uniform float lhs, float3 rhs) { return make_float3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline float3 binary_mul(float lhs, float3 rhs) { return make_float3(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2]); }
inline uniform float4 binary_mul(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline float4 binary_mul(float4 lhs, uniform float4 rhs) { return make_float4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline float4 binary_mul(uniform float4 lhs, float4 rhs) { return make_float4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline float4 binary_mul(float4 lhs, float4 rhs) { return make_float4(lhs.v[0] * rhs.v[0], lhs.v[1] * rhs.v[1], lhs.v[2] * rhs.v[2], lhs.v[3] * rhs.v[3]); }
inline uniform float4 binary_mul(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline float4 binary_mul(float4 lhs, uniform float rhs) { return make_float4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline float4 binary_mul(uniform float4 lhs, float rhs) { return make_float4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline float4 binary_mul(float4 lhs, float rhs) { return make_float4(lhs.v[0] * rhs, lhs.v[1] * rhs, lhs.v[2] * rhs, lhs.v[3] * rhs); }
inline uniform float4 binary_mul(uniform float lhs, uniform float4 rhs) { return make_float4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline float4 binary_mul(float lhs, uniform float4 rhs) { return make_float4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline float4 binary_mul(uniform float lhs, float4 rhs) { return make_float4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }
inline float4 binary_mul(float lhs, float4 rhs) { return make_float4(lhs * rhs.v[0], lhs * rhs.v[1], lhs * rhs.v[2], lhs * rhs.v[3]); }

inline uniform int binary_div(uniform int lhs, uniform int rhs) { return lhs / rhs; }
inline int binary_div(int lhs, uniform int rhs) { return lhs / rhs; }
inline int binary_div(uniform int lhs, int rhs) { return lhs / rhs; }
inline int binary_div(int lhs, int rhs) { return lhs / rhs; }
inline uniform int2 binary_div(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline int2 binary_div(int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline int2 binary_div(uniform int2 lhs, int2 rhs) { return make_int2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline int2 binary_div(int2 lhs, int2 rhs) { return make_int2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline uniform int2 binary_div(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline int2 binary_div(int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline int2 binary_div(uniform int2 lhs, int rhs) { return make_int2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline int2 binary_div(int2 lhs, int rhs) { return make_int2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline uniform int2 binary_div(uniform int lhs, uniform int2 rhs) { return make_int2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline int2 binary_div(int lhs, uniform int2 rhs) { return make_int2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline int2 binary_div(uniform int lhs, int2 rhs) { return make_int2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline int2 binary_div(int lhs, int2 rhs) { return make_int2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline uniform int3 binary_div(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline int3 binary_div(int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline int3 binary_div(uniform int3 lhs, int3 rhs) { return make_int3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline int3 binary_div(int3 lhs, int3 rhs) { return make_int3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline uniform int3 binary_div(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline int3 binary_div(int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline int3 binary_div(uniform int3 lhs, int rhs) { return make_int3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline int3 binary_div(int3 lhs, int rhs) { return make_int3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline uniform int3 binary_div(uniform int lhs, uniform int3 rhs) { return make_int3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline int3 binary_div(int lhs, uniform int3 rhs) { return make_int3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline int3 binary_div(uniform int lhs, int3 rhs) { return make_int3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline int3 binary_div(int lhs, int3 rhs) { return make_int3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline uniform int4 binary_div(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline int4 binary_div(int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline int4 binary_div(uniform int4 lhs, int4 rhs) { return make_int4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline int4 binary_div(int4 lhs, int4 rhs) { return make_int4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline uniform int4 binary_div(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline int4 binary_div(int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline int4 binary_div(uniform int4 lhs, int rhs) { return make_int4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline int4 binary_div(int4 lhs, int rhs) { return make_int4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline uniform int4 binary_div(uniform int lhs, uniform int4 rhs) { return make_int4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline int4 binary_div(int lhs, uniform int4 rhs) { return make_int4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline int4 binary_div(uniform int lhs, int4 rhs) { return make_int4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline int4 binary_div(int lhs, int4 rhs) { return make_int4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline uniform uint binary_div(uniform uint lhs, uniform uint rhs) { return lhs / rhs; }
inline uint binary_div(uint lhs, uniform uint rhs) { return lhs / rhs; }
inline uint binary_div(uniform uint lhs, uint rhs) { return lhs / rhs; }
inline uint binary_div(uint lhs, uint rhs) { return lhs / rhs; }
inline uniform uint2 binary_div(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline uint2 binary_div(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline uint2 binary_div(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline uint2 binary_div(uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline uniform uint2 binary_div(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline uint2 binary_div(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline uint2 binary_div(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline uint2 binary_div(uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline uniform uint2 binary_div(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline uint2 binary_div(uint lhs, uniform uint2 rhs) { return make_uint2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline uint2 binary_div(uniform uint lhs, uint2 rhs) { return make_uint2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline uint2 binary_div(uint lhs, uint2 rhs) { return make_uint2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline uniform uint3 binary_div(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline uint3 binary_div(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline uint3 binary_div(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline uint3 binary_div(uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline uniform uint3 binary_div(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline uint3 binary_div(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline uint3 binary_div(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline uint3 binary_div(uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline uniform uint3 binary_div(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline uint3 binary_div(uint lhs, uniform uint3 rhs) { return make_uint3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline uint3 binary_div(uniform uint lhs, uint3 rhs) { return make_uint3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline uint3 binary_div(uint lhs, uint3 rhs) { return make_uint3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline uniform uint4 binary_div(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline uint4 binary_div(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline uint4 binary_div(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline uint4 binary_div(uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline uniform uint4 binary_div(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline uint4 binary_div(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline uint4 binary_div(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline uint4 binary_div(uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline uniform uint4 binary_div(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline uint4 binary_div(uint lhs, uniform uint4 rhs) { return make_uint4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline uint4 binary_div(uniform uint lhs, uint4 rhs) { return make_uint4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline uint4 binary_div(uint lhs, uint4 rhs) { return make_uint4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline uniform float binary_div(uniform float lhs, uniform float rhs) { return lhs / rhs; }
inline float binary_div(float lhs, uniform float rhs) { return lhs / rhs; }
inline float binary_div(uniform float lhs, float rhs) { return lhs / rhs; }
inline float binary_div(float lhs, float rhs) { return lhs / rhs; }
inline uniform float2 binary_div(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline float2 binary_div(float2 lhs, uniform float2 rhs) { return make_float2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline float2 binary_div(uniform float2 lhs, float2 rhs) { return make_float2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline float2 binary_div(float2 lhs, float2 rhs) { return make_float2(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1]); }
inline uniform float2 binary_div(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline float2 binary_div(float2 lhs, uniform float rhs) { return make_float2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline float2 binary_div(uniform float2 lhs, float rhs) { return make_float2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline float2 binary_div(float2 lhs, float rhs) { return make_float2(lhs.v[0] / rhs, lhs.v[1] / rhs); }
inline uniform float2 binary_div(uniform float lhs, uniform float2 rhs) { return make_float2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline float2 binary_div(float lhs, uniform float2 rhs) { return make_float2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline float2 binary_div(uniform float lhs, float2 rhs) { return make_float2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline float2 binary_div(float lhs, float2 rhs) { return make_float2(lhs / rhs.v[0], lhs / rhs.v[1]); }
inline uniform float3 binary_div(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline float3 binary_div(float3 lhs, uniform float3 rhs) { return make_float3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline float3 binary_div(uniform float3 lhs, float3 rhs) { return make_float3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline float3 binary_div(float3 lhs, float3 rhs) { return make_float3(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2]); }
inline uniform float3 binary_div(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline float3 binary_div(float3 lhs, uniform float rhs) { return make_float3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline float3 binary_div(uniform float3 lhs, float rhs) { return make_float3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline float3 binary_div(float3 lhs, float rhs) { return make_float3(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs); }
inline uniform float3 binary_div(uniform float lhs, uniform float3 rhs) { return make_float3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline float3 binary_div(float lhs, uniform float3 rhs) { return make_float3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline float3 binary_div(uniform float lhs, float3 rhs) { return make_float3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline float3 binary_div(float lhs, float3 rhs) { return make_float3(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2]); }
inline uniform float4 binary_div(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline float4 binary_div(float4 lhs, uniform float4 rhs) { return make_float4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline float4 binary_div(uniform float4 lhs, float4 rhs) { return make_float4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline float4 binary_div(float4 lhs, float4 rhs) { return make_float4(lhs.v[0] / rhs.v[0], lhs.v[1] / rhs.v[1], lhs.v[2] / rhs.v[2], lhs.v[3] / rhs.v[3]); }
inline uniform float4 binary_div(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline float4 binary_div(float4 lhs, uniform float rhs) { return make_float4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline float4 binary_div(uniform float4 lhs, float rhs) { return make_float4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline float4 binary_div(float4 lhs, float rhs) { return make_float4(lhs.v[0] / rhs, lhs.v[1] / rhs, lhs.v[2] / rhs, lhs.v[3] / rhs); }
inline uniform float4 binary_div(uniform float lhs, uniform float4 rhs) { return make_float4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline float4 binary_div(float lhs, uniform float4 rhs) { return make_float4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline float4 binary_div(uniform float lhs, float4 rhs) { return make_float4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }
inline float4 binary_div(float lhs, float4 rhs) { return make_float4(lhs / rhs.v[0], lhs / rhs.v[1], lhs / rhs.v[2], lhs / rhs.v[3]); }

inline uniform int binary_mod(uniform int lhs, uniform int rhs) { return lhs % rhs; }
inline int binary_mod(int lhs, uniform int rhs) { return lhs % rhs; }
inline int binary_mod(uniform int lhs, int rhs) { return lhs % rhs; }
inline int binary_mod(int lhs, int rhs) { return lhs % rhs; }
inline uniform int2 binary_mod(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1]); }
inline int2 binary_mod(int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1]); }
inline int2 binary_mod(uniform int2 lhs, int2 rhs) { return make_int2(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1]); }
inline int2 binary_mod(int2 lhs, int2 rhs) { return make_int2(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1]); }
inline uniform int2 binary_mod(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] % rhs, lhs.v[1] % rhs); }
inline int2 binary_mod(int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] % rhs, lhs.v[1] % rhs); }
inline int2 binary_mod(uniform int2 lhs, int rhs) { return make_int2(lhs.v[0] % rhs, lhs.v[1] % rhs); }
inline int2 binary_mod(int2 lhs, int rhs) { return make_int2(lhs.v[0] % rhs, lhs.v[1] % rhs); }
inline uniform int2 binary_mod(uniform int lhs, uniform int2 rhs) { return make_int2(lhs % rhs.v[0], lhs % rhs.v[1]); }
inline int2 binary_mod(int lhs, uniform int2 rhs) { return make_int2(lhs % rhs.v[0], lhs % rhs.v[1]); }
inline int2 binary_mod(uniform int lhs, int2 rhs) { return make_int2(lhs % rhs.v[0], lhs % rhs.v[1]); }
inline int2 binary_mod(int lhs, int2 rhs) { return make_int2(lhs % rhs.v[0], lhs % rhs.v[1]); }
inline uniform int3 binary_mod(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2]); }
inline int3 binary_mod(int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2]); }
inline int3 binary_mod(uniform int3 lhs, int3 rhs) { return make_int3(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2]); }
inline int3 binary_mod(int3 lhs, int3 rhs) { return make_int3(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2]); }
inline uniform int3 binary_mod(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs); }
inline int3 binary_mod(int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs); }
inline int3 binary_mod(uniform int3 lhs, int rhs) { return make_int3(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs); }
inline int3 binary_mod(int3 lhs, int rhs) { return make_int3(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs); }
inline uniform int3 binary_mod(uniform int lhs, uniform int3 rhs) { return make_int3(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2]); }
inline int3 binary_mod(int lhs, uniform int3 rhs) { return make_int3(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2]); }
inline int3 binary_mod(uniform int lhs, int3 rhs) { return make_int3(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2]); }
inline int3 binary_mod(int lhs, int3 rhs) { return make_int3(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2]); }
inline uniform int4 binary_mod(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2], lhs.v[3] % rhs.v[3]); }
inline int4 binary_mod(int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2], lhs.v[3] % rhs.v[3]); }
inline int4 binary_mod(uniform int4 lhs, int4 rhs) { return make_int4(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2], lhs.v[3] % rhs.v[3]); }
inline int4 binary_mod(int4 lhs, int4 rhs) { return make_int4(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2], lhs.v[3] % rhs.v[3]); }
inline uniform int4 binary_mod(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs, lhs.v[3] % rhs); }
inline int4 binary_mod(int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs, lhs.v[3] % rhs); }
inline int4 binary_mod(uniform int4 lhs, int rhs) { return make_int4(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs, lhs.v[3] % rhs); }
inline int4 binary_mod(int4 lhs, int rhs) { return make_int4(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs, lhs.v[3] % rhs); }
inline uniform int4 binary_mod(uniform int lhs, uniform int4 rhs) { return make_int4(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2], lhs % rhs.v[3]); }
inline int4 binary_mod(int lhs, uniform int4 rhs) { return make_int4(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2], lhs % rhs.v[3]); }
inline int4 binary_mod(uniform int lhs, int4 rhs) { return make_int4(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2], lhs % rhs.v[3]); }
inline int4 binary_mod(int lhs, int4 rhs) { return make_int4(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2], lhs % rhs.v[3]); }
inline uniform uint binary_mod(uniform uint lhs, uniform uint rhs) { return lhs % rhs; }
inline uint binary_mod(uint lhs, uniform uint rhs) { return lhs % rhs; }
inline uint binary_mod(uniform uint lhs, uint rhs) { return lhs % rhs; }
inline uint binary_mod(uint lhs, uint rhs) { return lhs % rhs; }
inline uniform uint2 binary_mod(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1]); }
inline uint2 binary_mod(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1]); }
inline uint2 binary_mod(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1]); }
inline uint2 binary_mod(uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1]); }
inline uniform uint2 binary_mod(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] % rhs, lhs.v[1] % rhs); }
inline uint2 binary_mod(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] % rhs, lhs.v[1] % rhs); }
inline uint2 binary_mod(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] % rhs, lhs.v[1] % rhs); }
inline uint2 binary_mod(uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] % rhs, lhs.v[1] % rhs); }
inline uniform uint2 binary_mod(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs % rhs.v[0], lhs % rhs.v[1]); }
inline uint2 binary_mod(uint lhs, uniform uint2 rhs) { return make_uint2(lhs % rhs.v[0], lhs % rhs.v[1]); }
inline uint2 binary_mod(uniform uint lhs, uint2 rhs) { return make_uint2(lhs % rhs.v[0], lhs % rhs.v[1]); }
inline uint2 binary_mod(uint lhs, uint2 rhs) { return make_uint2(lhs % rhs.v[0], lhs % rhs.v[1]); }
inline uniform uint3 binary_mod(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2]); }
inline uint3 binary_mod(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2]); }
inline uint3 binary_mod(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2]); }
inline uint3 binary_mod(uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2]); }
inline uniform uint3 binary_mod(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs); }
inline uint3 binary_mod(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs); }
inline uint3 binary_mod(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs); }
inline uint3 binary_mod(uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs); }
inline uniform uint3 binary_mod(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2]); }
inline uint3 binary_mod(uint lhs, uniform uint3 rhs) { return make_uint3(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2]); }
inline uint3 binary_mod(uniform uint lhs, uint3 rhs) { return make_uint3(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2]); }
inline uint3 binary_mod(uint lhs, uint3 rhs) { return make_uint3(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2]); }
inline uniform uint4 binary_mod(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2], lhs.v[3] % rhs.v[3]); }
inline uint4 binary_mod(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2], lhs.v[3] % rhs.v[3]); }
inline uint4 binary_mod(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2], lhs.v[3] % rhs.v[3]); }
inline uint4 binary_mod(uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] % rhs.v[0], lhs.v[1] % rhs.v[1], lhs.v[2] % rhs.v[2], lhs.v[3] % rhs.v[3]); }
inline uniform uint4 binary_mod(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs, lhs.v[3] % rhs); }
inline uint4 binary_mod(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs, lhs.v[3] % rhs); }
inline uint4 binary_mod(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs, lhs.v[3] % rhs); }
inline uint4 binary_mod(uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] % rhs, lhs.v[1] % rhs, lhs.v[2] % rhs, lhs.v[3] % rhs); }
inline uniform uint4 binary_mod(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2], lhs % rhs.v[3]); }
inline uint4 binary_mod(uint lhs, uniform uint4 rhs) { return make_uint4(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2], lhs % rhs.v[3]); }
inline uint4 binary_mod(uniform uint lhs, uint4 rhs) { return make_uint4(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2], lhs % rhs.v[3]); }
inline uint4 binary_mod(uint lhs, uint4 rhs) { return make_uint4(lhs % rhs.v[0], lhs % rhs.v[1], lhs % rhs.v[2], lhs % rhs.v[3]); }

inline uniform int binary_shl(uniform int lhs, uniform int rhs) { return lhs << rhs; }
inline int binary_shl(int lhs, uniform int rhs) { return lhs << rhs; }
inline int binary_shl(uniform int lhs, int rhs) { return lhs << rhs; }
inline int binary_shl(int lhs, int rhs) { return lhs << rhs; }
inline uniform int2 binary_shl(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1]); }
inline int2 binary_shl(int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1]); }
inline int2 binary_shl(uniform int2 lhs, int2 rhs) { return make_int2(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1]); }
inline int2 binary_shl(int2 lhs, int2 rhs) { return make_int2(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1]); }
inline uniform int2 binary_shl(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] << rhs, lhs.v[1] << rhs); }
inline int2 binary_shl(int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] << rhs, lhs.v[1] << rhs); }
inline int2 binary_shl(uniform int2 lhs, int rhs) { return make_int2(lhs.v[0] << rhs, lhs.v[1] << rhs); }
inline int2 binary_shl(int2 lhs, int rhs) { return make_int2(lhs.v[0] << rhs, lhs.v[1] << rhs); }
inline uniform int2 binary_shl(uniform int lhs, uniform int2 rhs) { return make_int2(lhs << rhs.v[0], lhs << rhs.v[1]); }
inline int2 binary_shl(int lhs, uniform int2 rhs) { return make_int2(lhs << rhs.v[0], lhs << rhs.v[1]); }
inline int2 binary_shl(uniform int lhs, int2 rhs) { return make_int2(lhs << rhs.v[0], lhs << rhs.v[1]); }
inline int2 binary_shl(int lhs, int2 rhs) { return make_int2(lhs << rhs.v[0], lhs << rhs.v[1]); }
inline uniform int3 binary_shl(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2]); }
inline int3 binary_shl(int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2]); }
inline int3 binary_shl(uniform int3 lhs, int3 rhs) { return make_int3(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2]); }
inline int3 binary_shl(int3 lhs, int3 rhs) { return make_int3(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2]); }
inline uniform int3 binary_shl(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs); }
inline int3 binary_shl(int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs); }
inline int3 binary_shl(uniform int3 lhs, int rhs) { return make_int3(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs); }
inline int3 binary_shl(int3 lhs, int rhs) { return make_int3(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs); }
inline uniform int3 binary_shl(uniform int lhs, uniform int3 rhs) { return make_int3(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2]); }
inline int3 binary_shl(int lhs, uniform int3 rhs) { return make_int3(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2]); }
inline int3 binary_shl(uniform int lhs, int3 rhs) { return make_int3(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2]); }
inline int3 binary_shl(int lhs, int3 rhs) { return make_int3(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2]); }
inline uniform int4 binary_shl(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2], lhs.v[3] << rhs.v[3]); }
inline int4 binary_shl(int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2], lhs.v[3] << rhs.v[3]); }
inline int4 binary_shl(uniform int4 lhs, int4 rhs) { return make_int4(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2], lhs.v[3] << rhs.v[3]); }
inline int4 binary_shl(int4 lhs, int4 rhs) { return make_int4(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2], lhs.v[3] << rhs.v[3]); }
inline uniform int4 binary_shl(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs, lhs.v[3] << rhs); }
inline int4 binary_shl(int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs, lhs.v[3] << rhs); }
inline int4 binary_shl(uniform int4 lhs, int rhs) { return make_int4(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs, lhs.v[3] << rhs); }
inline int4 binary_shl(int4 lhs, int rhs) { return make_int4(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs, lhs.v[3] << rhs); }
inline uniform int4 binary_shl(uniform int lhs, uniform int4 rhs) { return make_int4(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2], lhs << rhs.v[3]); }
inline int4 binary_shl(int lhs, uniform int4 rhs) { return make_int4(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2], lhs << rhs.v[3]); }
inline int4 binary_shl(uniform int lhs, int4 rhs) { return make_int4(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2], lhs << rhs.v[3]); }
inline int4 binary_shl(int lhs, int4 rhs) { return make_int4(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2], lhs << rhs.v[3]); }
inline uniform uint binary_shl(uniform uint lhs, uniform uint rhs) { return lhs << rhs; }
inline uint binary_shl(uint lhs, uniform uint rhs) { return lhs << rhs; }
inline uint binary_shl(uniform uint lhs, uint rhs) { return lhs << rhs; }
inline uint binary_shl(uint lhs, uint rhs) { return lhs << rhs; }
inline uniform uint2 binary_shl(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1]); }
inline uint2 binary_shl(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1]); }
inline uint2 binary_shl(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1]); }
inline uint2 binary_shl(uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1]); }
inline uniform uint2 binary_shl(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] << rhs, lhs.v[1] << rhs); }
inline uint2 binary_shl(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] << rhs, lhs.v[1] << rhs); }
inline uint2 binary_shl(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] << rhs, lhs.v[1] << rhs); }
inline uint2 binary_shl(uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] << rhs, lhs.v[1] << rhs); }
inline uniform uint2 binary_shl(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs << rhs.v[0], lhs << rhs.v[1]); }
inline uint2 binary_shl(uint lhs, uniform uint2 rhs) { return make_uint2(lhs << rhs.v[0], lhs << rhs.v[1]); }
inline uint2 binary_shl(uniform uint lhs, uint2 rhs) { return make_uint2(lhs << rhs.v[0], lhs << rhs.v[1]); }
inline uint2 binary_shl(uint lhs, uint2 rhs) { return make_uint2(lhs << rhs.v[0], lhs << rhs.v[1]); }
inline uniform uint3 binary_shl(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2]); }
inline uint3 binary_shl(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2]); }
inline uint3 binary_shl(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2]); }
inline uint3 binary_shl(uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2]); }
inline uniform uint3 binary_shl(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs); }
inline uint3 binary_shl(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs); }
inline uint3 binary_shl(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs); }
inline uint3 binary_shl(uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs); }
inline uniform uint3 binary_shl(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2]); }
inline uint3 binary_shl(uint lhs, uniform uint3 rhs) { return make_uint3(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2]); }
inline uint3 binary_shl(uniform uint lhs, uint3 rhs) { return make_uint3(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2]); }
inline uint3 binary_shl(uint lhs, uint3 rhs) { return make_uint3(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2]); }
inline uniform uint4 binary_shl(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2], lhs.v[3] << rhs.v[3]); }
inline uint4 binary_shl(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2], lhs.v[3] << rhs.v[3]); }
inline uint4 binary_shl(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2], lhs.v[3] << rhs.v[3]); }
inline uint4 binary_shl(uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] << rhs.v[0], lhs.v[1] << rhs.v[1], lhs.v[2] << rhs.v[2], lhs.v[3] << rhs.v[3]); }
inline uniform uint4 binary_shl(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs, lhs.v[3] << rhs); }
inline uint4 binary_shl(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs, lhs.v[3] << rhs); }
inline uint4 binary_shl(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs, lhs.v[3] << rhs); }
inline uint4 binary_shl(uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] << rhs, lhs.v[1] << rhs, lhs.v[2] << rhs, lhs.v[3] << rhs); }
inline uniform uint4 binary_shl(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2], lhs << rhs.v[3]); }
inline uint4 binary_shl(uint lhs, uniform uint4 rhs) { return make_uint4(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2], lhs << rhs.v[3]); }
inline uint4 binary_shl(uniform uint lhs, uint4 rhs) { return make_uint4(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2], lhs << rhs.v[3]); }
inline uint4 binary_shl(uint lhs, uint4 rhs) { return make_uint4(lhs << rhs.v[0], lhs << rhs.v[1], lhs << rhs.v[2], lhs << rhs.v[3]); }

inline uniform int binary_shr(uniform int lhs, uniform int rhs) { return lhs >> rhs; }
inline int binary_shr(int lhs, uniform int rhs) { return lhs >> rhs; }
inline int binary_shr(uniform int lhs, int rhs) { return lhs >> rhs; }
inline int binary_shr(int lhs, int rhs) { return lhs >> rhs; }
inline uniform int2 binary_shr(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1]); }
inline int2 binary_shr(int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1]); }
inline int2 binary_shr(uniform int2 lhs, int2 rhs) { return make_int2(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1]); }
inline int2 binary_shr(int2 lhs, int2 rhs) { return make_int2(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1]); }
inline uniform int2 binary_shr(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] >> rhs, lhs.v[1] >> rhs); }
inline int2 binary_shr(int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] >> rhs, lhs.v[1] >> rhs); }
inline int2 binary_shr(uniform int2 lhs, int rhs) { return make_int2(lhs.v[0] >> rhs, lhs.v[1] >> rhs); }
inline int2 binary_shr(int2 lhs, int rhs) { return make_int2(lhs.v[0] >> rhs, lhs.v[1] >> rhs); }
inline uniform int2 binary_shr(uniform int lhs, uniform int2 rhs) { return make_int2(lhs >> rhs.v[0], lhs >> rhs.v[1]); }
inline int2 binary_shr(int lhs, uniform int2 rhs) { return make_int2(lhs >> rhs.v[0], lhs >> rhs.v[1]); }
inline int2 binary_shr(uniform int lhs, int2 rhs) { return make_int2(lhs >> rhs.v[0], lhs >> rhs.v[1]); }
inline int2 binary_shr(int lhs, int2 rhs) { return make_int2(lhs >> rhs.v[0], lhs >> rhs.v[1]); }
inline uniform int3 binary_shr(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2]); }
inline int3 binary_shr(int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2]); }
inline int3 binary_shr(uniform int3 lhs, int3 rhs) { return make_int3(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2]); }
inline int3 binary_shr(int3 lhs, int3 rhs) { return make_int3(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2]); }
inline uniform int3 binary_shr(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs); }
inline int3 binary_shr(int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs); }
inline int3 binary_shr(uniform int3 lhs, int rhs) { return make_int3(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs); }
inline int3 binary_shr(int3 lhs, int rhs) { return make_int3(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs); }
inline uniform int3 binary_shr(uniform int lhs, uniform int3 rhs) { return make_int3(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2]); }
inline int3 binary_shr(int lhs, uniform int3 rhs) { return make_int3(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2]); }
inline int3 binary_shr(uniform int lhs, int3 rhs) { return make_int3(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2]); }
inline int3 binary_shr(int lhs, int3 rhs) { return make_int3(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2]); }
inline uniform int4 binary_shr(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2], lhs.v[3] >> rhs.v[3]); }
inline int4 binary_shr(int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2], lhs.v[3] >> rhs.v[3]); }
inline int4 binary_shr(uniform int4 lhs, int4 rhs) { return make_int4(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2], lhs.v[3] >> rhs.v[3]); }
inline int4 binary_shr(int4 lhs, int4 rhs) { return make_int4(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2], lhs.v[3] >> rhs.v[3]); }
inline uniform int4 binary_shr(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs, lhs.v[3] >> rhs); }
inline int4 binary_shr(int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs, lhs.v[3] >> rhs); }
inline int4 binary_shr(uniform int4 lhs, int rhs) { return make_int4(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs, lhs.v[3] >> rhs); }
inline int4 binary_shr(int4 lhs, int rhs) { return make_int4(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs, lhs.v[3] >> rhs); }
inline uniform int4 binary_shr(uniform int lhs, uniform int4 rhs) { return make_int4(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2], lhs >> rhs.v[3]); }
inline int4 binary_shr(int lhs, uniform int4 rhs) { return make_int4(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2], lhs >> rhs.v[3]); }
inline int4 binary_shr(uniform int lhs, int4 rhs) { return make_int4(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2], lhs >> rhs.v[3]); }
inline int4 binary_shr(int lhs, int4 rhs) { return make_int4(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2], lhs >> rhs.v[3]); }
inline uniform uint binary_shr(uniform uint lhs, uniform uint rhs) { return lhs >> rhs; }
inline uint binary_shr(uint lhs, uniform uint rhs) { return lhs >> rhs; }
inline uint binary_shr(uniform uint lhs, uint rhs) { return lhs >> rhs; }
inline uint binary_shr(uint lhs, uint rhs) { return lhs >> rhs; }
inline uniform uint2 binary_shr(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1]); }
inline uint2 binary_shr(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1]); }
inline uint2 binary_shr(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1]); }
inline uint2 binary_shr(uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1]); }
inline uniform uint2 binary_shr(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] >> rhs, lhs.v[1] >> rhs); }
inline uint2 binary_shr(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] >> rhs, lhs.v[1] >> rhs); }
inline uint2 binary_shr(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] >> rhs, lhs.v[1] >> rhs); }
inline uint2 binary_shr(uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] >> rhs, lhs.v[1] >> rhs); }
inline uniform uint2 binary_shr(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs >> rhs.v[0], lhs >> rhs.v[1]); }
inline uint2 binary_shr(uint lhs, uniform uint2 rhs) { return make_uint2(lhs >> rhs.v[0], lhs >> rhs.v[1]); }
inline uint2 binary_shr(uniform uint lhs, uint2 rhs) { return make_uint2(lhs >> rhs.v[0], lhs >> rhs.v[1]); }
inline uint2 binary_shr(uint lhs, uint2 rhs) { return make_uint2(lhs >> rhs.v[0], lhs >> rhs.v[1]); }
inline uniform uint3 binary_shr(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2]); }
inline uint3 binary_shr(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2]); }
inline uint3 binary_shr(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2]); }
inline uint3 binary_shr(uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2]); }
inline uniform uint3 binary_shr(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs); }
inline uint3 binary_shr(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs); }
inline uint3 binary_shr(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs); }
inline uint3 binary_shr(uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs); }
inline uniform uint3 binary_shr(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2]); }
inline uint3 binary_shr(uint lhs, uniform uint3 rhs) { return make_uint3(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2]); }
inline uint3 binary_shr(uniform uint lhs, uint3 rhs) { return make_uint3(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2]); }
inline uint3 binary_shr(uint lhs, uint3 rhs) { return make_uint3(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2]); }
inline uniform uint4 binary_shr(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2], lhs.v[3] >> rhs.v[3]); }
inline uint4 binary_shr(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2], lhs.v[3] >> rhs.v[3]); }
inline uint4 binary_shr(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2], lhs.v[3] >> rhs.v[3]); }
inline uint4 binary_shr(uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] >> rhs.v[0], lhs.v[1] >> rhs.v[1], lhs.v[2] >> rhs.v[2], lhs.v[3] >> rhs.v[3]); }
inline uniform uint4 binary_shr(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs, lhs.v[3] >> rhs); }
inline uint4 binary_shr(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs, lhs.v[3] >> rhs); }
inline uint4 binary_shr(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs, lhs.v[3] >> rhs); }
inline uint4 binary_shr(uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] >> rhs, lhs.v[1] >> rhs, lhs.v[2] >> rhs, lhs.v[3] >> rhs); }
inline uniform uint4 binary_shr(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2], lhs >> rhs.v[3]); }
inline uint4 binary_shr(uint lhs, uniform uint4 rhs) { return make_uint4(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2], lhs >> rhs.v[3]); }
inline uint4 binary_shr(uniform uint lhs, uint4 rhs) { return make_uint4(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2], lhs >> rhs.v[3]); }
inline uint4 binary_shr(uint lhs, uint4 rhs) { return make_uint4(lhs >> rhs.v[0], lhs >> rhs.v[1], lhs >> rhs.v[2], lhs >> rhs.v[3]); }

inline uniform int binary_bit_or(uniform int lhs, uniform int rhs) { return lhs | rhs; }
inline int binary_bit_or(int lhs, uniform int rhs) { return lhs | rhs; }
inline int binary_bit_or(uniform int lhs, int rhs) { return lhs | rhs; }
inline int binary_bit_or(int lhs, int rhs) { return lhs | rhs; }
inline uniform int2 binary_bit_or(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline int2 binary_bit_or(int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline int2 binary_bit_or(uniform int2 lhs, int2 rhs) { return make_int2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline int2 binary_bit_or(int2 lhs, int2 rhs) { return make_int2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline uniform int2 binary_bit_or(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline int2 binary_bit_or(int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline int2 binary_bit_or(uniform int2 lhs, int rhs) { return make_int2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline int2 binary_bit_or(int2 lhs, int rhs) { return make_int2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline uniform int2 binary_bit_or(uniform int lhs, uniform int2 rhs) { return make_int2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline int2 binary_bit_or(int lhs, uniform int2 rhs) { return make_int2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline int2 binary_bit_or(uniform int lhs, int2 rhs) { return make_int2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline int2 binary_bit_or(int lhs, int2 rhs) { return make_int2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline uniform int3 binary_bit_or(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline int3 binary_bit_or(int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline int3 binary_bit_or(uniform int3 lhs, int3 rhs) { return make_int3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline int3 binary_bit_or(int3 lhs, int3 rhs) { return make_int3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline uniform int3 binary_bit_or(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline int3 binary_bit_or(int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline int3 binary_bit_or(uniform int3 lhs, int rhs) { return make_int3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline int3 binary_bit_or(int3 lhs, int rhs) { return make_int3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline uniform int3 binary_bit_or(uniform int lhs, uniform int3 rhs) { return make_int3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline int3 binary_bit_or(int lhs, uniform int3 rhs) { return make_int3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline int3 binary_bit_or(uniform int lhs, int3 rhs) { return make_int3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline int3 binary_bit_or(int lhs, int3 rhs) { return make_int3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline uniform int4 binary_bit_or(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline int4 binary_bit_or(int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline int4 binary_bit_or(uniform int4 lhs, int4 rhs) { return make_int4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline int4 binary_bit_or(int4 lhs, int4 rhs) { return make_int4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline uniform int4 binary_bit_or(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline int4 binary_bit_or(int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline int4 binary_bit_or(uniform int4 lhs, int rhs) { return make_int4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline int4 binary_bit_or(int4 lhs, int rhs) { return make_int4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline uniform int4 binary_bit_or(uniform int lhs, uniform int4 rhs) { return make_int4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline int4 binary_bit_or(int lhs, uniform int4 rhs) { return make_int4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline int4 binary_bit_or(uniform int lhs, int4 rhs) { return make_int4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline int4 binary_bit_or(int lhs, int4 rhs) { return make_int4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline uniform uint binary_bit_or(uniform uint lhs, uniform uint rhs) { return lhs | rhs; }
inline uint binary_bit_or(uint lhs, uniform uint rhs) { return lhs | rhs; }
inline uint binary_bit_or(uniform uint lhs, uint rhs) { return lhs | rhs; }
inline uint binary_bit_or(uint lhs, uint rhs) { return lhs | rhs; }
inline uniform uint2 binary_bit_or(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline uint2 binary_bit_or(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline uint2 binary_bit_or(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline uint2 binary_bit_or(uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline uniform uint2 binary_bit_or(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline uint2 binary_bit_or(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline uint2 binary_bit_or(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline uint2 binary_bit_or(uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline uniform uint2 binary_bit_or(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline uint2 binary_bit_or(uint lhs, uniform uint2 rhs) { return make_uint2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline uint2 binary_bit_or(uniform uint lhs, uint2 rhs) { return make_uint2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline uint2 binary_bit_or(uint lhs, uint2 rhs) { return make_uint2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline uniform uint3 binary_bit_or(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline uint3 binary_bit_or(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline uint3 binary_bit_or(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline uint3 binary_bit_or(uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline uniform uint3 binary_bit_or(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline uint3 binary_bit_or(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline uint3 binary_bit_or(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline uint3 binary_bit_or(uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline uniform uint3 binary_bit_or(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline uint3 binary_bit_or(uint lhs, uniform uint3 rhs) { return make_uint3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline uint3 binary_bit_or(uniform uint lhs, uint3 rhs) { return make_uint3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline uint3 binary_bit_or(uint lhs, uint3 rhs) { return make_uint3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline uniform uint4 binary_bit_or(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline uint4 binary_bit_or(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline uint4 binary_bit_or(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline uint4 binary_bit_or(uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline uniform uint4 binary_bit_or(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline uint4 binary_bit_or(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline uint4 binary_bit_or(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline uint4 binary_bit_or(uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline uniform uint4 binary_bit_or(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline uint4 binary_bit_or(uint lhs, uniform uint4 rhs) { return make_uint4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline uint4 binary_bit_or(uniform uint lhs, uint4 rhs) { return make_uint4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline uint4 binary_bit_or(uint lhs, uint4 rhs) { return make_uint4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline uniform bool binary_bit_or(uniform bool lhs, uniform bool rhs) { return lhs | rhs; }
inline bool binary_bit_or(bool lhs, uniform bool rhs) { return lhs | rhs; }
inline bool binary_bit_or(uniform bool lhs, bool rhs) { return lhs | rhs; }
inline bool binary_bit_or(bool lhs, bool rhs) { return lhs | rhs; }
inline uniform bool2 binary_bit_or(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline bool2 binary_bit_or(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline bool2 binary_bit_or(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline bool2 binary_bit_or(bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1]); }
inline uniform bool2 binary_bit_or(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline bool2 binary_bit_or(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline bool2 binary_bit_or(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline bool2 binary_bit_or(bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] | rhs, lhs.v[1] | rhs); }
inline uniform bool2 binary_bit_or(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline bool2 binary_bit_or(bool lhs, uniform bool2 rhs) { return make_bool2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline bool2 binary_bit_or(uniform bool lhs, bool2 rhs) { return make_bool2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline bool2 binary_bit_or(bool lhs, bool2 rhs) { return make_bool2(lhs | rhs.v[0], lhs | rhs.v[1]); }
inline uniform bool3 binary_bit_or(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline bool3 binary_bit_or(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline bool3 binary_bit_or(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline bool3 binary_bit_or(bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2]); }
inline uniform bool3 binary_bit_or(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline bool3 binary_bit_or(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline bool3 binary_bit_or(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline bool3 binary_bit_or(bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs); }
inline uniform bool3 binary_bit_or(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline bool3 binary_bit_or(bool lhs, uniform bool3 rhs) { return make_bool3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline bool3 binary_bit_or(uniform bool lhs, bool3 rhs) { return make_bool3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline bool3 binary_bit_or(bool lhs, bool3 rhs) { return make_bool3(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2]); }
inline uniform bool4 binary_bit_or(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline bool4 binary_bit_or(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline bool4 binary_bit_or(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline bool4 binary_bit_or(bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] | rhs.v[0], lhs.v[1] | rhs.v[1], lhs.v[2] | rhs.v[2], lhs.v[3] | rhs.v[3]); }
inline uniform bool4 binary_bit_or(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline bool4 binary_bit_or(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline bool4 binary_bit_or(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline bool4 binary_bit_or(bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] | rhs, lhs.v[1] | rhs, lhs.v[2] | rhs, lhs.v[3] | rhs); }
inline uniform bool4 binary_bit_or(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline bool4 binary_bit_or(bool lhs, uniform bool4 rhs) { return make_bool4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline bool4 binary_bit_or(uniform bool lhs, bool4 rhs) { return make_bool4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }
inline bool4 binary_bit_or(bool lhs, bool4 rhs) { return make_bool4(lhs | rhs.v[0], lhs | rhs.v[1], lhs | rhs.v[2], lhs | rhs.v[3]); }

inline uniform int binary_bit_and(uniform int lhs, uniform int rhs) { return lhs & rhs; }
inline int binary_bit_and(int lhs, uniform int rhs) { return lhs & rhs; }
inline int binary_bit_and(uniform int lhs, int rhs) { return lhs & rhs; }
inline int binary_bit_and(int lhs, int rhs) { return lhs & rhs; }
inline uniform int2 binary_bit_and(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline int2 binary_bit_and(int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline int2 binary_bit_and(uniform int2 lhs, int2 rhs) { return make_int2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline int2 binary_bit_and(int2 lhs, int2 rhs) { return make_int2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline uniform int2 binary_bit_and(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline int2 binary_bit_and(int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline int2 binary_bit_and(uniform int2 lhs, int rhs) { return make_int2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline int2 binary_bit_and(int2 lhs, int rhs) { return make_int2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline uniform int2 binary_bit_and(uniform int lhs, uniform int2 rhs) { return make_int2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline int2 binary_bit_and(int lhs, uniform int2 rhs) { return make_int2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline int2 binary_bit_and(uniform int lhs, int2 rhs) { return make_int2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline int2 binary_bit_and(int lhs, int2 rhs) { return make_int2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline uniform int3 binary_bit_and(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline int3 binary_bit_and(int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline int3 binary_bit_and(uniform int3 lhs, int3 rhs) { return make_int3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline int3 binary_bit_and(int3 lhs, int3 rhs) { return make_int3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline uniform int3 binary_bit_and(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline int3 binary_bit_and(int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline int3 binary_bit_and(uniform int3 lhs, int rhs) { return make_int3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline int3 binary_bit_and(int3 lhs, int rhs) { return make_int3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline uniform int3 binary_bit_and(uniform int lhs, uniform int3 rhs) { return make_int3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline int3 binary_bit_and(int lhs, uniform int3 rhs) { return make_int3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline int3 binary_bit_and(uniform int lhs, int3 rhs) { return make_int3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline int3 binary_bit_and(int lhs, int3 rhs) { return make_int3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline uniform int4 binary_bit_and(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline int4 binary_bit_and(int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline int4 binary_bit_and(uniform int4 lhs, int4 rhs) { return make_int4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline int4 binary_bit_and(int4 lhs, int4 rhs) { return make_int4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline uniform int4 binary_bit_and(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline int4 binary_bit_and(int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline int4 binary_bit_and(uniform int4 lhs, int rhs) { return make_int4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline int4 binary_bit_and(int4 lhs, int rhs) { return make_int4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline uniform int4 binary_bit_and(uniform int lhs, uniform int4 rhs) { return make_int4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline int4 binary_bit_and(int lhs, uniform int4 rhs) { return make_int4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline int4 binary_bit_and(uniform int lhs, int4 rhs) { return make_int4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline int4 binary_bit_and(int lhs, int4 rhs) { return make_int4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline uniform uint binary_bit_and(uniform uint lhs, uniform uint rhs) { return lhs & rhs; }
inline uint binary_bit_and(uint lhs, uniform uint rhs) { return lhs & rhs; }
inline uint binary_bit_and(uniform uint lhs, uint rhs) { return lhs & rhs; }
inline uint binary_bit_and(uint lhs, uint rhs) { return lhs & rhs; }
inline uniform uint2 binary_bit_and(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline uint2 binary_bit_and(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline uint2 binary_bit_and(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline uint2 binary_bit_and(uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline uniform uint2 binary_bit_and(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline uint2 binary_bit_and(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline uint2 binary_bit_and(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline uint2 binary_bit_and(uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline uniform uint2 binary_bit_and(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline uint2 binary_bit_and(uint lhs, uniform uint2 rhs) { return make_uint2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline uint2 binary_bit_and(uniform uint lhs, uint2 rhs) { return make_uint2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline uint2 binary_bit_and(uint lhs, uint2 rhs) { return make_uint2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline uniform uint3 binary_bit_and(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline uint3 binary_bit_and(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline uint3 binary_bit_and(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline uint3 binary_bit_and(uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline uniform uint3 binary_bit_and(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline uint3 binary_bit_and(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline uint3 binary_bit_and(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline uint3 binary_bit_and(uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline uniform uint3 binary_bit_and(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline uint3 binary_bit_and(uint lhs, uniform uint3 rhs) { return make_uint3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline uint3 binary_bit_and(uniform uint lhs, uint3 rhs) { return make_uint3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline uint3 binary_bit_and(uint lhs, uint3 rhs) { return make_uint3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline uniform uint4 binary_bit_and(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline uint4 binary_bit_and(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline uint4 binary_bit_and(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline uint4 binary_bit_and(uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline uniform uint4 binary_bit_and(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline uint4 binary_bit_and(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline uint4 binary_bit_and(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline uint4 binary_bit_and(uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline uniform uint4 binary_bit_and(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline uint4 binary_bit_and(uint lhs, uniform uint4 rhs) { return make_uint4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline uint4 binary_bit_and(uniform uint lhs, uint4 rhs) { return make_uint4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline uint4 binary_bit_and(uint lhs, uint4 rhs) { return make_uint4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline uniform bool binary_bit_and(uniform bool lhs, uniform bool rhs) { return lhs & rhs; }
inline bool binary_bit_and(bool lhs, uniform bool rhs) { return lhs & rhs; }
inline bool binary_bit_and(uniform bool lhs, bool rhs) { return lhs & rhs; }
inline bool binary_bit_and(bool lhs, bool rhs) { return lhs & rhs; }
inline uniform bool2 binary_bit_and(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline bool2 binary_bit_and(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline bool2 binary_bit_and(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline bool2 binary_bit_and(bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1]); }
inline uniform bool2 binary_bit_and(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline bool2 binary_bit_and(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline bool2 binary_bit_and(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline bool2 binary_bit_and(bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] & rhs, lhs.v[1] & rhs); }
inline uniform bool2 binary_bit_and(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline bool2 binary_bit_and(bool lhs, uniform bool2 rhs) { return make_bool2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline bool2 binary_bit_and(uniform bool lhs, bool2 rhs) { return make_bool2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline bool2 binary_bit_and(bool lhs, bool2 rhs) { return make_bool2(lhs & rhs.v[0], lhs & rhs.v[1]); }
inline uniform bool3 binary_bit_and(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline bool3 binary_bit_and(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline bool3 binary_bit_and(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline bool3 binary_bit_and(bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2]); }
inline uniform bool3 binary_bit_and(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline bool3 binary_bit_and(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline bool3 binary_bit_and(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline bool3 binary_bit_and(bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs); }
inline uniform bool3 binary_bit_and(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline bool3 binary_bit_and(bool lhs, uniform bool3 rhs) { return make_bool3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline bool3 binary_bit_and(uniform bool lhs, bool3 rhs) { return make_bool3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline bool3 binary_bit_and(bool lhs, bool3 rhs) { return make_bool3(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2]); }
inline uniform bool4 binary_bit_and(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline bool4 binary_bit_and(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline bool4 binary_bit_and(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline bool4 binary_bit_and(bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] & rhs.v[0], lhs.v[1] & rhs.v[1], lhs.v[2] & rhs.v[2], lhs.v[3] & rhs.v[3]); }
inline uniform bool4 binary_bit_and(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline bool4 binary_bit_and(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline bool4 binary_bit_and(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline bool4 binary_bit_and(bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] & rhs, lhs.v[1] & rhs, lhs.v[2] & rhs, lhs.v[3] & rhs); }
inline uniform bool4 binary_bit_and(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline bool4 binary_bit_and(bool lhs, uniform bool4 rhs) { return make_bool4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline bool4 binary_bit_and(uniform bool lhs, bool4 rhs) { return make_bool4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }
inline bool4 binary_bit_and(bool lhs, bool4 rhs) { return make_bool4(lhs & rhs.v[0], lhs & rhs.v[1], lhs & rhs.v[2], lhs & rhs.v[3]); }

inline uniform int binary_bit_xor(uniform int lhs, uniform int rhs) { return lhs ^ rhs; }
inline int binary_bit_xor(int lhs, uniform int rhs) { return lhs ^ rhs; }
inline int binary_bit_xor(uniform int lhs, int rhs) { return lhs ^ rhs; }
inline int binary_bit_xor(int lhs, int rhs) { return lhs ^ rhs; }
inline uniform int2 binary_bit_xor(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline int2 binary_bit_xor(int2 lhs, uniform int2 rhs) { return make_int2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline int2 binary_bit_xor(uniform int2 lhs, int2 rhs) { return make_int2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline int2 binary_bit_xor(int2 lhs, int2 rhs) { return make_int2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline uniform int2 binary_bit_xor(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline int2 binary_bit_xor(int2 lhs, uniform int rhs) { return make_int2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline int2 binary_bit_xor(uniform int2 lhs, int rhs) { return make_int2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline int2 binary_bit_xor(int2 lhs, int rhs) { return make_int2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline uniform int2 binary_bit_xor(uniform int lhs, uniform int2 rhs) { return make_int2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline int2 binary_bit_xor(int lhs, uniform int2 rhs) { return make_int2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline int2 binary_bit_xor(uniform int lhs, int2 rhs) { return make_int2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline int2 binary_bit_xor(int lhs, int2 rhs) { return make_int2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline uniform int3 binary_bit_xor(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline int3 binary_bit_xor(int3 lhs, uniform int3 rhs) { return make_int3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline int3 binary_bit_xor(uniform int3 lhs, int3 rhs) { return make_int3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline int3 binary_bit_xor(int3 lhs, int3 rhs) { return make_int3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline uniform int3 binary_bit_xor(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline int3 binary_bit_xor(int3 lhs, uniform int rhs) { return make_int3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline int3 binary_bit_xor(uniform int3 lhs, int rhs) { return make_int3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline int3 binary_bit_xor(int3 lhs, int rhs) { return make_int3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline uniform int3 binary_bit_xor(uniform int lhs, uniform int3 rhs) { return make_int3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline int3 binary_bit_xor(int lhs, uniform int3 rhs) { return make_int3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline int3 binary_bit_xor(uniform int lhs, int3 rhs) { return make_int3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline int3 binary_bit_xor(int lhs, int3 rhs) { return make_int3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline uniform int4 binary_bit_xor(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline int4 binary_bit_xor(int4 lhs, uniform int4 rhs) { return make_int4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline int4 binary_bit_xor(uniform int4 lhs, int4 rhs) { return make_int4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline int4 binary_bit_xor(int4 lhs, int4 rhs) { return make_int4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline uniform int4 binary_bit_xor(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline int4 binary_bit_xor(int4 lhs, uniform int rhs) { return make_int4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline int4 binary_bit_xor(uniform int4 lhs, int rhs) { return make_int4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline int4 binary_bit_xor(int4 lhs, int rhs) { return make_int4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline uniform int4 binary_bit_xor(uniform int lhs, uniform int4 rhs) { return make_int4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline int4 binary_bit_xor(int lhs, uniform int4 rhs) { return make_int4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline int4 binary_bit_xor(uniform int lhs, int4 rhs) { return make_int4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline int4 binary_bit_xor(int lhs, int4 rhs) { return make_int4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline uniform uint binary_bit_xor(uniform uint lhs, uniform uint rhs) { return lhs ^ rhs; }
inline uint binary_bit_xor(uint lhs, uniform uint rhs) { return lhs ^ rhs; }
inline uint binary_bit_xor(uniform uint lhs, uint rhs) { return lhs ^ rhs; }
inline uint binary_bit_xor(uint lhs, uint rhs) { return lhs ^ rhs; }
inline uniform uint2 binary_bit_xor(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline uint2 binary_bit_xor(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline uint2 binary_bit_xor(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline uint2 binary_bit_xor(uint2 lhs, uint2 rhs) { return make_uint2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline uniform uint2 binary_bit_xor(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline uint2 binary_bit_xor(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline uint2 binary_bit_xor(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline uint2 binary_bit_xor(uint2 lhs, uint rhs) { return make_uint2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline uniform uint2 binary_bit_xor(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline uint2 binary_bit_xor(uint lhs, uniform uint2 rhs) { return make_uint2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline uint2 binary_bit_xor(uniform uint lhs, uint2 rhs) { return make_uint2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline uint2 binary_bit_xor(uint lhs, uint2 rhs) { return make_uint2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline uniform uint3 binary_bit_xor(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline uint3 binary_bit_xor(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline uint3 binary_bit_xor(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline uint3 binary_bit_xor(uint3 lhs, uint3 rhs) { return make_uint3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline uniform uint3 binary_bit_xor(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline uint3 binary_bit_xor(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline uint3 binary_bit_xor(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline uint3 binary_bit_xor(uint3 lhs, uint rhs) { return make_uint3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline uniform uint3 binary_bit_xor(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline uint3 binary_bit_xor(uint lhs, uniform uint3 rhs) { return make_uint3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline uint3 binary_bit_xor(uniform uint lhs, uint3 rhs) { return make_uint3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline uint3 binary_bit_xor(uint lhs, uint3 rhs) { return make_uint3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline uniform uint4 binary_bit_xor(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline uint4 binary_bit_xor(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline uint4 binary_bit_xor(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline uint4 binary_bit_xor(uint4 lhs, uint4 rhs) { return make_uint4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline uniform uint4 binary_bit_xor(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline uint4 binary_bit_xor(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline uint4 binary_bit_xor(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline uint4 binary_bit_xor(uint4 lhs, uint rhs) { return make_uint4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline uniform uint4 binary_bit_xor(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline uint4 binary_bit_xor(uint lhs, uniform uint4 rhs) { return make_uint4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline uint4 binary_bit_xor(uniform uint lhs, uint4 rhs) { return make_uint4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline uint4 binary_bit_xor(uint lhs, uint4 rhs) { return make_uint4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline uniform bool binary_bit_xor(uniform bool lhs, uniform bool rhs) { return lhs ^ rhs; }
inline bool binary_bit_xor(bool lhs, uniform bool rhs) { return lhs ^ rhs; }
inline bool binary_bit_xor(uniform bool lhs, bool rhs) { return lhs ^ rhs; }
inline bool binary_bit_xor(bool lhs, bool rhs) { return lhs ^ rhs; }
inline uniform bool2 binary_bit_xor(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline bool2 binary_bit_xor(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline bool2 binary_bit_xor(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline bool2 binary_bit_xor(bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1]); }
inline uniform bool2 binary_bit_xor(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline bool2 binary_bit_xor(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline bool2 binary_bit_xor(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline bool2 binary_bit_xor(bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs); }
inline uniform bool2 binary_bit_xor(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline bool2 binary_bit_xor(bool lhs, uniform bool2 rhs) { return make_bool2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline bool2 binary_bit_xor(uniform bool lhs, bool2 rhs) { return make_bool2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline bool2 binary_bit_xor(bool lhs, bool2 rhs) { return make_bool2(lhs ^ rhs.v[0], lhs ^ rhs.v[1]); }
inline uniform bool3 binary_bit_xor(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline bool3 binary_bit_xor(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline bool3 binary_bit_xor(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline bool3 binary_bit_xor(bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2]); }
inline uniform bool3 binary_bit_xor(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline bool3 binary_bit_xor(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline bool3 binary_bit_xor(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline bool3 binary_bit_xor(bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs); }
inline uniform bool3 binary_bit_xor(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline bool3 binary_bit_xor(bool lhs, uniform bool3 rhs) { return make_bool3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline bool3 binary_bit_xor(uniform bool lhs, bool3 rhs) { return make_bool3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline bool3 binary_bit_xor(bool lhs, bool3 rhs) { return make_bool3(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2]); }
inline uniform bool4 binary_bit_xor(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline bool4 binary_bit_xor(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline bool4 binary_bit_xor(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline bool4 binary_bit_xor(bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] ^ rhs.v[0], lhs.v[1] ^ rhs.v[1], lhs.v[2] ^ rhs.v[2], lhs.v[3] ^ rhs.v[3]); }
inline uniform bool4 binary_bit_xor(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline bool4 binary_bit_xor(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline bool4 binary_bit_xor(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline bool4 binary_bit_xor(bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] ^ rhs, lhs.v[1] ^ rhs, lhs.v[2] ^ rhs, lhs.v[3] ^ rhs); }
inline uniform bool4 binary_bit_xor(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline bool4 binary_bit_xor(bool lhs, uniform bool4 rhs) { return make_bool4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline bool4 binary_bit_xor(uniform bool lhs, bool4 rhs) { return make_bool4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }
inline bool4 binary_bit_xor(bool lhs, bool4 rhs) { return make_bool4(lhs ^ rhs.v[0], lhs ^ rhs.v[1], lhs ^ rhs.v[2], lhs ^ rhs.v[3]); }

inline uniform bool binary_or(uniform bool lhs, uniform bool rhs) { return lhs || rhs; }
inline bool binary_or(bool lhs, uniform bool rhs) { return lhs || rhs; }
inline bool binary_or(uniform bool lhs, bool rhs) { return lhs || rhs; }
inline bool binary_or(bool lhs, bool rhs) { return lhs || rhs; }
inline uniform bool2 binary_or(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1]); }
inline bool2 binary_or(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1]); }
inline bool2 binary_or(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1]); }
inline bool2 binary_or(bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1]); }
inline uniform bool2 binary_or(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] || rhs, lhs.v[1] || rhs); }
inline bool2 binary_or(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] || rhs, lhs.v[1] || rhs); }
inline bool2 binary_or(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] || rhs, lhs.v[1] || rhs); }
inline bool2 binary_or(bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] || rhs, lhs.v[1] || rhs); }
inline uniform bool2 binary_or(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs || rhs.v[0], lhs || rhs.v[1]); }
inline bool2 binary_or(bool lhs, uniform bool2 rhs) { return make_bool2(lhs || rhs.v[0], lhs || rhs.v[1]); }
inline bool2 binary_or(uniform bool lhs, bool2 rhs) { return make_bool2(lhs || rhs.v[0], lhs || rhs.v[1]); }
inline bool2 binary_or(bool lhs, bool2 rhs) { return make_bool2(lhs || rhs.v[0], lhs || rhs.v[1]); }
inline uniform bool3 binary_or(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1], lhs.v[2] || rhs.v[2]); }
inline bool3 binary_or(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1], lhs.v[2] || rhs.v[2]); }
inline bool3 binary_or(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1], lhs.v[2] || rhs.v[2]); }
inline bool3 binary_or(bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1], lhs.v[2] || rhs.v[2]); }
inline uniform bool3 binary_or(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] || rhs, lhs.v[1] || rhs, lhs.v[2] || rhs); }
inline bool3 binary_or(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] || rhs, lhs.v[1] || rhs, lhs.v[2] || rhs); }
inline bool3 binary_or(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] || rhs, lhs.v[1] || rhs, lhs.v[2] || rhs); }
inline bool3 binary_or(bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] || rhs, lhs.v[1] || rhs, lhs.v[2] || rhs); }
inline uniform bool3 binary_or(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs || rhs.v[0], lhs || rhs.v[1], lhs || rhs.v[2]); }
inline bool3 binary_or(bool lhs, uniform bool3 rhs) { return make_bool3(lhs || rhs.v[0], lhs || rhs.v[1], lhs || rhs.v[2]); }
inline bool3 binary_or(uniform bool lhs, bool3 rhs) { return make_bool3(lhs || rhs.v[0], lhs || rhs.v[1], lhs || rhs.v[2]); }
inline bool3 binary_or(bool lhs, bool3 rhs) { return make_bool3(lhs || rhs.v[0], lhs || rhs.v[1], lhs || rhs.v[2]); }
inline uniform bool4 binary_or(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1], lhs.v[2] || rhs.v[2], lhs.v[3] || rhs.v[3]); }
inline bool4 binary_or(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1], lhs.v[2] || rhs.v[2], lhs.v[3] || rhs.v[3]); }
inline bool4 binary_or(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1], lhs.v[2] || rhs.v[2], lhs.v[3] || rhs.v[3]); }
inline bool4 binary_or(bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] || rhs.v[0], lhs.v[1] || rhs.v[1], lhs.v[2] || rhs.v[2], lhs.v[3] || rhs.v[3]); }
inline uniform bool4 binary_or(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] || rhs, lhs.v[1] || rhs, lhs.v[2] || rhs, lhs.v[3] || rhs); }
inline bool4 binary_or(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] || rhs, lhs.v[1] || rhs, lhs.v[2] || rhs, lhs.v[3] || rhs); }
inline bool4 binary_or(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] || rhs, lhs.v[1] || rhs, lhs.v[2] || rhs, lhs.v[3] || rhs); }
inline bool4 binary_or(bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] || rhs, lhs.v[1] || rhs, lhs.v[2] || rhs, lhs.v[3] || rhs); }
inline uniform bool4 binary_or(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs || rhs.v[0], lhs || rhs.v[1], lhs || rhs.v[2], lhs || rhs.v[3]); }
inline bool4 binary_or(bool lhs, uniform bool4 rhs) { return make_bool4(lhs || rhs.v[0], lhs || rhs.v[1], lhs || rhs.v[2], lhs || rhs.v[3]); }
inline bool4 binary_or(uniform bool lhs, bool4 rhs) { return make_bool4(lhs || rhs.v[0], lhs || rhs.v[1], lhs || rhs.v[2], lhs || rhs.v[3]); }
inline bool4 binary_or(bool lhs, bool4 rhs) { return make_bool4(lhs || rhs.v[0], lhs || rhs.v[1], lhs || rhs.v[2], lhs || rhs.v[3]); }
inline uniform bool binary_and(uniform bool lhs, uniform bool rhs) { return lhs && rhs; }
inline bool binary_and(bool lhs, uniform bool rhs) { return lhs && rhs; }
inline bool binary_and(uniform bool lhs, bool rhs) { return lhs && rhs; }
inline bool binary_and(bool lhs, bool rhs) { return lhs && rhs; }
inline uniform bool2 binary_and(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1]); }
inline bool2 binary_and(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1]); }
inline bool2 binary_and(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1]); }
inline bool2 binary_and(bool2 lhs, bool2 rhs) { return make_bool2(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1]); }
inline uniform bool2 binary_and(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] && rhs, lhs.v[1] && rhs); }
inline bool2 binary_and(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.v[0] && rhs, lhs.v[1] && rhs); }
inline bool2 binary_and(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] && rhs, lhs.v[1] && rhs); }
inline bool2 binary_and(bool2 lhs, bool rhs) { return make_bool2(lhs.v[0] && rhs, lhs.v[1] && rhs); }
inline uniform bool2 binary_and(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs && rhs.v[0], lhs && rhs.v[1]); }
inline bool2 binary_and(bool lhs, uniform bool2 rhs) { return make_bool2(lhs && rhs.v[0], lhs && rhs.v[1]); }
inline bool2 binary_and(uniform bool lhs, bool2 rhs) { return make_bool2(lhs && rhs.v[0], lhs && rhs.v[1]); }
inline bool2 binary_and(bool lhs, bool2 rhs) { return make_bool2(lhs && rhs.v[0], lhs && rhs.v[1]); }
inline uniform bool3 binary_and(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1], lhs.v[2] && rhs.v[2]); }
inline bool3 binary_and(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1], lhs.v[2] && rhs.v[2]); }
inline bool3 binary_and(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1], lhs.v[2] && rhs.v[2]); }
inline bool3 binary_and(bool3 lhs, bool3 rhs) { return make_bool3(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1], lhs.v[2] && rhs.v[2]); }
inline uniform bool3 binary_and(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] && rhs, lhs.v[1] && rhs, lhs.v[2] && rhs); }
inline bool3 binary_and(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.v[0] && rhs, lhs.v[1] && rhs, lhs.v[2] && rhs); }
inline bool3 binary_and(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] && rhs, lhs.v[1] && rhs, lhs.v[2] && rhs); }
inline bool3 binary_and(bool3 lhs, bool rhs) { return make_bool3(lhs.v[0] && rhs, lhs.v[1] && rhs, lhs.v[2] && rhs); }
inline uniform bool3 binary_and(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs && rhs.v[0], lhs && rhs.v[1], lhs && rhs.v[2]); }
inline bool3 binary_and(bool lhs, uniform bool3 rhs) { return make_bool3(lhs && rhs.v[0], lhs && rhs.v[1], lhs && rhs.v[2]); }
inline bool3 binary_and(uniform bool lhs, bool3 rhs) { return make_bool3(lhs && rhs.v[0], lhs && rhs.v[1], lhs && rhs.v[2]); }
inline bool3 binary_and(bool lhs, bool3 rhs) { return make_bool3(lhs && rhs.v[0], lhs && rhs.v[1], lhs && rhs.v[2]); }
inline uniform bool4 binary_and(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1], lhs.v[2] && rhs.v[2], lhs.v[3] && rhs.v[3]); }
inline bool4 binary_and(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1], lhs.v[2] && rhs.v[2], lhs.v[3] && rhs.v[3]); }
inline bool4 binary_and(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1], lhs.v[2] && rhs.v[2], lhs.v[3] && rhs.v[3]); }
inline bool4 binary_and(bool4 lhs, bool4 rhs) { return make_bool4(lhs.v[0] && rhs.v[0], lhs.v[1] && rhs.v[1], lhs.v[2] && rhs.v[2], lhs.v[3] && rhs.v[3]); }
inline uniform bool4 binary_and(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] && rhs, lhs.v[1] && rhs, lhs.v[2] && rhs, lhs.v[3] && rhs); }
inline bool4 binary_and(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.v[0] && rhs, lhs.v[1] && rhs, lhs.v[2] && rhs, lhs.v[3] && rhs); }
inline bool4 binary_and(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] && rhs, lhs.v[1] && rhs, lhs.v[2] && rhs, lhs.v[3] && rhs); }
inline bool4 binary_and(bool4 lhs, bool rhs) { return make_bool4(lhs.v[0] && rhs, lhs.v[1] && rhs, lhs.v[2] && rhs, lhs.v[3] && rhs); }
inline uniform bool4 binary_and(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs && rhs.v[0], lhs && rhs.v[1], lhs && rhs.v[2], lhs && rhs.v[3]); }
inline bool4 binary_and(bool lhs, uniform bool4 rhs) { return make_bool4(lhs && rhs.v[0], lhs && rhs.v[1], lhs && rhs.v[2], lhs && rhs.v[3]); }
inline bool4 binary_and(uniform bool lhs, bool4 rhs) { return make_bool4(lhs && rhs.v[0], lhs && rhs.v[1], lhs && rhs.v[2], lhs && rhs.v[3]); }
inline bool4 binary_and(bool lhs, bool4 rhs) { return make_bool4(lhs && rhs.v[0], lhs && rhs.v[1], lhs && rhs.v[2], lhs && rhs.v[3]); }

inline uniform bool any(uniform bool2 v) { return v.v[0] || v.v[1]; }
inline bool any(bool2 v) { return v.v[0] || v.v[1]; }
inline uniform bool any(uniform bool3 v) { return v.v[0] || v.v[1] || v.v[2]; }
inline bool any(bool3 v) { return v.v[0] || v.v[1] || v.v[2]; }
inline uniform bool any(uniform bool4 v) { return v.v[0] || v.v[1] || v.v[2] || v.v[3]; }
inline bool any(bool4 v) { return v.v[0] || v.v[1] || v.v[2] || v.v[3]; }
inline uniform bool all(uniform bool2 v) { return v.v[0] && v.v[1]; }
inline bool all(bool2 v) { return v.v[0] && v.v[1]; }
inline uniform bool all(uniform bool3 v) { return v.v[0] && v.v[1] && v.v[2]; }
inline bool all(bool3 v) { return v.v[0] && v.v[1] && v.v[2]; }
inline uniform bool all(uniform bool4 v) { return v.v[0] && v.v[1] && v.v[2] && v.v[3]; }
inline bool all(bool4 v) { return v.v[0] && v.v[1] && v.v[2] && v.v[3]; }
inline uniform bool none(uniform bool2 v) { return !v.v[0] && !v.v[1]; }
inline bool none(bool2 v) { return !v.v[0] && !v.v[1]; }
inline uniform bool none(uniform bool3 v) { return !v.v[0] && !v.v[1] && !v.v[2]; }
inline bool none(bool3 v) { return !v.v[0] && !v.v[1] && !v.v[2]; }
inline uniform bool none(uniform bool4 v) { return !v.v[0] && !v.v[1] && !v.v[2] && !v.v[3]; }
inline bool none(bool4 v) { return !v.v[0] && !v.v[1] && !v.v[2] && !v.v[3]; }

#define select_scalar(f, t, p) ((p) ? (t) : (f))
inline int2 select(int2 f, int2 t, bool2 p) { return make_int2(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1])); }
inline int2 select(int2 f, int2 t, uniform bool2 p) { return make_int2(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1])); }
inline uniform int2 select(uniform int2 f, uniform int2 t, uniform bool2 p) { return make_int2(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1])); }
inline int3 select(int3 f, int3 t, bool3 p) { return make_int3(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2])); }
inline int3 select(int3 f, int3 t, uniform bool3 p) { return make_int3(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2])); }
inline uniform int3 select(uniform int3 f, uniform int3 t, uniform bool3 p) { return make_int3(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2])); }
inline int4 select(int4 f, int4 t, bool4 p) { return make_int4(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2]), select_scalar(f.v[3], t.v[3], p.v[3])); }
inline int4 select(int4 f, int4 t, uniform bool4 p) { return make_int4(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2]), select_scalar(f.v[3], t.v[3], p.v[3])); }
inline uniform int4 select(uniform int4 f, uniform int4 t, uniform bool4 p) { return make_int4(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2]), select_scalar(f.v[3], t.v[3], p.v[3])); }
inline uint2 select(uint2 f, uint2 t, bool2 p) { return make_uint2(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1])); }
inline uint2 select(uint2 f, uint2 t, uniform bool2 p) { return make_uint2(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1])); }
inline uniform uint2 select(uniform uint2 f, uniform uint2 t, uniform bool2 p) { return make_uint2(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1])); }
inline uint3 select(uint3 f, uint3 t, bool3 p) { return make_uint3(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2])); }
inline uint3 select(uint3 f, uint3 t, uniform bool3 p) { return make_uint3(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2])); }
inline uniform uint3 select(uniform uint3 f, uniform uint3 t, uniform bool3 p) { return make_uint3(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2])); }
inline uint4 select(uint4 f, uint4 t, bool4 p) { return make_uint4(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2]), select_scalar(f.v[3], t.v[3], p.v[3])); }
inline uint4 select(uint4 f, uint4 t, uniform bool4 p) { return make_uint4(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2]), select_scalar(f.v[3], t.v[3], p.v[3])); }
inline uniform uint4 select(uniform uint4 f, uniform uint4 t, uniform bool4 p) { return make_uint4(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2]), select_scalar(f.v[3], t.v[3], p.v[3])); }
inline float2 select(float2 f, float2 t, bool2 p) { return make_float2(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1])); }
inline float2 select(float2 f, float2 t, uniform bool2 p) { return make_float2(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1])); }
inline uniform float2 select(uniform float2 f, uniform float2 t, uniform bool2 p) { return make_float2(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1])); }
inline float3 select(float3 f, float3 t, bool3 p) { return make_float3(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2])); }
inline float3 select(float3 f, float3 t, uniform bool3 p) { return make_float3(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2])); }
inline uniform float3 select(uniform float3 f, uniform float3 t, uniform bool3 p) { return make_float3(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2])); }
inline float4 select(float4 f, float4 t, bool4 p) { return make_float4(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2]), select_scalar(f.v[3], t.v[3], p.v[3])); }
inline float4 select(float4 f, float4 t, uniform bool4 p) { return make_float4(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2]), select_scalar(f.v[3], t.v[3], p.v[3])); }
inline uniform float4 select(uniform float4 f, uniform float4 t, uniform bool4 p) { return make_float4(select_scalar(f.v[0], t.v[0], p.v[0]), select_scalar(f.v[1], t.v[1], p.v[1]), select_scalar(f.v[2], t.v[2], p.v[2]), select_scalar(f.v[3], t.v[3], p.v[3])); }

inline float fma(float a, float b, float c) { return a * b + c; }
inline uniform float fma(uniform float a, uniform float b, uniform float c) { return a * b + c; }
inline float copysign(float a, float b) { return floatbits((intbits(a) & 0x7fffffffu) | signbits(b)); }
inline uniform float copysign(uniform float a, uniform float b) { return floatbits((intbits(a) & 0x7fffffffu) | signbits(b)); }
inline float log2(float x) { return log(x) / log(2.f); }
inline uniform float log2(uniform float x) { return log(x) / log(2.f); }
inline float log10(float x) { return log(x) / log(10.f); }
inline uniform float log10(uniform float x) { return log(x) / log(10.f); }
inline float exp2(float x) { return pow(2.f, x); }
inline uniform float exp2(uniform float x) { return pow(2.f, x); }
inline float exp10(float x) { return pow(10.f, x); }
inline uniform float exp10(uniform float x) { return pow(10.f, x); }
inline bool is_nan(float x) {
  uint u = intbits(x);
  return (u & 0x7F800000u) == 0x7F800000u && (u & 0x7FFFFFu);
}
inline bool is_inf(float x) {
  uint u = intbits(x);
  return (u & 0x7F800000u) == 0x7F800000u && !(u & 0x7FFFFFu);
}
inline uniform bool is_nan(uniform float x) {
  uniform uint u = intbits(x);
  return (u & 0x7F800000u) == 0x7F800000u && (u & 0x7FFFFFu);
}
inline uniform bool is_inf(uniform float x) {
  uniform uint u = intbits(x);
  return (u & 0x7F800000u) == 0x7F800000u && !(u & 0x7FFFFFu);
}
inline float sinh(float x) { return .5f * (exp(x) - exp(-x)); }
inline uniform float sinh(uniform float x) { return .5f * (exp(x) - exp(-x)); }
inline float cosh(float x) { return .5f * (exp(x) + exp(-x)); }
inline uniform float cosh(uniform float x) { return .5f * (exp(x) + exp(-x)); }
inline float tanh(float x) { return sinh(x) / cosh(x); }
inline uniform float tanh(uniform float x) { return sinh(x) / cosh(x); }
inline float asinh(float x) { return log(x + sqrt(x * x + 1.f)); }
inline uniform float asinh(uniform float x) { return log(x + sqrt(x * x + 1.f)); }
inline float acosh(float x) { return log(x + sqrt(x * x - 1.f)); }
inline uniform float acosh(uniform float x) { return log(x + sqrt(x * x - 1.f)); }
inline float atanh(float x) { return .5f * log((1.f + x) / (1.f - x)); }
inline uniform float atanh(uniform float x) { return .5f * log((1.f + x) / (1.f - x)); }
inline float saturate(float x) { return clamp(x, 0.f, 1.f); }
inline uniform float saturate(uniform float x) { return clamp(x, 0.f, 1.f); }
inline float lerp(float a, float b, float t) { return fma(t, b - a, a); }
inline uniform float lerp(uniform float a, uniform float b, uniform float t) { return fma(t, b - a, a); }
inline float degrees(float x) { return x * (180.f * M_1_PI); }
inline uniform float degrees(uniform float x) { return x * (180.f * M_1_PI); }
inline float radians(float x) { return x * (M_PI / 180.f); }
inline uniform float radians(uniform float x) { return x * (M_PI / 180.f); }
inline float step(float edge, float x) { return x < edge ? 0.0f : 1.0f; }
inline uniform float step(uniform float edge, uniform float x) { return x < edge ? 0.0f : 1.0f; }
inline float smoothstep(float edge0, float edge1, float x) {
    float t = saturate((x - edge0) / (edge1 - edge0));
    return t * t * (3.0f - 2.0f * t);
}
inline uniform float smoothstep(uniform float edge0, uniform float edge1, uniform float x) {
    uniform float t = saturate((x - edge0) / (edge1 - edge0));
    return t * t * (3.0f - 2.0f * t);
}
inline uint ctz(uint x) { return count_trailing_zeros((int)x); }
inline uniform uint ctz(uniform uint x) { return count_trailing_zeros((int)x); }
inline uint clz(uint x) { return count_leading_zeros((int)x); }
inline uniform uint clz(uniform uint x) { return count_leading_zeros((int)x); }
inline uint popcount(uint x) { return popcnt((int)x); }
inline uniform uint popcount(uniform uint x) { return popcnt((int)x); }
inline uniform uint reverse(uniform uint n) {
    n = (n << 16u) | (n >> 16u);
    n = ((n & 0x00ff00ffu) << 8u) | ((n & 0xff00ff00u) >> 8u);
    n = ((n & 0x0f0f0f0fu) << 4u) | ((n & 0xf0f0f0f0u) >> 4u);
    n = ((n & 0x33333333u) << 2u) | ((n & 0xccccccccu) >> 2u);
    n = ((n & 0x55555555u) << 1u) | ((n & 0xaaaaaaaau) >> 1u);
    return n;
}
inline uint reverse(uint n) {
    n = (n << 16u) | (n >> 16u);
    n = ((n & 0x00ff00ffu) << 8u) | ((n & 0xff00ff00u) >> 8u);
    n = ((n & 0x0f0f0f0fu) << 4u) | ((n & 0xf0f0f0f0u) >> 4u);
    n = ((n & 0x33333333u) << 2u) | ((n & 0xccccccccu) >> 2u);
    n = ((n & 0x55555555u) << 1u) | ((n & 0xaaaaaaaau) >> 1u);
    return n;
}
inline uniform float fract(uniform float x) { return x - floor(x); }
inline float fract(float x) { return x - floor(x); }
inline float3 cross(float3 u, float3 v) {
    return make_float3(
        u.v[1] * v.v[2] - v.v[1] * u.v[2],
        u.v[2] * v.v[0] - v.v[2] * u.v[0],
        u.v[0] * v.v[1] - v.v[0] * u.v[1]);
}
inline uniform float3 cross(uniform float3 u, uniform float3 v) {
    return make_float3(
        u.v[1] * v.v[2] - v.v[1] * u.v[2],
        u.v[2] * v.v[0] - v.v[2] * u.v[0],
        u.v[0] * v.v[1] - v.v[0] * u.v[1]);
}
inline float dot(float2 a, float2 b) { return a.v[0] * b.v[0] + a.v[1] * b.v[1]; }
inline float dot(float3 a, float3 b) { return a.v[0] * b.v[0] + a.v[1] * b.v[1] + a.v[2] * b.v[2]; }
inline float dot(float4 a, float4 b) { return a.v[0] * b.v[0] + a.v[1] * b.v[1] + a.v[2] * b.v[2] + a.v[3] * b.v[3]; }
inline uniform float dot(uniform float2 a, uniform float2 b) { return a.v[0] * b.v[0] + a.v[1] * b.v[1]; }
inline uniform float dot(uniform float3 a, uniform float3 b) { return a.v[0] * b.v[0] + a.v[1] * b.v[1] + a.v[2] * b.v[2]; }
inline uniform float dot(uniform float4 a, uniform float4 b) { return a.v[0] * b.v[0] + a.v[1] * b.v[1] + a.v[2] * b.v[2] + a.v[3] * b.v[3]; }
inline float length(float2 v) { return sqrt(dot(v, v)); }
inline float length(float3 v) { return sqrt(dot(v, v)); }
inline float length(float4 v) { return sqrt(dot(v, v)); }
inline uniform float length(uniform float2 v) { return sqrt(dot(v, v)); }
inline uniform float length(uniform float3 v) { return sqrt(dot(v, v)); }
inline uniform float length(uniform float4 v) { return sqrt(dot(v, v)); }
inline float length_squared(float2 v) { return dot(v, v); }
inline float length_squared(float3 v) { return dot(v, v); }
inline float length_squared(float4 v) { return dot(v, v); }
inline uniform float length_squared(uniform float2 v) { return dot(v, v); }
inline uniform float length_squared(uniform float3 v) { return dot(v, v); }
inline uniform float length_squared(uniform float4 v) { return dot(v, v); }
inline float2 normalize(float2 v) { return binary_mul(v, rsqrt(length_squared(v))); }
inline float3 normalize(float3 v) { return binary_mul(v, rsqrt(length_squared(v))); }
inline float4 normalize(float4 v) { return binary_mul(v, rsqrt(length_squared(v))); }
inline uniform float2 normalize(uniform float2 v) { return binary_mul(v, rsqrt(length_squared(v))); }
inline uniform float3 normalize(uniform float3 v) { return binary_mul(v, rsqrt(length_squared(v))); }
inline uniform float4 normalize(uniform float4 v) { return binary_mul(v, rsqrt(length_squared(v))); }
inline float3 faceforward(float3 n, float3 i, float3 n_ref) { return dot(n_ref, i) < 0.f ? n : unary_minus(n); }
inline uniform float3 faceforward(uniform float3 n, uniform float3 i, uniform float3 n_ref) { return dot(n_ref, i) < 0.f ? n : unary_minus(n); }

inline int2 min(int2 a, int2 b) { return make_int2(min(a.v[0], b.v[0]), min(a.v[1], b.v[1])); }
inline uniform int2 min(uniform int2 a, uniform int2 b) { return make_int2(min(a.v[0], b.v[0]), min(a.v[1], b.v[1])); }
inline int3 min(int3 a, int3 b) { return make_int3(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2])); }
inline uniform int3 min(uniform int3 a, uniform int3 b) { return make_int3(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2])); }
inline int4 min(int4 a, int4 b) { return make_int4(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2]), min(a.v[3], b.v[3])); }
inline uniform int4 min(uniform int4 a, uniform int4 b) { return make_int4(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2]), min(a.v[3], b.v[3])); }
inline uint2 min(uint2 a, uint2 b) { return make_uint2(min(a.v[0], b.v[0]), min(a.v[1], b.v[1])); }
inline uniform uint2 min(uniform uint2 a, uniform uint2 b) { return make_uint2(min(a.v[0], b.v[0]), min(a.v[1], b.v[1])); }
inline uint3 min(uint3 a, uint3 b) { return make_uint3(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2])); }
inline uniform uint3 min(uniform uint3 a, uniform uint3 b) { return make_uint3(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2])); }
inline uint4 min(uint4 a, uint4 b) { return make_uint4(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2]), min(a.v[3], b.v[3])); }
inline uniform uint4 min(uniform uint4 a, uniform uint4 b) { return make_uint4(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2]), min(a.v[3], b.v[3])); }
inline float2 min(float2 a, float2 b) { return make_float2(min(a.v[0], b.v[0]), min(a.v[1], b.v[1])); }
inline uniform float2 min(uniform float2 a, uniform float2 b) { return make_float2(min(a.v[0], b.v[0]), min(a.v[1], b.v[1])); }
inline float3 min(float3 a, float3 b) { return make_float3(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2])); }
inline uniform float3 min(uniform float3 a, uniform float3 b) { return make_float3(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2])); }
inline float4 min(float4 a, float4 b) { return make_float4(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2]), min(a.v[3], b.v[3])); }
inline uniform float4 min(uniform float4 a, uniform float4 b) { return make_float4(min(a.v[0], b.v[0]), min(a.v[1], b.v[1]), min(a.v[2], b.v[2]), min(a.v[3], b.v[3])); }

inline int2 max(int2 a, int2 b) { return make_int2(max(a.v[0], b.v[0]), max(a.v[1], b.v[1])); }
inline uniform int2 max(uniform int2 a, uniform int2 b) { return make_int2(max(a.v[0], b.v[0]), max(a.v[1], b.v[1])); }
inline int3 max(int3 a, int3 b) { return make_int3(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2])); }
inline uniform int3 max(uniform int3 a, uniform int3 b) { return make_int3(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2])); }
inline int4 max(int4 a, int4 b) { return make_int4(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2]), max(a.v[3], b.v[3])); }
inline uniform int4 max(uniform int4 a, uniform int4 b) { return make_int4(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2]), max(a.v[3], b.v[3])); }
inline uint2 max(uint2 a, uint2 b) { return make_uint2(max(a.v[0], b.v[0]), max(a.v[1], b.v[1])); }
inline uniform uint2 max(uniform uint2 a, uniform uint2 b) { return make_uint2(max(a.v[0], b.v[0]), max(a.v[1], b.v[1])); }
inline uint3 max(uint3 a, uint3 b) { return make_uint3(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2])); }
inline uniform uint3 max(uniform uint3 a, uniform uint3 b) { return make_uint3(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2])); }
inline uint4 max(uint4 a, uint4 b) { return make_uint4(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2]), max(a.v[3], b.v[3])); }
inline uniform uint4 max(uniform uint4 a, uniform uint4 b) { return make_uint4(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2]), max(a.v[3], b.v[3])); }
inline float2 max(float2 a, float2 b) { return make_float2(max(a.v[0], b.v[0]), max(a.v[1], b.v[1])); }
inline uniform float2 max(uniform float2 a, uniform float2 b) { return make_float2(max(a.v[0], b.v[0]), max(a.v[1], b.v[1])); }
inline float3 max(float3 a, float3 b) { return make_float3(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2])); }
inline uniform float3 max(uniform float3 a, uniform float3 b) { return make_float3(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2])); }
inline float4 max(float4 a, float4 b) { return make_float4(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2]), max(a.v[3], b.v[3])); }
inline uniform float4 max(uniform float4 a, uniform float4 b) { return make_float4(max(a.v[0], b.v[0]), max(a.v[1], b.v[1]), max(a.v[2], b.v[2]), max(a.v[3], b.v[3])); }

inline int2 abs(int2 x) { return make_int2(abs(x.v[0]), abs(x.v[1])); }
inline uniform int2 abs(uniform int2 x) { return make_int2(abs(x.v[0]), abs(x.v[1])); }
inline int3 abs(int3 x) { return make_int3(abs(x.v[0]), abs(x.v[1]), abs(x.v[2])); }
inline uniform int3 abs(uniform int3 x) { return make_int3(abs(x.v[0]), abs(x.v[1]), abs(x.v[2])); }
inline int4 abs(int4 x) { return make_int4(abs(x.v[0]), abs(x.v[1]), abs(x.v[2]), abs(x.v[3])); }
inline uniform int4 abs(uniform int4 x) { return make_int4(abs(x.v[0]), abs(x.v[1]), abs(x.v[2]), abs(x.v[3])); }
inline float2 abs(float2 x) { return make_float2(abs(x.v[0]), abs(x.v[1])); }
inline uniform float2 abs(uniform float2 x) { return make_float2(abs(x.v[0]), abs(x.v[1])); }
inline float3 abs(float3 x) { return make_float3(abs(x.v[0]), abs(x.v[1]), abs(x.v[2])); }
inline uniform float3 abs(uniform float3 x) { return make_float3(abs(x.v[0]), abs(x.v[1]), abs(x.v[2])); }
inline float4 abs(float4 x) { return make_float4(abs(x.v[0]), abs(x.v[1]), abs(x.v[2]), abs(x.v[3])); }
inline uniform float4 abs(uniform float4 x) { return make_float4(abs(x.v[0]), abs(x.v[1]), abs(x.v[2]), abs(x.v[3])); }

inline float2 acos(float2 x) { return make_float2(acos(x.v[0]), acos(x.v[1])); }
inline uniform float2 acos(uniform float2 x) { return make_float2(acos(x.v[0]), acos(x.v[1])); }
inline float3 acos(float3 x) { return make_float3(acos(x.v[0]), acos(x.v[1]), acos(x.v[2])); }
inline uniform float3 acos(uniform float3 x) { return make_float3(acos(x.v[0]), acos(x.v[1]), acos(x.v[2])); }
inline float4 acos(float4 x) { return make_float4(acos(x.v[0]), acos(x.v[1]), acos(x.v[2]), acos(x.v[3])); }
inline uniform float4 acos(uniform float4 x) { return make_float4(acos(x.v[0]), acos(x.v[1]), acos(x.v[2]), acos(x.v[3])); }

inline float2 asin(float2 x) { return make_float2(asin(x.v[0]), asin(x.v[1])); }
inline uniform float2 asin(uniform float2 x) { return make_float2(asin(x.v[0]), asin(x.v[1])); }
inline float3 asin(float3 x) { return make_float3(asin(x.v[0]), asin(x.v[1]), asin(x.v[2])); }
inline uniform float3 asin(uniform float3 x) { return make_float3(asin(x.v[0]), asin(x.v[1]), asin(x.v[2])); }
inline float4 asin(float4 x) { return make_float4(asin(x.v[0]), asin(x.v[1]), asin(x.v[2]), asin(x.v[3])); }
inline uniform float4 asin(uniform float4 x) { return make_float4(asin(x.v[0]), asin(x.v[1]), asin(x.v[2]), asin(x.v[3])); }

inline float2 atan(float2 x) { return make_float2(atan(x.v[0]), atan(x.v[1])); }
inline uniform float2 atan(uniform float2 x) { return make_float2(atan(x.v[0]), atan(x.v[1])); }
inline float3 atan(float3 x) { return make_float3(atan(x.v[0]), atan(x.v[1]), atan(x.v[2])); }
inline uniform float3 atan(uniform float3 x) { return make_float3(atan(x.v[0]), atan(x.v[1]), atan(x.v[2])); }
inline float4 atan(float4 x) { return make_float4(atan(x.v[0]), atan(x.v[1]), atan(x.v[2]), atan(x.v[3])); }
inline uniform float4 atan(uniform float4 x) { return make_float4(atan(x.v[0]), atan(x.v[1]), atan(x.v[2]), atan(x.v[3])); }

inline float2 acosh(float2 x) { return make_float2(acosh(x.v[0]), acosh(x.v[1])); }
inline uniform float2 acosh(uniform float2 x) { return make_float2(acosh(x.v[0]), acosh(x.v[1])); }
inline float3 acosh(float3 x) { return make_float3(acosh(x.v[0]), acosh(x.v[1]), acosh(x.v[2])); }
inline uniform float3 acosh(uniform float3 x) { return make_float3(acosh(x.v[0]), acosh(x.v[1]), acosh(x.v[2])); }
inline float4 acosh(float4 x) { return make_float4(acosh(x.v[0]), acosh(x.v[1]), acosh(x.v[2]), acosh(x.v[3])); }
inline uniform float4 acosh(uniform float4 x) { return make_float4(acosh(x.v[0]), acosh(x.v[1]), acosh(x.v[2]), acosh(x.v[3])); }

inline float2 asinh(float2 x) { return make_float2(asinh(x.v[0]), asinh(x.v[1])); }
inline uniform float2 asinh(uniform float2 x) { return make_float2(asinh(x.v[0]), asinh(x.v[1])); }
inline float3 asinh(float3 x) { return make_float3(asinh(x.v[0]), asinh(x.v[1]), asinh(x.v[2])); }
inline uniform float3 asinh(uniform float3 x) { return make_float3(asinh(x.v[0]), asinh(x.v[1]), asinh(x.v[2])); }
inline float4 asinh(float4 x) { return make_float4(asinh(x.v[0]), asinh(x.v[1]), asinh(x.v[2]), asinh(x.v[3])); }
inline uniform float4 asinh(uniform float4 x) { return make_float4(asinh(x.v[0]), asinh(x.v[1]), asinh(x.v[2]), asinh(x.v[3])); }

inline float2 atanh(float2 x) { return make_float2(atanh(x.v[0]), atanh(x.v[1])); }
inline uniform float2 atanh(uniform float2 x) { return make_float2(atanh(x.v[0]), atanh(x.v[1])); }
inline float3 atanh(float3 x) { return make_float3(atanh(x.v[0]), atanh(x.v[1]), atanh(x.v[2])); }
inline uniform float3 atanh(uniform float3 x) { return make_float3(atanh(x.v[0]), atanh(x.v[1]), atanh(x.v[2])); }
inline float4 atanh(float4 x) { return make_float4(atanh(x.v[0]), atanh(x.v[1]), atanh(x.v[2]), atanh(x.v[3])); }
inline uniform float4 atanh(uniform float4 x) { return make_float4(atanh(x.v[0]), atanh(x.v[1]), atanh(x.v[2]), atanh(x.v[3])); }

inline float2 atan2(float2 y, float2 x) { return make_float2(atan2(y.v[0], x.v[0]), atan2(y.v[1], x.v[1])); }
inline uniform float2 atan2(uniform float2 y, uniform float2 x) { return make_float2(atan2(y.v[0], x.v[0]), atan2(y.v[1], x.v[1])); }
inline float3 atan2(float3 y, float3 x) { return make_float3(atan2(y.v[0], x.v[0]), atan2(y.v[1], x.v[1]), atan2(y.v[2], x.v[2])); }
inline uniform float3 atan2(uniform float3 y, uniform float3 x) { return make_float3(atan2(y.v[0], x.v[0]), atan2(y.v[1], x.v[1]), atan2(y.v[2], x.v[2])); }
inline float4 atan2(float4 y, float4 x) { return make_float4(atan2(y.v[0], x.v[0]), atan2(y.v[1], x.v[1]), atan2(y.v[2], x.v[2]), atan2(y.v[3], x.v[3])); }
inline uniform float4 atan2(uniform float4 y, uniform float4 x) { return make_float4(atan2(y.v[0], x.v[0]), atan2(y.v[1], x.v[1]), atan2(y.v[2], x.v[2]), atan2(y.v[3], x.v[3])); }

inline float2 cos(float2 x) { return make_float2(cos(x.v[0]), cos(x.v[1])); }
inline uniform float2 cos(uniform float2 x) { return make_float2(cos(x.v[0]), cos(x.v[1])); }
inline float3 cos(float3 x) { return make_float3(cos(x.v[0]), cos(x.v[1]), cos(x.v[2])); }
inline uniform float3 cos(uniform float3 x) { return make_float3(cos(x.v[0]), cos(x.v[1]), cos(x.v[2])); }
inline float4 cos(float4 x) { return make_float4(cos(x.v[0]), cos(x.v[1]), cos(x.v[2]), cos(x.v[3])); }
inline uniform float4 cos(uniform float4 x) { return make_float4(cos(x.v[0]), cos(x.v[1]), cos(x.v[2]), cos(x.v[3])); }

inline float2 cosh(float2 x) { return make_float2(cosh(x.v[0]), cosh(x.v[1])); }
inline uniform float2 cosh(uniform float2 x) { return make_float2(cosh(x.v[0]), cosh(x.v[1])); }
inline float3 cosh(float3 x) { return make_float3(cosh(x.v[0]), cosh(x.v[1]), cosh(x.v[2])); }
inline uniform float3 cosh(uniform float3 x) { return make_float3(cosh(x.v[0]), cosh(x.v[1]), cosh(x.v[2])); }
inline float4 cosh(float4 x) { return make_float4(cosh(x.v[0]), cosh(x.v[1]), cosh(x.v[2]), cosh(x.v[3])); }
inline uniform float4 cosh(uniform float4 x) { return make_float4(cosh(x.v[0]), cosh(x.v[1]), cosh(x.v[2]), cosh(x.v[3])); }

inline float2 sin(float2 x) { return make_float2(sin(x.v[0]), sin(x.v[1])); }
inline uniform float2 sin(uniform float2 x) { return make_float2(sin(x.v[0]), sin(x.v[1])); }
inline float3 sin(float3 x) { return make_float3(sin(x.v[0]), sin(x.v[1]), sin(x.v[2])); }
inline uniform float3 sin(uniform float3 x) { return make_float3(sin(x.v[0]), sin(x.v[1]), sin(x.v[2])); }
inline float4 sin(float4 x) { return make_float4(sin(x.v[0]), sin(x.v[1]), sin(x.v[2]), sin(x.v[3])); }
inline uniform float4 sin(uniform float4 x) { return make_float4(sin(x.v[0]), sin(x.v[1]), sin(x.v[2]), sin(x.v[3])); }

inline float2 sinh(float2 x) { return make_float2(sinh(x.v[0]), sinh(x.v[1])); }
inline uniform float2 sinh(uniform float2 x) { return make_float2(sinh(x.v[0]), sinh(x.v[1])); }
inline float3 sinh(float3 x) { return make_float3(sinh(x.v[0]), sinh(x.v[1]), sinh(x.v[2])); }
inline uniform float3 sinh(uniform float3 x) { return make_float3(sinh(x.v[0]), sinh(x.v[1]), sinh(x.v[2])); }
inline float4 sinh(float4 x) { return make_float4(sinh(x.v[0]), sinh(x.v[1]), sinh(x.v[2]), sinh(x.v[3])); }
inline uniform float4 sinh(uniform float4 x) { return make_float4(sinh(x.v[0]), sinh(x.v[1]), sinh(x.v[2]), sinh(x.v[3])); }

inline float2 tan(float2 x) { return make_float2(tan(x.v[0]), tan(x.v[1])); }
inline uniform float2 tan(uniform float2 x) { return make_float2(tan(x.v[0]), tan(x.v[1])); }
inline float3 tan(float3 x) { return make_float3(tan(x.v[0]), tan(x.v[1]), tan(x.v[2])); }
inline uniform float3 tan(uniform float3 x) { return make_float3(tan(x.v[0]), tan(x.v[1]), tan(x.v[2])); }
inline float4 tan(float4 x) { return make_float4(tan(x.v[0]), tan(x.v[1]), tan(x.v[2]), tan(x.v[3])); }
inline uniform float4 tan(uniform float4 x) { return make_float4(tan(x.v[0]), tan(x.v[1]), tan(x.v[2]), tan(x.v[3])); }

inline float2 tanh(float2 x) { return make_float2(tanh(x.v[0]), tanh(x.v[1])); }
inline uniform float2 tanh(uniform float2 x) { return make_float2(tanh(x.v[0]), tanh(x.v[1])); }
inline float3 tanh(float3 x) { return make_float3(tanh(x.v[0]), tanh(x.v[1]), tanh(x.v[2])); }
inline uniform float3 tanh(uniform float3 x) { return make_float3(tanh(x.v[0]), tanh(x.v[1]), tanh(x.v[2])); }
inline float4 tanh(float4 x) { return make_float4(tanh(x.v[0]), tanh(x.v[1]), tanh(x.v[2]), tanh(x.v[3])); }
inline uniform float4 tanh(uniform float4 x) { return make_float4(tanh(x.v[0]), tanh(x.v[1]), tanh(x.v[2]), tanh(x.v[3])); }

inline float2 exp(float2 x) { return make_float2(exp(x.v[0]), exp(x.v[1])); }
inline uniform float2 exp(uniform float2 x) { return make_float2(exp(x.v[0]), exp(x.v[1])); }
inline float3 exp(float3 x) { return make_float3(exp(x.v[0]), exp(x.v[1]), exp(x.v[2])); }
inline uniform float3 exp(uniform float3 x) { return make_float3(exp(x.v[0]), exp(x.v[1]), exp(x.v[2])); }
inline float4 exp(float4 x) { return make_float4(exp(x.v[0]), exp(x.v[1]), exp(x.v[2]), exp(x.v[3])); }
inline uniform float4 exp(uniform float4 x) { return make_float4(exp(x.v[0]), exp(x.v[1]), exp(x.v[2]), exp(x.v[3])); }

inline float2 exp2(float2 x) { return make_float2(exp2(x.v[0]), exp2(x.v[1])); }
inline uniform float2 exp2(uniform float2 x) { return make_float2(exp2(x.v[0]), exp2(x.v[1])); }
inline float3 exp2(float3 x) { return make_float3(exp2(x.v[0]), exp2(x.v[1]), exp2(x.v[2])); }
inline uniform float3 exp2(uniform float3 x) { return make_float3(exp2(x.v[0]), exp2(x.v[1]), exp2(x.v[2])); }
inline float4 exp2(float4 x) { return make_float4(exp2(x.v[0]), exp2(x.v[1]), exp2(x.v[2]), exp2(x.v[3])); }
inline uniform float4 exp2(uniform float4 x) { return make_float4(exp2(x.v[0]), exp2(x.v[1]), exp2(x.v[2]), exp2(x.v[3])); }

inline float2 exp10(float2 x) { return make_float2(exp10(x.v[0]), exp10(x.v[1])); }
inline uniform float2 exp10(uniform float2 x) { return make_float2(exp10(x.v[0]), exp10(x.v[1])); }
inline float3 exp10(float3 x) { return make_float3(exp10(x.v[0]), exp10(x.v[1]), exp10(x.v[2])); }
inline uniform float3 exp10(uniform float3 x) { return make_float3(exp10(x.v[0]), exp10(x.v[1]), exp10(x.v[2])); }
inline float4 exp10(float4 x) { return make_float4(exp10(x.v[0]), exp10(x.v[1]), exp10(x.v[2]), exp10(x.v[3])); }
inline uniform float4 exp10(uniform float4 x) { return make_float4(exp10(x.v[0]), exp10(x.v[1]), exp10(x.v[2]), exp10(x.v[3])); }

inline float2 log(float2 x) { return make_float2(log(x.v[0]), log(x.v[1])); }
inline uniform float2 log(uniform float2 x) { return make_float2(log(x.v[0]), log(x.v[1])); }
inline float3 log(float3 x) { return make_float3(log(x.v[0]), log(x.v[1]), log(x.v[2])); }
inline uniform float3 log(uniform float3 x) { return make_float3(log(x.v[0]), log(x.v[1]), log(x.v[2])); }
inline float4 log(float4 x) { return make_float4(log(x.v[0]), log(x.v[1]), log(x.v[2]), log(x.v[3])); }
inline uniform float4 log(uniform float4 x) { return make_float4(log(x.v[0]), log(x.v[1]), log(x.v[2]), log(x.v[3])); }

inline float2 log2(float2 x) { return make_float2(log2(x.v[0]), log2(x.v[1])); }
inline uniform float2 log2(uniform float2 x) { return make_float2(log2(x.v[0]), log2(x.v[1])); }
inline float3 log2(float3 x) { return make_float3(log2(x.v[0]), log2(x.v[1]), log2(x.v[2])); }
inline uniform float3 log2(uniform float3 x) { return make_float3(log2(x.v[0]), log2(x.v[1]), log2(x.v[2])); }
inline float4 log2(float4 x) { return make_float4(log2(x.v[0]), log2(x.v[1]), log2(x.v[2]), log2(x.v[3])); }
inline uniform float4 log2(uniform float4 x) { return make_float4(log2(x.v[0]), log2(x.v[1]), log2(x.v[2]), log2(x.v[3])); }

inline float2 log10(float2 x) { return make_float2(log10(x.v[0]), log10(x.v[1])); }
inline uniform float2 log10(uniform float2 x) { return make_float2(log10(x.v[0]), log10(x.v[1])); }
inline float3 log10(float3 x) { return make_float3(log10(x.v[0]), log10(x.v[1]), log10(x.v[2])); }
inline uniform float3 log10(uniform float3 x) { return make_float3(log10(x.v[0]), log10(x.v[1]), log10(x.v[2])); }
inline float4 log10(float4 x) { return make_float4(log10(x.v[0]), log10(x.v[1]), log10(x.v[2]), log10(x.v[3])); }
inline uniform float4 log10(uniform float4 x) { return make_float4(log10(x.v[0]), log10(x.v[1]), log10(x.v[2]), log10(x.v[3])); }

inline float2 pow(float2 x, float2 a) { return make_float2(pow(x.v[0], a.v[0]), pow(x.v[1], a.v[1])); }
inline uniform float2 pow(uniform float2 x, uniform float2 a) { return make_float2(pow(x.v[0], a.v[0]), pow(x.v[1], a.v[1])); }
inline float3 pow(float3 x, float3 a) { return make_float3(pow(x.v[0], a.v[0]), pow(x.v[1], a.v[1]), pow(x.v[2], a.v[2])); }
inline uniform float3 pow(uniform float3 x, uniform float3 a) { return make_float3(pow(x.v[0], a.v[0]), pow(x.v[1], a.v[1]), pow(x.v[2], a.v[2])); }
inline float4 pow(float4 x, float4 a) { return make_float4(pow(x.v[0], a.v[0]), pow(x.v[1], a.v[1]), pow(x.v[2], a.v[2]), pow(x.v[3], a.v[3])); }
inline uniform float4 pow(uniform float4 x, uniform float4 a) { return make_float4(pow(x.v[0], a.v[0]), pow(x.v[1], a.v[1]), pow(x.v[2], a.v[2]), pow(x.v[3], a.v[3])); }

inline float2 sqrt(float2 x) { return make_float2(sqrt(x.v[0]), sqrt(x.v[1])); }
inline uniform float2 sqrt(uniform float2 x) { return make_float2(sqrt(x.v[0]), sqrt(x.v[1])); }
inline float3 sqrt(float3 x) { return make_float3(sqrt(x.v[0]), sqrt(x.v[1]), sqrt(x.v[2])); }
inline uniform float3 sqrt(uniform float3 x) { return make_float3(sqrt(x.v[0]), sqrt(x.v[1]), sqrt(x.v[2])); }
inline float4 sqrt(float4 x) { return make_float4(sqrt(x.v[0]), sqrt(x.v[1]), sqrt(x.v[2]), sqrt(x.v[3])); }
inline uniform float4 sqrt(uniform float4 x) { return make_float4(sqrt(x.v[0]), sqrt(x.v[1]), sqrt(x.v[2]), sqrt(x.v[3])); }

inline float2 rsqrt(float2 x) { return make_float2(rsqrt(x.v[0]), rsqrt(x.v[1])); }
inline uniform float2 rsqrt(uniform float2 x) { return make_float2(rsqrt(x.v[0]), rsqrt(x.v[1])); }
inline float3 rsqrt(float3 x) { return make_float3(rsqrt(x.v[0]), rsqrt(x.v[1]), rsqrt(x.v[2])); }
inline uniform float3 rsqrt(uniform float3 x) { return make_float3(rsqrt(x.v[0]), rsqrt(x.v[1]), rsqrt(x.v[2])); }
inline float4 rsqrt(float4 x) { return make_float4(rsqrt(x.v[0]), rsqrt(x.v[1]), rsqrt(x.v[2]), rsqrt(x.v[3])); }
inline uniform float4 rsqrt(uniform float4 x) { return make_float4(rsqrt(x.v[0]), rsqrt(x.v[1]), rsqrt(x.v[2]), rsqrt(x.v[3])); }

inline float2 ceil(float2 x) { return make_float2(ceil(x.v[0]), ceil(x.v[1])); }
inline uniform float2 ceil(uniform float2 x) { return make_float2(ceil(x.v[0]), ceil(x.v[1])); }
inline float3 ceil(float3 x) { return make_float3(ceil(x.v[0]), ceil(x.v[1]), ceil(x.v[2])); }
inline uniform float3 ceil(uniform float3 x) { return make_float3(ceil(x.v[0]), ceil(x.v[1]), ceil(x.v[2])); }
inline float4 ceil(float4 x) { return make_float4(ceil(x.v[0]), ceil(x.v[1]), ceil(x.v[2]), ceil(x.v[3])); }
inline uniform float4 ceil(uniform float4 x) { return make_float4(ceil(x.v[0]), ceil(x.v[1]), ceil(x.v[2]), ceil(x.v[3])); }

inline float2 floor(float2 x) { return make_float2(floor(x.v[0]), floor(x.v[1])); }
inline uniform float2 floor(uniform float2 x) { return make_float2(floor(x.v[0]), floor(x.v[1])); }
inline float3 floor(float3 x) { return make_float3(floor(x.v[0]), floor(x.v[1]), floor(x.v[2])); }
inline uniform float3 floor(uniform float3 x) { return make_float3(floor(x.v[0]), floor(x.v[1]), floor(x.v[2])); }
inline float4 floor(float4 x) { return make_float4(floor(x.v[0]), floor(x.v[1]), floor(x.v[2]), floor(x.v[3])); }
inline uniform float4 floor(uniform float4 x) { return make_float4(floor(x.v[0]), floor(x.v[1]), floor(x.v[2]), floor(x.v[3])); }

inline float2 trunc(float2 x) { return make_float2(trunc(x.v[0]), trunc(x.v[1])); }
inline uniform float2 trunc(uniform float2 x) { return make_float2(trunc(x.v[0]), trunc(x.v[1])); }
inline float3 trunc(float3 x) { return make_float3(trunc(x.v[0]), trunc(x.v[1]), trunc(x.v[2])); }
inline uniform float3 trunc(uniform float3 x) { return make_float3(trunc(x.v[0]), trunc(x.v[1]), trunc(x.v[2])); }
inline float4 trunc(float4 x) { return make_float4(trunc(x.v[0]), trunc(x.v[1]), trunc(x.v[2]), trunc(x.v[3])); }
inline uniform float4 trunc(uniform float4 x) { return make_float4(trunc(x.v[0]), trunc(x.v[1]), trunc(x.v[2]), trunc(x.v[3])); }

inline float2 round(float2 x) { return make_float2(round(x.v[0]), round(x.v[1])); }
inline uniform float2 round(uniform float2 x) { return make_float2(round(x.v[0]), round(x.v[1])); }
inline float3 round(float3 x) { return make_float3(round(x.v[0]), round(x.v[1]), round(x.v[2])); }
inline uniform float3 round(uniform float3 x) { return make_float3(round(x.v[0]), round(x.v[1]), round(x.v[2])); }
inline float4 round(float4 x) { return make_float4(round(x.v[0]), round(x.v[1]), round(x.v[2]), round(x.v[3])); }
inline uniform float4 round(uniform float4 x) { return make_float4(round(x.v[0]), round(x.v[1]), round(x.v[2]), round(x.v[3])); }

inline float2 fma(float2 x, float2 y, float2 z) { return make_float2(fma(x.v[0], y.v[0], z.v[0]), fma(x.v[1], y.v[1], z.v[1])); }
inline uniform float2 fma(uniform float2 x, uniform float2 y, uniform float2 z) { return make_float2(fma(x.v[0], y.v[0], z.v[0]), fma(x.v[1], y.v[1], z.v[1])); }
inline float3 fma(float3 x, float3 y, float3 z) { return make_float3(fma(x.v[0], y.v[0], z.v[0]), fma(x.v[1], y.v[1], z.v[1]), fma(x.v[2], y.v[2], z.v[2])); }
inline uniform float3 fma(uniform float3 x, uniform float3 y, uniform float3 z) { return make_float3(fma(x.v[0], y.v[0], z.v[0]), fma(x.v[1], y.v[1], z.v[1]), fma(x.v[2], y.v[2], z.v[2])); }
inline float4 fma(float4 x, float4 y, float4 z) { return make_float4(fma(x.v[0], y.v[0], z.v[0]), fma(x.v[1], y.v[1], z.v[1]), fma(x.v[2], y.v[2], z.v[2]), fma(x.v[3], y.v[3], z.v[3])); }
inline uniform float4 fma(uniform float4 x, uniform float4 y, uniform float4 z) { return make_float4(fma(x.v[0], y.v[0], z.v[0]), fma(x.v[1], y.v[1], z.v[1]), fma(x.v[2], y.v[2], z.v[2]), fma(x.v[3], y.v[3], z.v[3])); }

inline float2 copysign(float2 x, float2 y) { return make_float2(copysign(x.v[0], y.v[0]), copysign(x.v[1], y.v[1])); }
inline uniform float2 copysign(uniform float2 x, uniform float2 y) { return make_float2(copysign(x.v[0], y.v[0]), copysign(x.v[1], y.v[1])); }
inline float3 copysign(float3 x, float3 y) { return make_float3(copysign(x.v[0], y.v[0]), copysign(x.v[1], y.v[1]), copysign(x.v[2], y.v[2])); }
inline uniform float3 copysign(uniform float3 x, uniform float3 y) { return make_float3(copysign(x.v[0], y.v[0]), copysign(x.v[1], y.v[1]), copysign(x.v[2], y.v[2])); }
inline float4 copysign(float4 x, float4 y) { return make_float4(copysign(x.v[0], y.v[0]), copysign(x.v[1], y.v[1]), copysign(x.v[2], y.v[2]), copysign(x.v[3], y.v[3])); }
inline uniform float4 copysign(uniform float4 x, uniform float4 y) { return make_float4(copysign(x.v[0], y.v[0]), copysign(x.v[1], y.v[1]), copysign(x.v[2], y.v[2]), copysign(x.v[3], y.v[3])); }

inline float2 is_inf(float2 x) { return make_float2(is_inf(x.v[0]), is_inf(x.v[1])); }
inline uniform float2 is_inf(uniform float2 x) { return make_float2(is_inf(x.v[0]), is_inf(x.v[1])); }
inline float3 is_inf(float3 x) { return make_float3(is_inf(x.v[0]), is_inf(x.v[1]), is_inf(x.v[2])); }
inline uniform float3 is_inf(uniform float3 x) { return make_float3(is_inf(x.v[0]), is_inf(x.v[1]), is_inf(x.v[2])); }
inline float4 is_inf(float4 x) { return make_float4(is_inf(x.v[0]), is_inf(x.v[1]), is_inf(x.v[2]), is_inf(x.v[3])); }
inline uniform float4 is_inf(uniform float4 x) { return make_float4(is_inf(x.v[0]), is_inf(x.v[1]), is_inf(x.v[2]), is_inf(x.v[3])); }

inline float2 is_nan(float2 x) { return make_float2(is_nan(x.v[0]), is_nan(x.v[1])); }
inline uniform float2 is_nan(uniform float2 x) { return make_float2(is_nan(x.v[0]), is_nan(x.v[1])); }
inline float3 is_nan(float3 x) { return make_float3(is_nan(x.v[0]), is_nan(x.v[1]), is_nan(x.v[2])); }
inline uniform float3 is_nan(uniform float3 x) { return make_float3(is_nan(x.v[0]), is_nan(x.v[1]), is_nan(x.v[2])); }
inline float4 is_nan(float4 x) { return make_float4(is_nan(x.v[0]), is_nan(x.v[1]), is_nan(x.v[2]), is_nan(x.v[3])); }
inline uniform float4 is_nan(uniform float4 x) { return make_float4(is_nan(x.v[0]), is_nan(x.v[1]), is_nan(x.v[2]), is_nan(x.v[3])); }

inline int2 clamp(int2 x, int2 l, int2 h) { return make_int2(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1])); }
inline uniform int2 clamp(uniform int2 x, uniform int2 l, uniform int2 h) { return make_int2(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1])); }
inline int3 clamp(int3 x, int3 l, int3 h) { return make_int3(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2])); }
inline uniform int3 clamp(uniform int3 x, uniform int3 l, uniform int3 h) { return make_int3(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2])); }
inline int4 clamp(int4 x, int4 l, int4 h) { return make_int4(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2]), clamp(x.v[3], l.v[3], h.v[3])); }
inline uniform int4 clamp(uniform int4 x, uniform int4 l, uniform int4 h) { return make_int4(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2]), clamp(x.v[3], l.v[3], h.v[3])); }
inline uint2 clamp(uint2 x, uint2 l, uint2 h) { return make_uint2(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1])); }
inline uniform uint2 clamp(uniform uint2 x, uniform uint2 l, uniform uint2 h) { return make_uint2(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1])); }
inline uint3 clamp(uint3 x, uint3 l, uint3 h) { return make_uint3(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2])); }
inline uniform uint3 clamp(uniform uint3 x, uniform uint3 l, uniform uint3 h) { return make_uint3(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2])); }
inline uint4 clamp(uint4 x, uint4 l, uint4 h) { return make_uint4(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2]), clamp(x.v[3], l.v[3], h.v[3])); }
inline uniform uint4 clamp(uniform uint4 x, uniform uint4 l, uniform uint4 h) { return make_uint4(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2]), clamp(x.v[3], l.v[3], h.v[3])); }
inline float2 clamp(float2 x, float2 l, float2 h) { return make_float2(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1])); }
inline uniform float2 clamp(uniform float2 x, uniform float2 l, uniform float2 h) { return make_float2(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1])); }
inline float3 clamp(float3 x, float3 l, float3 h) { return make_float3(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2])); }
inline uniform float3 clamp(uniform float3 x, uniform float3 l, uniform float3 h) { return make_float3(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2])); }
inline float4 clamp(float4 x, float4 l, float4 h) { return make_float4(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2]), clamp(x.v[3], l.v[3], h.v[3])); }
inline uniform float4 clamp(uniform float4 x, uniform float4 l, uniform float4 h) { return make_float4(clamp(x.v[0], l.v[0], h.v[0]), clamp(x.v[1], l.v[1], h.v[1]), clamp(x.v[2], l.v[2], h.v[2]), clamp(x.v[3], l.v[3], h.v[3])); }

inline float2 saturate(float2 x) { return make_float2(saturate(x.v[0]), saturate(x.v[1])); }
inline uniform float2 saturate(uniform float2 x) { return make_float2(saturate(x.v[0]), saturate(x.v[1])); }
inline float3 saturate(float3 x) { return make_float3(saturate(x.v[0]), saturate(x.v[1]), saturate(x.v[2])); }
inline uniform float3 saturate(uniform float3 x) { return make_float3(saturate(x.v[0]), saturate(x.v[1]), saturate(x.v[2])); }
inline float4 saturate(float4 x) { return make_float4(saturate(x.v[0]), saturate(x.v[1]), saturate(x.v[2]), saturate(x.v[3])); }
inline uniform float4 saturate(uniform float4 x) { return make_float4(saturate(x.v[0]), saturate(x.v[1]), saturate(x.v[2]), saturate(x.v[3])); }

inline float2 lerp(float2 a, float2 b, float2 t) { return make_float2(lerp(a.v[0], b.v[0], t.v[0]), lerp(a.v[1], b.v[1], t.v[1])); }
inline uniform float2 lerp(uniform float2 a, uniform float2 b, uniform float2 t) { return make_float2(lerp(a.v[0], b.v[0], t.v[0]), lerp(a.v[1], b.v[1], t.v[1])); }
inline float3 lerp(float3 a, float3 b, float3 t) { return make_float3(lerp(a.v[0], b.v[0], t.v[0]), lerp(a.v[1], b.v[1], t.v[1]), lerp(a.v[2], b.v[2], t.v[2])); }
inline uniform float3 lerp(uniform float3 a, uniform float3 b, uniform float3 t) { return make_float3(lerp(a.v[0], b.v[0], t.v[0]), lerp(a.v[1], b.v[1], t.v[1]), lerp(a.v[2], b.v[2], t.v[2])); }
inline float4 lerp(float4 a, float4 b, float4 t) { return make_float4(lerp(a.v[0], b.v[0], t.v[0]), lerp(a.v[1], b.v[1], t.v[1]), lerp(a.v[2], b.v[2], t.v[2]), lerp(a.v[3], b.v[3], t.v[3])); }
inline uniform float4 lerp(uniform float4 a, uniform float4 b, uniform float4 t) { return make_float4(lerp(a.v[0], b.v[0], t.v[0]), lerp(a.v[1], b.v[1], t.v[1]), lerp(a.v[2], b.v[2], t.v[2]), lerp(a.v[3], b.v[3], t.v[3])); }

inline float2 radians(float2 x) { return make_float2(radians(x.v[0]), radians(x.v[1])); }
inline uniform float2 radians(uniform float2 x) { return make_float2(radians(x.v[0]), radians(x.v[1])); }
inline float3 radians(float3 x) { return make_float3(radians(x.v[0]), radians(x.v[1]), radians(x.v[2])); }
inline uniform float3 radians(uniform float3 x) { return make_float3(radians(x.v[0]), radians(x.v[1]), radians(x.v[2])); }
inline float4 radians(float4 x) { return make_float4(radians(x.v[0]), radians(x.v[1]), radians(x.v[2]), radians(x.v[3])); }
inline uniform float4 radians(uniform float4 x) { return make_float4(radians(x.v[0]), radians(x.v[1]), radians(x.v[2]), radians(x.v[3])); }

inline float2 degrees(float2 x) { return make_float2(degrees(x.v[0]), degrees(x.v[1])); }
inline uniform float2 degrees(uniform float2 x) { return make_float2(degrees(x.v[0]), degrees(x.v[1])); }
inline float3 degrees(float3 x) { return make_float3(degrees(x.v[0]), degrees(x.v[1]), degrees(x.v[2])); }
inline uniform float3 degrees(uniform float3 x) { return make_float3(degrees(x.v[0]), degrees(x.v[1]), degrees(x.v[2])); }
inline float4 degrees(float4 x) { return make_float4(degrees(x.v[0]), degrees(x.v[1]), degrees(x.v[2]), degrees(x.v[3])); }
inline uniform float4 degrees(uniform float4 x) { return make_float4(degrees(x.v[0]), degrees(x.v[1]), degrees(x.v[2]), degrees(x.v[3])); }

inline float2 step(float2 e, float2 x) { return make_float2(step(e.v[0], x.v[0]), step(e.v[1], x.v[1])); }
inline uniform float2 step(uniform float2 e, uniform float2 x) { return make_float2(step(e.v[0], x.v[0]), step(e.v[1], x.v[1])); }
inline float3 step(float3 e, float3 x) { return make_float3(step(e.v[0], x.v[0]), step(e.v[1], x.v[1]), step(e.v[2], x.v[2])); }
inline uniform float3 step(uniform float3 e, uniform float3 x) { return make_float3(step(e.v[0], x.v[0]), step(e.v[1], x.v[1]), step(e.v[2], x.v[2])); }
inline float4 step(float4 e, float4 x) { return make_float4(step(e.v[0], x.v[0]), step(e.v[1], x.v[1]), step(e.v[2], x.v[2]), step(e.v[3], x.v[3])); }
inline uniform float4 step(uniform float4 e, uniform float4 x) { return make_float4(step(e.v[0], x.v[0]), step(e.v[1], x.v[1]), step(e.v[2], x.v[2]), step(e.v[3], x.v[3])); }

inline float2 smoothstep(float2 e0, float2 e1, float2 x) { return make_float2(smoothstep(e0.v[0], e1.v[0], x.v[0]), smoothstep(e0.v[1], e1.v[1], x.v[1])); }
inline uniform float2 smoothstep(uniform float2 e0, uniform float2 e1, uniform float2 x) { return make_float2(smoothstep(e0.v[0], e1.v[0], x.v[0]), smoothstep(e0.v[1], e1.v[1], x.v[1])); }
inline float3 smoothstep(float3 e0, float3 e1, float3 x) { return make_float3(smoothstep(e0.v[0], e1.v[0], x.v[0]), smoothstep(e0.v[1], e1.v[1], x.v[1]), smoothstep(e0.v[2], e1.v[2], x.v[2])); }
inline uniform float3 smoothstep(uniform float3 e0, uniform float3 e1, uniform float3 x) { return make_float3(smoothstep(e0.v[0], e1.v[0], x.v[0]), smoothstep(e0.v[1], e1.v[1], x.v[1]), smoothstep(e0.v[2], e1.v[2], x.v[2])); }
inline float4 smoothstep(float4 e0, float4 e1, float4 x) { return make_float4(smoothstep(e0.v[0], e1.v[0], x.v[0]), smoothstep(e0.v[1], e1.v[1], x.v[1]), smoothstep(e0.v[2], e1.v[2], x.v[2]), smoothstep(e0.v[3], e1.v[3], x.v[3])); }
inline uniform float4 smoothstep(uniform float4 e0, uniform float4 e1, uniform float4 x) { return make_float4(smoothstep(e0.v[0], e1.v[0], x.v[0]), smoothstep(e0.v[1], e1.v[1], x.v[1]), smoothstep(e0.v[2], e1.v[2], x.v[2]), smoothstep(e0.v[3], e1.v[3], x.v[3])); }

inline uint2 clz(uint2 x) { return make_uint2(clz(x.v[0]), clz(x.v[1])); }
inline uniform uint2 clz(uniform uint2 x) { return make_uint2(clz(x.v[0]), clz(x.v[1])); }
inline uint3 clz(uint3 x) { return make_uint3(clz(x.v[0]), clz(x.v[1]), clz(x.v[2])); }
inline uniform uint3 clz(uniform uint3 x) { return make_uint3(clz(x.v[0]), clz(x.v[1]), clz(x.v[2])); }
inline uint4 clz(uint4 x) { return make_uint4(clz(x.v[0]), clz(x.v[1]), clz(x.v[2]), clz(x.v[3])); }
inline uniform uint4 clz(uniform uint4 x) { return make_uint4(clz(x.v[0]), clz(x.v[1]), clz(x.v[2]), clz(x.v[3])); }

inline uint2 ctz(uint2 x) { return make_uint2(ctz(x.v[0]), ctz(x.v[1])); }
inline uniform uint2 ctz(uniform uint2 x) { return make_uint2(ctz(x.v[0]), ctz(x.v[1])); }
inline uint3 ctz(uint3 x) { return make_uint3(ctz(x.v[0]), ctz(x.v[1]), ctz(x.v[2])); }
inline uniform uint3 ctz(uniform uint3 x) { return make_uint3(ctz(x.v[0]), ctz(x.v[1]), ctz(x.v[2])); }
inline uint4 ctz(uint4 x) { return make_uint4(ctz(x.v[0]), ctz(x.v[1]), ctz(x.v[2]), ctz(x.v[3])); }
inline uniform uint4 ctz(uniform uint4 x) { return make_uint4(ctz(x.v[0]), ctz(x.v[1]), ctz(x.v[2]), ctz(x.v[3])); }

inline uint2 popcount(uint2 x) { return make_uint2(popcount(x.v[0]), popcount(x.v[1])); }
inline uniform uint2 popcount(uniform uint2 x) { return make_uint2(popcount(x.v[0]), popcount(x.v[1])); }
inline uint3 popcount(uint3 x) { return make_uint3(popcount(x.v[0]), popcount(x.v[1]), popcount(x.v[2])); }
inline uniform uint3 popcount(uniform uint3 x) { return make_uint3(popcount(x.v[0]), popcount(x.v[1]), popcount(x.v[2])); }
inline uint4 popcount(uint4 x) { return make_uint4(popcount(x.v[0]), popcount(x.v[1]), popcount(x.v[2]), popcount(x.v[3])); }
inline uniform uint4 popcount(uniform uint4 x) { return make_uint4(popcount(x.v[0]), popcount(x.v[1]), popcount(x.v[2]), popcount(x.v[3])); }

inline float2 fract(float2 x) { return make_float2(fract(x.v[0]), fract(x.v[1])); }
inline uniform float2 fract(uniform float2 x) { return make_float2(fract(x.v[0]), fract(x.v[1])); }
inline float3 fract(float3 x) { return make_float3(fract(x.v[0]), fract(x.v[1]), fract(x.v[2])); }
inline uniform float3 fract(uniform float3 x) { return make_float3(fract(x.v[0]), fract(x.v[1]), fract(x.v[2])); }
inline float4 fract(float4 x) { return make_float4(fract(x.v[0]), fract(x.v[1]), fract(x.v[2]), fract(x.v[3])); }
inline uniform float4 fract(uniform float4 x) { return make_float4(fract(x.v[0]), fract(x.v[1]), fract(x.v[2]), fract(x.v[3])); }


struct float2x2 {
    float2 cols[2];
};
struct float3x3 {
    float3 cols[3];
};
struct float4x4 {
    float4 cols[4];
};

inline uniform float2x2 make_float2x2() {
    uniform float2x2 m;
    m.cols[0] = make_float2();
    m.cols[1] = make_float2();
    return m;
}
inline uniform float3x3 make_float3x3() {
    uniform float3x3 m;
    m.cols[0] = make_float3();
    m.cols[1] = make_float3();
    m.cols[2] = make_float3();
    return m;
}
inline uniform float4x4 make_float4x4() {
    uniform float4x4 m;
    m.cols[0] = make_float4();
    m.cols[1] = make_float4();
    m.cols[2] = make_float4();
    m.cols[3] = make_float4();
    return m;
}

// make_float2x2 functions
inline uniform float2x2 make_float2x2(uniform float s) {
    uniform float2x2 m;
    m.cols[0] = make_float2(s);
    m.cols[1] = make_float2(s);
    return m;
}
inline uniform float2x2 make_float2x2(uniform float2 c0, uniform float2 c1) {
    uniform float2x2 m;
    m.cols[0] = c0;
    m.cols[1] = c1;
    return m;
}
inline uniform float2x2 make_float2x2(
        uniform float m00, uniform float m01,
        uniform float m10, uniform float m11) {
    uniform float2x2 m;
    m.cols[0] = make_float2(m00, m01);
    m.cols[1] = make_float2(m10, m11);
    return m;
}
inline uniform float2x2 make_float2x2(uniform float2x2 m) { return m; }

// make_float3x3 functions
inline uniform float3x3 make_float3x3(uniform float s) {
    uniform float3x3 m;
    m.cols[0] = make_float3(s);
    m.cols[1] = make_float3(s);
    m.cols[2] = make_float3(s);
    return m;
}
inline uniform float3x3 make_float3x3(uniform float3 c0, uniform float3 c1, uniform float3 c2) {
    uniform float3x3 m;
    m.cols[0] = c0;
    m.cols[1] = c1;
    m.cols[2] = c2;
    return m;
}
inline uniform float3x3 make_float3x3(
        uniform float m00, uniform float m01, uniform float m02,
        uniform float m10, uniform float m11, uniform float m12,
        uniform float m20, uniform float m21, uniform float m22) {
    uniform float3x3 m;
    m.cols[0] = make_float3(m00, m01, m02);
    m.cols[1] = make_float3(m10, m11, m12);
    m.cols[2] = make_float3(m20, m21, m22);
    return m;
}
inline uniform float3x3 make_float3x3(uniform float3x3 m) { return m; }

// make_float4x4 functions
inline uniform float4x4 make_float4x4(uniform float s) {
    uniform float4x4 m;
    m.cols[0] = make_float4(s);
    m.cols[1] = make_float4(s);
    m.cols[2] = make_float4(s);
    m.cols[3] = make_float4(s);
    return m;
}
inline uniform float4x4 make_float4x4(uniform float4 c0, uniform float4 c1, uniform float4 c2, uniform float4 c3) {
    uniform float4x4 m;
    m.cols[0] = c0;
    m.cols[1] = c1;
    m.cols[2] = c2;
    m.cols[3] = c3;
    return m;
}
inline uniform float4x4 make_float4x4(
        uniform float m00, uniform float m01, uniform float m02, uniform float m03,
        uniform float m10, uniform float m11, uniform float m12, uniform float m13,
        uniform float m20, uniform float m21, uniform float m22, uniform float m23,
        uniform float m30, uniform float m31, uniform float m32, uniform float m33) {
    uniform float4x4 m;
    m.cols[0] = make_float4(m00, m01, m02, m03);
    m.cols[1] = make_float4(m10, m11, m12, m13);
    m.cols[2] = make_float4(m20, m21, m22, m23);
    m.cols[3] = make_float4(m30, m31, m32, m33);
    return m;
}
inline uniform float4x4 make_float4x4(uniform float4x4 m) { return m; }

// conversions
inline uniform float2x2 make_float2x2(uniform float3x3 m) {
    uniform float2x2 n;
    n.cols[0] = make_float2(m.cols[0]);
    n.cols[1] = make_float2(m.cols[1]);
    return n;
}
inline uniform float2x2 make_float2x2(uniform float4x4 m) {
    uniform float2x2 n;
    n.cols[0] = make_float2(m.cols[0]);
    n.cols[1] = make_float2(m.cols[1]);
    return n;
}
inline uniform float3x3 make_float3x3(uniform float2x2 m) {
    uniform float3x3 n;
    n.cols[0] = make_float3(m.cols[0], 0.f);
    n.cols[1] = make_float3(m.cols[1], 0.f);
    n.cols[2] = make_float3(0.f, 0.f, 1.f);
    return n;
}
inline uniform float3x3 make_float3x3(uniform float4x4 m) {
    uniform float3x3 n;
    n.cols[0] = make_float3(m.cols[0]);
    n.cols[1] = make_float3(m.cols[1]);
    n.cols[2] = make_float3(m.cols[2]);
    return n;
}
inline uniform float4x4 make_float4x4(uniform float2x2 m) {
    uniform float4x4 n;
    n.cols[0] = make_float4(m.cols[0], 0.f, 0.f);
    n.cols[1] = make_float4(m.cols[1], 0.f, 0.f);
    n.cols[2] = make_float4(0.f, 0.f, 1.f, 0.f);
    n.cols[3] = make_float4(0.f, 0.f, 0.f, 1.f);
    return n;
}
inline uniform float4x4 make_float4x4(uniform float3x3 m) {
    uniform float4x4 n;
    n.cols[0] = make_float4(m.cols[0], 0.f);
    n.cols[1] = make_float4(m.cols[1], 0.f);
    n.cols[2] = make_float4(m.cols[2], 0.f);
    n.cols[3] = make_float4(0.f, 0.f, 0.f, 1.f);
    return n;
}

// unary operators
inline uniform float2x2 unary_plus(uniform float2x2 m) { return m; }
inline uniform float3x3 unary_plus(uniform float3x3 m) { return m; }
inline uniform float4x4 unary_plus(uniform float4x4 m) { return m; }
inline uniform float2x2 unary_minus(uniform float2x2 m) {
    return make_float2x2(
        unary_minus(m.cols[0]),
        unary_minus(m.cols[1]));
}
inline uniform float3x3 unary_minus(uniform float3x3 m) {
    return make_float3x3(
        unary_minus(m.cols[0]),
        unary_minus(m.cols[1]),
        unary_minus(m.cols[2]));
}
inline uniform float4x4 unary_minus(uniform float4x4 m) {
    return make_float4x4(
        unary_minus(m.cols[0]),
        unary_minus(m.cols[1]),
        unary_minus(m.cols[2]),
        unary_minus(m.cols[3]));
}

// make_float2x2 functions
inline float2x2 make_float2x2(float s) {
    float2x2 m;
    m.cols[0] = make_float2(s);
    m.cols[1] = make_float2(s);
    return m;
}
inline float2x2 make_float2x2(float2 c0, float2 c1) {
    float2x2 m;
    m.cols[0] = c0;
    m.cols[1] = c1;
    return m;
}
inline float2x2 make_float2x2(
        float m00, float m01,
        float m10, float m11) {
    float2x2 m;
    m.cols[0] = make_float2(m00, m01);
    m.cols[1] = make_float2(m10, m11);
    return m;
}
inline float2x2 make_float2x2(float2x2 m) { return m; }

// make_float3x3 functions
inline float3x3 make_float3x3(float s) {
    float3x3 m;
    m.cols[0] = make_float3(s);
    m.cols[1] = make_float3(s);
    m.cols[2] = make_float3(s);
    return m;
}
inline float3x3 make_float3x3(float3 c0, float3 c1, float3 c2) {
    float3x3 m;
    m.cols[0] = c0;
    m.cols[1] = c1;
    m.cols[2] = c2;
    return m;
}
inline float3x3 make_float3x3(
        float m00, float m01, float m02,
        float m10, float m11, float m12,
        float m20, float m21, float m22) {
    float3x3 m;
    m.cols[0] = make_float3(m00, m01, m02);
    m.cols[1] = make_float3(m10, m11, m12);
    m.cols[2] = make_float3(m20, m21, m22);
    return m;
}
inline float3x3 make_float3x3(float3x3 m) { return m; }

// make_float4x4 functions
inline float4x4 make_float4x4(float s) {
    float4x4 m;
    m.cols[0] = make_float4(s);
    m.cols[1] = make_float4(s);
    m.cols[2] = make_float4(s);
    m.cols[3] = make_float4(s);
    return m;
}
inline float4x4 make_float4x4(float4 c0, float4 c1, float4 c2, float4 c3) {
    float4x4 m;
    m.cols[0] = c0;
    m.cols[1] = c1;
    m.cols[2] = c2;
    m.cols[3] = c3;
    return m;
}
inline float4x4 make_float4x4(
        float m00, float m01, float m02, float m03,
        float m10, float m11, float m12, float m13,
        float m20, float m21, float m22, float m23,
        float m30, float m31, float m32, float m33) {
    float4x4 m;
    m.cols[0] = make_float4(m00, m01, m02, m03);
    m.cols[1] = make_float4(m10, m11, m12, m13);
    m.cols[2] = make_float4(m20, m21, m22, m23);
    m.cols[3] = make_float4(m30, m31, m32, m33);
    return m;
}
inline float4x4 make_float4x4(float4x4 m) { return m; }

// conversions
inline float2x2 make_float2x2(float3x3 m) {
    float2x2 n;
    n.cols[0] = make_float2(m.cols[0]);
    n.cols[1] = make_float2(m.cols[1]);
    return n;
}
inline float2x2 make_float2x2(float4x4 m) {
    float2x2 n;
    n.cols[0] = make_float2(m.cols[0]);
    n.cols[1] = make_float2(m.cols[1]);
    return n;
}
inline float3x3 make_float3x3(float2x2 m) {
    float3x3 n;
    n.cols[0] = make_float3(m.cols[0], 0.f);
    n.cols[1] = make_float3(m.cols[1], 0.f);
    n.cols[2] = make_float3(0.f, 0.f, 1.f);
    return n;
}
inline float3x3 make_float3x3(float4x4 m) {
    float3x3 n;
    n.cols[0] = make_float3(m.cols[0]);
    n.cols[1] = make_float3(m.cols[1]);
    n.cols[2] = make_float3(m.cols[2]);
    return n;
}
inline float4x4 make_float4x4(float2x2 m) {
    float4x4 n;
    n.cols[0] = make_float4(m.cols[0], 0.f, 0.f);
    n.cols[1] = make_float4(m.cols[1], 0.f, 0.f);
    n.cols[2] = make_float4(0.f, 0.f, 1.f, 0.f);
    n.cols[3] = make_float4(0.f, 0.f, 0.f, 1.f);
    return n;
}
inline float4x4 make_float4x4(float3x3 m) {
    float4x4 n;
    n.cols[0] = make_float4(m.cols[0], 0.f);
    n.cols[1] = make_float4(m.cols[1], 0.f);
    n.cols[2] = make_float4(m.cols[2], 0.f);
    n.cols[3] = make_float4(0.f, 0.f, 0.f, 1.f);
    return n;
}

// unary operators
inline float2x2 unary_plus(float2x2 m) { return m; }
inline float3x3 unary_plus(float3x3 m) { return m; }
inline float4x4 unary_plus(float4x4 m) { return m; }
inline float2x2 unary_minus(float2x2 m) {
    return make_float2x2(
        unary_minus(m.cols[0]),
        unary_minus(m.cols[1]));
}
inline float3x3 unary_minus(float3x3 m) {
    return make_float3x3(
        unary_minus(m.cols[0]),
        unary_minus(m.cols[1]),
        unary_minus(m.cols[2]));
}
inline float4x4 unary_minus(float4x4 m) {
    return make_float4x4(
        unary_minus(m.cols[0]),
        unary_minus(m.cols[1]),
        unary_minus(m.cols[2]),
        unary_minus(m.cols[3]));
}

// matrix-scalar binary operators
inline float2x2 binary_add(float2x2 m, float s) {
    return make_float2x2(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s));
}
inline float2x2 binary_add(float s, float2x2 m) {
    return make_float2x2(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]));
}
inline float2x2 binary_sub(float2x2 m, float s) {
    return make_float2x2(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s));
}
inline float2x2 binary_sub(float s, float2x2 m) {
    return make_float2x2(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]));
}
inline float2x2 binary_mul(float2x2 m, float s) {
    return make_float2x2(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s));
}
inline float2x2 binary_mul(float s, float2x2 m) {
    return make_float2x2(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]));
}
inline float2x2 binary_div(float2x2 m, float s) {
    return make_float2x2(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s));
}
inline float2x2 binary_div(float s, float2x2 m) {
    return make_float2x2(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]));
}
inline float3x3 binary_add(float3x3 m, float s) {
    return make_float3x3(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s),
        binary_add(m.cols[2], s));
}
inline float3x3 binary_add(float s, float3x3 m) {
    return make_float3x3(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]),
        binary_add(s, m.cols[2]));
}
inline float3x3 binary_sub(float3x3 m, float s) {
    return make_float3x3(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s),
        binary_sub(m.cols[2], s));
}
inline float3x3 binary_sub(float s, float3x3 m) {
    return make_float3x3(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]),
        binary_sub(s, m.cols[2]));
}
inline float3x3 binary_mul(float3x3 m, float s) {
    return make_float3x3(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s),
        binary_mul(m.cols[2], s));
}
inline float3x3 binary_mul(float s, float3x3 m) {
    return make_float3x3(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]),
        binary_mul(s, m.cols[2]));
}
inline float3x3 binary_div(float3x3 m, float s) {
    return make_float3x3(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s),
        binary_div(m.cols[2], s));
}
inline float3x3 binary_div(float s, float3x3 m) {
    return make_float3x3(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]),
        binary_div(s, m.cols[2]));
}
inline float4x4 binary_add(float4x4 m, float s) {
    return make_float4x4(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s),
        binary_add(m.cols[2], s),
        binary_add(m.cols[3], s));
}
inline float4x4 binary_add(float s, float4x4 m) {
    return make_float4x4(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]),
        binary_add(s, m.cols[2]),
        binary_add(s, m.cols[3]));
}
inline float4x4 binary_sub(float4x4 m, float s) {
    return make_float4x4(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s),
        binary_sub(m.cols[2], s),
        binary_sub(m.cols[3], s));
}
inline float4x4 binary_sub(float s, float4x4 m) {
    return make_float4x4(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]),
        binary_sub(s, m.cols[2]),
        binary_sub(s, m.cols[3]));
}
inline float4x4 binary_mul(float4x4 m, float s) {
    return make_float4x4(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s),
        binary_mul(m.cols[2], s),
        binary_mul(m.cols[3], s));
}
inline float4x4 binary_mul(float s, float4x4 m) {
    return make_float4x4(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]),
        binary_mul(s, m.cols[2]),
        binary_mul(s, m.cols[3]));
}
inline float4x4 binary_div(float4x4 m, float s) {
    return make_float4x4(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s),
        binary_div(m.cols[2], s),
        binary_div(m.cols[3], s));
}
inline float4x4 binary_div(float s, float4x4 m) {
    return make_float4x4(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]),
        binary_div(s, m.cols[2]),
        binary_div(s, m.cols[3]));
}

// matrix-vector binary operators
inline float2 binary_mul(float2x2 m, float2 v) {
    return binary_add(
        binary_mul(m.cols[0], v.v[0]),
        binary_mul(m.cols[1], v.v[1]));
}
inline float3 binary_mul(float3x3 m, float3 v) {
    return binary_add(
        binary_add(
            binary_mul(m.cols[0], v.v[0]),
            binary_mul(m.cols[1], v.v[1])),
        binary_mul(m.cols[2], v.v[2]));
}
inline float4 binary_mul(float4x4 m, float4 v) {
    return binary_add(
        binary_add(
            binary_mul(m.cols[0], v.v[0]),
            binary_mul(m.cols[1], v.v[1])),
        binary_add(
           binary_mul(m.cols[2], v.v[2]),
           binary_mul(m.cols[3], v.v[3])));
}

// matrix-matrix binary operators
inline float2x2 binary_add(float2x2 lhs, float2x2 rhs) {
    return make_float2x2(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]));
}
inline float2x2 binary_sub(float2x2 lhs, float2x2 rhs) {
    return make_float2x2(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]));
}
inline float3x3 binary_add(float3x3 lhs, float3x3 rhs) {
    return make_float3x3(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]),
        binary_add(lhs.cols[2], rhs.cols[2]));
}
inline float3x3 binary_sub(float3x3 lhs, float3x3 rhs) {
    return make_float3x3(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]),
        binary_sub(lhs.cols[2], rhs.cols[2]));
}
inline float4x4 binary_add(float4x4 lhs, float4x4 rhs) {
    return make_float4x4(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]),
        binary_add(lhs.cols[2], rhs.cols[2]),
        binary_add(lhs.cols[3], rhs.cols[3]));
}
inline float4x4 binary_sub(float4x4 lhs, float4x4 rhs) {
    return make_float4x4(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]),
        binary_sub(lhs.cols[2], rhs.cols[2]),
        binary_sub(lhs.cols[3], rhs.cols[3]));
}
inline float2x2 binary_mul(float2x2 lhs, float2x2 rhs) {
    return make_float2x2(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]));
}
inline float3x3 binary_mul(float3x3 lhs, float3x3 rhs) {
    return make_float3x3(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]),
        binary_mul(lhs, rhs.cols[2]));
}
inline float4x4 binary_mul(float4x4 lhs, float4x4 rhs) {
    return make_float4x4(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]),
        binary_mul(lhs, rhs.cols[2]),
        binary_mul(lhs, rhs.cols[3]));
}

// matrix-scalar binary operators
inline float2x2 binary_add(uniform float2x2 m, float s) {
    return make_float2x2(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s));
}
inline float2x2 binary_add(uniform float s, float2x2 m) {
    return make_float2x2(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]));
}
inline float2x2 binary_sub(uniform float2x2 m, float s) {
    return make_float2x2(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s));
}
inline float2x2 binary_sub(uniform float s, float2x2 m) {
    return make_float2x2(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]));
}
inline float2x2 binary_mul(uniform float2x2 m, float s) {
    return make_float2x2(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s));
}
inline float2x2 binary_mul(uniform float s, float2x2 m) {
    return make_float2x2(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]));
}
inline float2x2 binary_div(uniform float2x2 m, float s) {
    return make_float2x2(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s));
}
inline float2x2 binary_div(uniform float s, float2x2 m) {
    return make_float2x2(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]));
}
inline float3x3 binary_add(uniform float3x3 m, float s) {
    return make_float3x3(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s),
        binary_add(m.cols[2], s));
}
inline float3x3 binary_add(uniform float s, float3x3 m) {
    return make_float3x3(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]),
        binary_add(s, m.cols[2]));
}
inline float3x3 binary_sub(uniform float3x3 m, float s) {
    return make_float3x3(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s),
        binary_sub(m.cols[2], s));
}
inline float3x3 binary_sub(uniform float s, float3x3 m) {
    return make_float3x3(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]),
        binary_sub(s, m.cols[2]));
}
inline float3x3 binary_mul(uniform float3x3 m, float s) {
    return make_float3x3(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s),
        binary_mul(m.cols[2], s));
}
inline float3x3 binary_mul(uniform float s, float3x3 m) {
    return make_float3x3(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]),
        binary_mul(s, m.cols[2]));
}
inline float3x3 binary_div(uniform float3x3 m, float s) {
    return make_float3x3(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s),
        binary_div(m.cols[2], s));
}
inline float3x3 binary_div(uniform float s, float3x3 m) {
    return make_float3x3(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]),
        binary_div(s, m.cols[2]));
}
inline float4x4 binary_add(uniform float4x4 m, float s) {
    return make_float4x4(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s),
        binary_add(m.cols[2], s),
        binary_add(m.cols[3], s));
}
inline float4x4 binary_add(uniform float s, float4x4 m) {
    return make_float4x4(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]),
        binary_add(s, m.cols[2]),
        binary_add(s, m.cols[3]));
}
inline float4x4 binary_sub(uniform float4x4 m, float s) {
    return make_float4x4(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s),
        binary_sub(m.cols[2], s),
        binary_sub(m.cols[3], s));
}
inline float4x4 binary_sub(uniform float s, float4x4 m) {
    return make_float4x4(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]),
        binary_sub(s, m.cols[2]),
        binary_sub(s, m.cols[3]));
}
inline float4x4 binary_mul(uniform float4x4 m, float s) {
    return make_float4x4(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s),
        binary_mul(m.cols[2], s),
        binary_mul(m.cols[3], s));
}
inline float4x4 binary_mul(uniform float s, float4x4 m) {
    return make_float4x4(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]),
        binary_mul(s, m.cols[2]),
        binary_mul(s, m.cols[3]));
}
inline float4x4 binary_div(uniform float4x4 m, float s) {
    return make_float4x4(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s),
        binary_div(m.cols[2], s),
        binary_div(m.cols[3], s));
}
inline float4x4 binary_div(uniform float s, float4x4 m) {
    return make_float4x4(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]),
        binary_div(s, m.cols[2]),
        binary_div(s, m.cols[3]));
}

// matrix-vector binary operators
inline float2 binary_mul(uniform float2x2 m, float2 v) {
    return binary_add(
        binary_mul(m.cols[0], v.v[0]),
        binary_mul(m.cols[1], v.v[1]));
}
inline float3 binary_mul(uniform float3x3 m, float3 v) {
    return binary_add(
        binary_add(
            binary_mul(m.cols[0], v.v[0]),
            binary_mul(m.cols[1], v.v[1])),
        binary_mul(m.cols[2], v.v[2]));
}
inline float4 binary_mul(uniform float4x4 m, float4 v) {
    return binary_add(
        binary_add(
            binary_mul(m.cols[0], v.v[0]),
            binary_mul(m.cols[1], v.v[1])),
        binary_add(
           binary_mul(m.cols[2], v.v[2]),
           binary_mul(m.cols[3], v.v[3])));
}

// matrix-matrix binary operators
inline float2x2 binary_add(uniform float2x2 lhs, float2x2 rhs) {
    return make_float2x2(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]));
}
inline float2x2 binary_sub(uniform float2x2 lhs, float2x2 rhs) {
    return make_float2x2(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]));
}
inline float3x3 binary_add(uniform float3x3 lhs, float3x3 rhs) {
    return make_float3x3(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]),
        binary_add(lhs.cols[2], rhs.cols[2]));
}
inline float3x3 binary_sub(uniform float3x3 lhs, float3x3 rhs) {
    return make_float3x3(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]),
        binary_sub(lhs.cols[2], rhs.cols[2]));
}
inline float4x4 binary_add(uniform float4x4 lhs, float4x4 rhs) {
    return make_float4x4(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]),
        binary_add(lhs.cols[2], rhs.cols[2]),
        binary_add(lhs.cols[3], rhs.cols[3]));
}
inline float4x4 binary_sub(uniform float4x4 lhs, float4x4 rhs) {
    return make_float4x4(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]),
        binary_sub(lhs.cols[2], rhs.cols[2]),
        binary_sub(lhs.cols[3], rhs.cols[3]));
}
inline float2x2 binary_mul(uniform float2x2 lhs, float2x2 rhs) {
    return make_float2x2(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]));
}
inline float3x3 binary_mul(uniform float3x3 lhs, float3x3 rhs) {
    return make_float3x3(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]),
        binary_mul(lhs, rhs.cols[2]));
}
inline float4x4 binary_mul(uniform float4x4 lhs, float4x4 rhs) {
    return make_float4x4(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]),
        binary_mul(lhs, rhs.cols[2]),
        binary_mul(lhs, rhs.cols[3]));
}

// matrix-scalar binary operators
inline float2x2 binary_add(float2x2 m, uniform float s) {
    return make_float2x2(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s));
}
inline float2x2 binary_add(float s, uniform float2x2 m) {
    return make_float2x2(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]));
}
inline float2x2 binary_sub(float2x2 m, uniform float s) {
    return make_float2x2(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s));
}
inline float2x2 binary_sub(float s, uniform float2x2 m) {
    return make_float2x2(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]));
}
inline float2x2 binary_mul(float2x2 m, uniform float s) {
    return make_float2x2(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s));
}
inline float2x2 binary_mul(float s, uniform float2x2 m) {
    return make_float2x2(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]));
}
inline float2x2 binary_div(float2x2 m, uniform float s) {
    return make_float2x2(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s));
}
inline float2x2 binary_div(float s, uniform float2x2 m) {
    return make_float2x2(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]));
}
inline float3x3 binary_add(float3x3 m, uniform float s) {
    return make_float3x3(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s),
        binary_add(m.cols[2], s));
}
inline float3x3 binary_add(float s, uniform float3x3 m) {
    return make_float3x3(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]),
        binary_add(s, m.cols[2]));
}
inline float3x3 binary_sub(float3x3 m, uniform float s) {
    return make_float3x3(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s),
        binary_sub(m.cols[2], s));
}
inline float3x3 binary_sub(float s, uniform float3x3 m) {
    return make_float3x3(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]),
        binary_sub(s, m.cols[2]));
}
inline float3x3 binary_mul(float3x3 m, uniform float s) {
    return make_float3x3(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s),
        binary_mul(m.cols[2], s));
}
inline float3x3 binary_mul(float s, uniform float3x3 m) {
    return make_float3x3(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]),
        binary_mul(s, m.cols[2]));
}
inline float3x3 binary_div(float3x3 m, uniform float s) {
    return make_float3x3(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s),
        binary_div(m.cols[2], s));
}
inline float3x3 binary_div(float s, uniform float3x3 m) {
    return make_float3x3(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]),
        binary_div(s, m.cols[2]));
}
inline float4x4 binary_add(float4x4 m, uniform float s) {
    return make_float4x4(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s),
        binary_add(m.cols[2], s),
        binary_add(m.cols[3], s));
}
inline float4x4 binary_add(float s, uniform float4x4 m) {
    return make_float4x4(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]),
        binary_add(s, m.cols[2]),
        binary_add(s, m.cols[3]));
}
inline float4x4 binary_sub(float4x4 m, uniform float s) {
    return make_float4x4(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s),
        binary_sub(m.cols[2], s),
        binary_sub(m.cols[3], s));
}
inline float4x4 binary_sub(float s, uniform float4x4 m) {
    return make_float4x4(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]),
        binary_sub(s, m.cols[2]),
        binary_sub(s, m.cols[3]));
}
inline float4x4 binary_mul(float4x4 m, uniform float s) {
    return make_float4x4(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s),
        binary_mul(m.cols[2], s),
        binary_mul(m.cols[3], s));
}
inline float4x4 binary_mul(float s, uniform float4x4 m) {
    return make_float4x4(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]),
        binary_mul(s, m.cols[2]),
        binary_mul(s, m.cols[3]));
}
inline float4x4 binary_div(float4x4 m, uniform float s) {
    return make_float4x4(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s),
        binary_div(m.cols[2], s),
        binary_div(m.cols[3], s));
}
inline float4x4 binary_div(float s, uniform float4x4 m) {
    return make_float4x4(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]),
        binary_div(s, m.cols[2]),
        binary_div(s, m.cols[3]));
}

// matrix-vector binary operators
inline float2 binary_mul(float2x2 m, uniform float2 v) {
    return binary_add(
        binary_mul(m.cols[0], v.v[0]),
        binary_mul(m.cols[1], v.v[1]));
}
inline float3 binary_mul(float3x3 m, uniform float3 v) {
    return binary_add(
        binary_add(
            binary_mul(m.cols[0], v.v[0]),
            binary_mul(m.cols[1], v.v[1])),
        binary_mul(m.cols[2], v.v[2]));
}
inline float4 binary_mul(float4x4 m, uniform float4 v) {
    return binary_add(
        binary_add(
            binary_mul(m.cols[0], v.v[0]),
            binary_mul(m.cols[1], v.v[1])),
        binary_add(
           binary_mul(m.cols[2], v.v[2]),
           binary_mul(m.cols[3], v.v[3])));
}

// matrix-matrix binary operators
inline float2x2 binary_add(float2x2 lhs, uniform float2x2 rhs) {
    return make_float2x2(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]));
}
inline float2x2 binary_sub(float2x2 lhs, uniform float2x2 rhs) {
    return make_float2x2(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]));
}
inline float3x3 binary_add(float3x3 lhs, uniform float3x3 rhs) {
    return make_float3x3(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]),
        binary_add(lhs.cols[2], rhs.cols[2]));
}
inline float3x3 binary_sub(float3x3 lhs, uniform float3x3 rhs) {
    return make_float3x3(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]),
        binary_sub(lhs.cols[2], rhs.cols[2]));
}
inline float4x4 binary_add(float4x4 lhs, uniform float4x4 rhs) {
    return make_float4x4(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]),
        binary_add(lhs.cols[2], rhs.cols[2]),
        binary_add(lhs.cols[3], rhs.cols[3]));
}
inline float4x4 binary_sub(float4x4 lhs, uniform float4x4 rhs) {
    return make_float4x4(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]),
        binary_sub(lhs.cols[2], rhs.cols[2]),
        binary_sub(lhs.cols[3], rhs.cols[3]));
}
inline float2x2 binary_mul(float2x2 lhs, uniform float2x2 rhs) {
    return make_float2x2(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]));
}
inline float3x3 binary_mul(float3x3 lhs, uniform float3x3 rhs) {
    return make_float3x3(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]),
        binary_mul(lhs, rhs.cols[2]));
}
inline float4x4 binary_mul(float4x4 lhs, uniform float4x4 rhs) {
    return make_float4x4(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]),
        binary_mul(lhs, rhs.cols[2]),
        binary_mul(lhs, rhs.cols[3]));
}

// matrix-scalar binary operators
inline uniform float2x2 binary_add(uniform float2x2 m, uniform float s) {
    return make_float2x2(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s));
}
inline uniform float2x2 binary_add(uniform float s, uniform float2x2 m) {
    return make_float2x2(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]));
}
inline uniform float2x2 binary_sub(uniform float2x2 m, uniform float s) {
    return make_float2x2(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s));
}
inline uniform float2x2 binary_sub(uniform float s, uniform float2x2 m) {
    return make_float2x2(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]));
}
inline uniform float2x2 binary_mul(uniform float2x2 m, uniform float s) {
    return make_float2x2(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s));
}
inline uniform float2x2 binary_mul(uniform float s, uniform float2x2 m) {
    return make_float2x2(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]));
}
inline uniform float2x2 binary_div(uniform float2x2 m, uniform float s) {
    return make_float2x2(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s));
}
inline uniform float2x2 binary_div(uniform float s, uniform float2x2 m) {
    return make_float2x2(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]));
}
inline uniform float3x3 binary_add(uniform float3x3 m, uniform float s) {
    return make_float3x3(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s),
        binary_add(m.cols[2], s));
}
inline uniform float3x3 binary_add(uniform float s, uniform float3x3 m) {
    return make_float3x3(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]),
        binary_add(s, m.cols[2]));
}
inline uniform float3x3 binary_sub(uniform float3x3 m, uniform float s) {
    return make_float3x3(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s),
        binary_sub(m.cols[2], s));
}
inline uniform float3x3 binary_sub(uniform float s, uniform float3x3 m) {
    return make_float3x3(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]),
        binary_sub(s, m.cols[2]));
}
inline uniform float3x3 binary_mul(uniform float3x3 m, uniform float s) {
    return make_float3x3(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s),
        binary_mul(m.cols[2], s));
}
inline uniform float3x3 binary_mul(uniform float s, uniform float3x3 m) {
    return make_float3x3(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]),
        binary_mul(s, m.cols[2]));
}
inline uniform float3x3 binary_div(uniform float3x3 m, uniform float s) {
    return make_float3x3(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s),
        binary_div(m.cols[2], s));
}
inline uniform float3x3 binary_div(uniform float s, uniform float3x3 m) {
    return make_float3x3(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]),
        binary_div(s, m.cols[2]));
}
inline uniform float4x4 binary_add(uniform float4x4 m, uniform float s) {
    return make_float4x4(
        binary_add(m.cols[0], s),
        binary_add(m.cols[1], s),
        binary_add(m.cols[2], s),
        binary_add(m.cols[3], s));
}
inline uniform float4x4 binary_add(uniform float s, uniform float4x4 m) {
    return make_float4x4(
        binary_add(s, m.cols[0]),
        binary_add(s, m.cols[1]),
        binary_add(s, m.cols[2]),
        binary_add(s, m.cols[3]));
}
inline uniform float4x4 binary_sub(uniform float4x4 m, uniform float s) {
    return make_float4x4(
        binary_sub(m.cols[0], s),
        binary_sub(m.cols[1], s),
        binary_sub(m.cols[2], s),
        binary_sub(m.cols[3], s));
}
inline uniform float4x4 binary_sub(uniform float s, uniform float4x4 m) {
    return make_float4x4(
        binary_sub(s, m.cols[0]),
        binary_sub(s, m.cols[1]),
        binary_sub(s, m.cols[2]),
        binary_sub(s, m.cols[3]));
}
inline uniform float4x4 binary_mul(uniform float4x4 m, uniform float s) {
    return make_float4x4(
        binary_mul(m.cols[0], s),
        binary_mul(m.cols[1], s),
        binary_mul(m.cols[2], s),
        binary_mul(m.cols[3], s));
}
inline uniform float4x4 binary_mul(uniform float s, uniform float4x4 m) {
    return make_float4x4(
        binary_mul(s, m.cols[0]),
        binary_mul(s, m.cols[1]),
        binary_mul(s, m.cols[2]),
        binary_mul(s, m.cols[3]));
}
inline uniform float4x4 binary_div(uniform float4x4 m, uniform float s) {
    return make_float4x4(
        binary_div(m.cols[0], s),
        binary_div(m.cols[1], s),
        binary_div(m.cols[2], s),
        binary_div(m.cols[3], s));
}
inline uniform float4x4 binary_div(uniform float s, uniform float4x4 m) {
    return make_float4x4(
        binary_div(s, m.cols[0]),
        binary_div(s, m.cols[1]),
        binary_div(s, m.cols[2]),
        binary_div(s, m.cols[3]));
}

// matrix-vector binary operators
inline uniform float2 binary_mul(uniform float2x2 m, uniform float2 v) {
    return binary_add(
        binary_mul(m.cols[0], v.v[0]),
        binary_mul(m.cols[1], v.v[1]));
}
inline uniform float3 binary_mul(uniform float3x3 m, uniform float3 v) {
    return binary_add(
        binary_add(
            binary_mul(m.cols[0], v.v[0]),
            binary_mul(m.cols[1], v.v[1])),
        binary_mul(m.cols[2], v.v[2]));
}
inline uniform float4 binary_mul(uniform float4x4 m, uniform float4 v) {
    return binary_add(
        binary_add(
            binary_mul(m.cols[0], v.v[0]),
            binary_mul(m.cols[1], v.v[1])),
        binary_add(
           binary_mul(m.cols[2], v.v[2]),
           binary_mul(m.cols[3], v.v[3])));
}

// matrix-matrix binary operators
inline uniform float2x2 binary_add(uniform float2x2 lhs, uniform float2x2 rhs) {
    return make_float2x2(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]));
}
inline uniform float2x2 binary_sub(uniform float2x2 lhs, uniform float2x2 rhs) {
    return make_float2x2(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]));
}
inline uniform float3x3 binary_add(uniform float3x3 lhs, uniform float3x3 rhs) {
    return make_float3x3(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]),
        binary_add(lhs.cols[2], rhs.cols[2]));
}
inline uniform float3x3 binary_sub(uniform float3x3 lhs, uniform float3x3 rhs) {
    return make_float3x3(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]),
        binary_sub(lhs.cols[2], rhs.cols[2]));
}
inline uniform float4x4 binary_add(uniform float4x4 lhs, uniform float4x4 rhs) {
    return make_float4x4(
        binary_add(lhs.cols[0], rhs.cols[0]),
        binary_add(lhs.cols[1], rhs.cols[1]),
        binary_add(lhs.cols[2], rhs.cols[2]),
        binary_add(lhs.cols[3], rhs.cols[3]));
}
inline uniform float4x4 binary_sub(uniform float4x4 lhs, uniform float4x4 rhs) {
    return make_float4x4(
        binary_sub(lhs.cols[0], rhs.cols[0]),
        binary_sub(lhs.cols[1], rhs.cols[1]),
        binary_sub(lhs.cols[2], rhs.cols[2]),
        binary_sub(lhs.cols[3], rhs.cols[3]));
}
inline uniform float2x2 binary_mul(uniform float2x2 lhs, uniform float2x2 rhs) {
    return make_float2x2(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]));
}
inline uniform float3x3 binary_mul(uniform float3x3 lhs, uniform float3x3 rhs) {
    return make_float3x3(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]),
        binary_mul(lhs, rhs.cols[2]));
}
inline uniform float4x4 binary_mul(uniform float4x4 lhs, uniform float4x4 rhs) {
    return make_float4x4(
        binary_mul(lhs, rhs.cols[0]),
        binary_mul(lhs, rhs.cols[1]),
        binary_mul(lhs, rhs.cols[2]),
        binary_mul(lhs, rhs.cols[3]));
}

// transpose
inline uniform float2x2 transpose(uniform float2x2 m) {
    return make_float2x2(
        make_float2(m.cols[0].v[0], m.cols[1].v[0]),
        make_float2(m.cols[0].v[1], m.cols[1].v[1]));
}
inline uniform float3x3 transpose(uniform float3x3 m) {
    return make_float3x3(
        make_float3(m.cols[0].v[0], m.cols[1].v[0], m.cols[2].v[0]),
        make_float3(m.cols[0].v[1], m.cols[1].v[1], m.cols[2].v[1]),
        make_float3(m.cols[0].v[2], m.cols[1].v[2], m.cols[2].v[2]));
}
inline uniform float4x4 transpose(uniform float4x4 m) {
    return make_float4x4(
        make_float4(m.cols[0].v[0], m.cols[1].v[0], m.cols[2].v[0], m.cols[3].v[0]),
        make_float4(m.cols[0].v[1], m.cols[1].v[1], m.cols[2].v[1], m.cols[3].v[1]),
        make_float4(m.cols[0].v[2], m.cols[1].v[2], m.cols[2].v[2], m.cols[3].v[2]),
        make_float4(m.cols[0].v[3], m.cols[1].v[3], m.cols[2].v[3], m.cols[3].v[3]));
}

// determinant
inline uniform float determinant(uniform float2x2 m) {
    return m.cols[0].v[0] * m.cols[1].v[1] - m.cols[1].v[0] * m.cols[0].v[1];
}
inline uniform float determinant(uniform float3x3 m) {
    return m.cols[0].v[0] * (m.cols[1].v[1] * m.cols[2].v[2] - m.cols[2].v[1] * m.cols[1].v[2])
         - m.cols[1].v[0] * (m.cols[0].v[1] * m.cols[2].v[2] - m.cols[2].v[1] * m.cols[0].v[2])
         + m.cols[2].v[0] * (m.cols[0].v[1] * m.cols[1].v[2] - m.cols[1].v[1] * m.cols[0].v[2]);
}
inline uniform float determinant(uniform float4x4 m) {
    const uniform float coef00 = m.cols[2].v[2] * m.cols[3].v[3] - m.cols[3].v[2] * m.cols[2].v[3];
    const uniform float coef02 = m.cols[1].v[2] * m.cols[3].v[3] - m.cols[3].v[2] * m.cols[1].v[3];
    const uniform float coef03 = m.cols[1].v[2] * m.cols[2].v[3] - m.cols[2].v[2] * m.cols[1].v[3];
    const uniform float coef04 = m.cols[2].v[1] * m.cols[3].v[3] - m.cols[3].v[1] * m.cols[2].v[3];
    const uniform float coef06 = m.cols[1].v[1] * m.cols[3].v[3] - m.cols[3].v[1] * m.cols[1].v[3];
    const uniform float coef07 = m.cols[1].v[1] * m.cols[2].v[3] - m.cols[2].v[1] * m.cols[1].v[3];
    const uniform float coef08 = m.cols[2].v[1] * m.cols[3].v[2] - m.cols[3].v[1] * m.cols[2].v[2];
    const uniform float coef10 = m.cols[1].v[1] * m.cols[3].v[2] - m.cols[3].v[1] * m.cols[1].v[2];
    const uniform float coef11 = m.cols[1].v[1] * m.cols[2].v[2] - m.cols[2].v[1] * m.cols[1].v[2];
    const uniform float coef12 = m.cols[2].v[0] * m.cols[3].v[3] - m.cols[3].v[0] * m.cols[2].v[3];
    const uniform float coef14 = m.cols[1].v[0] * m.cols[3].v[3] - m.cols[3].v[0] * m.cols[1].v[3];
    const uniform float coef15 = m.cols[1].v[0] * m.cols[2].v[3] - m.cols[2].v[0] * m.cols[1].v[3];
    const uniform float coef16 = m.cols[2].v[0] * m.cols[3].v[2] - m.cols[3].v[0] * m.cols[2].v[2];
    const uniform float coef18 = m.cols[1].v[0] * m.cols[3].v[2] - m.cols[3].v[0] * m.cols[1].v[2];
    const uniform float coef19 = m.cols[1].v[0] * m.cols[2].v[2] - m.cols[2].v[0] * m.cols[1].v[2];
    const uniform float coef20 = m.cols[2].v[0] * m.cols[3].v[1] - m.cols[3].v[0] * m.cols[2].v[1];
    const uniform float coef22 = m.cols[1].v[0] * m.cols[3].v[1] - m.cols[3].v[0] * m.cols[1].v[1];
    const uniform float coef23 = m.cols[1].v[0] * m.cols[2].v[1] - m.cols[2].v[0] * m.cols[1].v[1];
    const uniform float4 fac0 = make_float4(coef00, coef00, coef02, coef03);
    const uniform float4 fac1 = make_float4(coef04, coef04, coef06, coef07);
    const uniform float4 fac2 = make_float4(coef08, coef08, coef10, coef11);
    const uniform float4 fac3 = make_float4(coef12, coef12, coef14, coef15);
    const uniform float4 fac4 = make_float4(coef16, coef16, coef18, coef19);
    const uniform float4 fac5 = make_float4(coef20, coef20, coef22, coef23);
    const uniform float4 Vec0 = make_float4(m.cols[1].v[0], m.cols[0].v[0], m.cols[0].v[0], m.cols[0].v[0]);
    const uniform float4 Vec1 = make_float4(m.cols[1].v[1], m.cols[0].v[1], m.cols[0].v[1], m.cols[0].v[1]);
    const uniform float4 Vec2 = make_float4(m.cols[1].v[2], m.cols[0].v[2], m.cols[0].v[2], m.cols[0].v[2]);
    const uniform float4 Vec3 = make_float4(m.cols[1].v[3], m.cols[0].v[3], m.cols[0].v[3], m.cols[0].v[3]);
    const uniform float4 inv0 = binary_add(binary_sub(binary_mul(Vec1, fac0), binary_mul(Vec2, fac1)), binary_mul(Vec3, fac2));
    const uniform float4 inv1 = binary_add(binary_sub(binary_mul(Vec0, fac0), binary_mul(Vec2, fac3)), binary_mul(Vec3, fac4));
    const uniform float4 inv2 = binary_add(binary_sub(binary_mul(Vec0, fac1), binary_mul(Vec1, fac3)), binary_mul(Vec3, fac5));
    const uniform float4 inv3 = binary_add(binary_sub(binary_mul(Vec0, fac2), binary_mul(Vec1, fac4)), binary_mul(Vec2, fac5));
    const uniform float4 sign_a = make_float4(+1.0f, -1.0f, +1.0f, -1.0f);
    const uniform float4 sign_b = make_float4(-1.0f, +1.0f, -1.0f, +1.0f);
    const uniform float4 inv_0 = binary_mul(inv0, sign_a);
    const uniform float4 inv_1 = binary_mul(inv1, sign_b);
    const uniform float4 inv_2 = binary_mul(inv2, sign_a);
    const uniform float4 inv_3 = binary_mul(inv3, sign_b);
    const uniform float4 dot0 = binary_mul(m.cols[0], make_float4(inv_0.v[0], inv_1.v[0], inv_2.v[0], inv_3.v[0]));
    return dot0.v[0] + dot0.v[1] + dot0.v[2] + dot0.v[3];
}

// inverse
inline uniform float2x2 inverse(uniform float2x2 m) {
    const uniform float one_over_determinant = 1.f / determinant(m);
    return make_float2x2(m.cols[1].v[1] * one_over_determinant,
                        -m.cols[0].v[1] * one_over_determinant,
                        -m.cols[1].v[0] * one_over_determinant,
                        +m.cols[0].v[0] * one_over_determinant);
}
inline uniform float3x3 inverse(uniform float3x3 m) {
    const uniform float one_over_determinant = 1.f / determinant(m);
    return make_float3x3(
        (m.cols[1].v[1] * m.cols[2].v[2] - m.cols[2].v[1] * m.cols[1].v[2]) * one_over_determinant,
        (m.cols[2].v[1] * m.cols[0].v[2] - m.cols[0].v[1] * m.cols[2].v[2]) * one_over_determinant,
        (m.cols[0].v[1] * m.cols[1].v[2] - m.cols[1].v[1] * m.cols[0].v[2]) * one_over_determinant,
        (m.cols[2].v[0] * m.cols[1].v[2] - m.cols[1].v[0] * m.cols[2].v[2]) * one_over_determinant,
        (m.cols[0].v[0] * m.cols[2].v[2] - m.cols[2].v[0] * m.cols[0].v[2]) * one_over_determinant,
        (m.cols[1].v[0] * m.cols[0].v[2] - m.cols[0].v[0] * m.cols[1].v[2]) * one_over_determinant,
        (m.cols[1].v[0] * m.cols[2].v[1] - m.cols[2].v[0] * m.cols[1].v[1]) * one_over_determinant,
        (m.cols[2].v[0] * m.cols[0].v[1] - m.cols[0].v[0] * m.cols[2].v[1]) * one_over_determinant,
        (m.cols[0].v[0] * m.cols[1].v[1] - m.cols[1].v[0] * m.cols[0].v[1]) * one_over_determinant);
}
inline uniform float4x4 inverse(uniform float4x4 m) {
    const uniform float coef00 = m.cols[2].v[2] * m.cols[3].v[3] - m.cols[3].v[2] * m.cols[2].v[3];
    const uniform float coef02 = m.cols[1].v[2] * m.cols[3].v[3] - m.cols[3].v[2] * m.cols[1].v[3];
    const uniform float coef03 = m.cols[1].v[2] * m.cols[2].v[3] - m.cols[2].v[2] * m.cols[1].v[3];
    const uniform float coef04 = m.cols[2].v[1] * m.cols[3].v[3] - m.cols[3].v[1] * m.cols[2].v[3];
    const uniform float coef06 = m.cols[1].v[1] * m.cols[3].v[3] - m.cols[3].v[1] * m.cols[1].v[3];
    const uniform float coef07 = m.cols[1].v[1] * m.cols[2].v[3] - m.cols[2].v[1] * m.cols[1].v[3];
    const uniform float coef08 = m.cols[2].v[1] * m.cols[3].v[2] - m.cols[3].v[1] * m.cols[2].v[2];
    const uniform float coef10 = m.cols[1].v[1] * m.cols[3].v[2] - m.cols[3].v[1] * m.cols[1].v[2];
    const uniform float coef11 = m.cols[1].v[1] * m.cols[2].v[2] - m.cols[2].v[1] * m.cols[1].v[2];
    const uniform float coef12 = m.cols[2].v[0] * m.cols[3].v[3] - m.cols[3].v[0] * m.cols[2].v[3];
    const uniform float coef14 = m.cols[1].v[0] * m.cols[3].v[3] - m.cols[3].v[0] * m.cols[1].v[3];
    const uniform float coef15 = m.cols[1].v[0] * m.cols[2].v[3] - m.cols[2].v[0] * m.cols[1].v[3];
    const uniform float coef16 = m.cols[2].v[0] * m.cols[3].v[2] - m.cols[3].v[0] * m.cols[2].v[2];
    const uniform float coef18 = m.cols[1].v[0] * m.cols[3].v[2] - m.cols[3].v[0] * m.cols[1].v[2];
    const uniform float coef19 = m.cols[1].v[0] * m.cols[2].v[2] - m.cols[2].v[0] * m.cols[1].v[2];
    const uniform float coef20 = m.cols[2].v[0] * m.cols[3].v[1] - m.cols[3].v[0] * m.cols[2].v[1];
    const uniform float coef22 = m.cols[1].v[0] * m.cols[3].v[1] - m.cols[3].v[0] * m.cols[1].v[1];
    const uniform float coef23 = m.cols[1].v[0] * m.cols[2].v[1] - m.cols[2].v[0] * m.cols[1].v[1];
    const uniform float4 fac0 = make_float4(coef00, coef00, coef02, coef03);
    const uniform float4 fac1 = make_float4(coef04, coef04, coef06, coef07);
    const uniform float4 fac2 = make_float4(coef08, coef08, coef10, coef11);
    const uniform float4 fac3 = make_float4(coef12, coef12, coef14, coef15);
    const uniform float4 fac4 = make_float4(coef16, coef16, coef18, coef19);
    const uniform float4 fac5 = make_float4(coef20, coef20, coef22, coef23);
    const uniform float4 Vec0 = make_float4(m.cols[1].v[0], m.cols[0].v[0], m.cols[0].v[0], m.cols[0].v[0]);
    const uniform float4 Vec1 = make_float4(m.cols[1].v[1], m.cols[0].v[1], m.cols[0].v[1], m.cols[0].v[1]);
    const uniform float4 Vec2 = make_float4(m.cols[1].v[2], m.cols[0].v[2], m.cols[0].v[2], m.cols[0].v[2]);
    const uniform float4 Vec3 = make_float4(m.cols[1].v[3], m.cols[0].v[3], m.cols[0].v[3], m.cols[0].v[3]);
    const uniform float4 inv0 = binary_add(binary_sub(binary_mul(Vec1, fac0), binary_mul(Vec2, fac1)), binary_mul(Vec3, fac2));
    const uniform float4 inv1 = binary_add(binary_sub(binary_mul(Vec0, fac0), binary_mul(Vec2, fac3)), binary_mul(Vec3, fac4));
    const uniform float4 inv2 = binary_add(binary_sub(binary_mul(Vec0, fac1), binary_mul(Vec1, fac3)), binary_mul(Vec3, fac5));
    const uniform float4 inv3 = binary_add(binary_sub(binary_mul(Vec0, fac2), binary_mul(Vec1, fac4)), binary_mul(Vec2, fac5));
    const uniform float4 sign_a = make_float4(+1.0f, -1.0f, +1.0f, -1.0f);
    const uniform float4 sign_b = make_float4(-1.0f, +1.0f, -1.0f, +1.0f);
    const uniform float4 inv_0 = binary_mul(inv0, sign_a);
    const uniform float4 inv_1 = binary_mul(inv1, sign_b);
    const uniform float4 inv_2 = binary_mul(inv2, sign_a);
    const uniform float4 inv_3 = binary_mul(inv3, sign_b);
    const uniform float4 dot0 = binary_mul(m.cols[0], make_float4(inv_0.v[0], inv_1.v[0], inv_2.v[0], inv_3.v[0]));
    const uniform float dot1 = dot0.v[0] + dot0.v[1] + dot0.v[2] + dot0.v[3];
    const uniform float one_over_determinant = 1.0f / dot1;
    return make_float4x4(binary_mul(inv_0, one_over_determinant),
                         binary_mul(inv_1, one_over_determinant),
                         binary_mul(inv_2, one_over_determinant),
                         binary_mul(inv_3, one_over_determinant));
}

// transpose
inline float2x2 transpose(float2x2 m) {
    return make_float2x2(
        make_float2(m.cols[0].v[0], m.cols[1].v[0]),
        make_float2(m.cols[0].v[1], m.cols[1].v[1]));
}
inline float3x3 transpose(float3x3 m) {
    return make_float3x3(
        make_float3(m.cols[0].v[0], m.cols[1].v[0], m.cols[2].v[0]),
        make_float3(m.cols[0].v[1], m.cols[1].v[1], m.cols[2].v[1]),
        make_float3(m.cols[0].v[2], m.cols[1].v[2], m.cols[2].v[2]));
}
inline float4x4 transpose(float4x4 m) {
    return make_float4x4(
        make_float4(m.cols[0].v[0], m.cols[1].v[0], m.cols[2].v[0], m.cols[3].v[0]),
        make_float4(m.cols[0].v[1], m.cols[1].v[1], m.cols[2].v[1], m.cols[3].v[1]),
        make_float4(m.cols[0].v[2], m.cols[1].v[2], m.cols[2].v[2], m.cols[3].v[2]),
        make_float4(m.cols[0].v[3], m.cols[1].v[3], m.cols[2].v[3], m.cols[3].v[3]));
}

// determinant
inline float determinant(float2x2 m) {
    return m.cols[0].v[0] * m.cols[1].v[1] - m.cols[1].v[0] * m.cols[0].v[1];
}
inline float determinant(float3x3 m) {
    return m.cols[0].v[0] * (m.cols[1].v[1] * m.cols[2].v[2] - m.cols[2].v[1] * m.cols[1].v[2])
         - m.cols[1].v[0] * (m.cols[0].v[1] * m.cols[2].v[2] - m.cols[2].v[1] * m.cols[0].v[2])
         + m.cols[2].v[0] * (m.cols[0].v[1] * m.cols[1].v[2] - m.cols[1].v[1] * m.cols[0].v[2]);
}
inline float determinant(float4x4 m) {
    const float coef00 = m.cols[2].v[2] * m.cols[3].v[3] - m.cols[3].v[2] * m.cols[2].v[3];
    const float coef02 = m.cols[1].v[2] * m.cols[3].v[3] - m.cols[3].v[2] * m.cols[1].v[3];
    const float coef03 = m.cols[1].v[2] * m.cols[2].v[3] - m.cols[2].v[2] * m.cols[1].v[3];
    const float coef04 = m.cols[2].v[1] * m.cols[3].v[3] - m.cols[3].v[1] * m.cols[2].v[3];
    const float coef06 = m.cols[1].v[1] * m.cols[3].v[3] - m.cols[3].v[1] * m.cols[1].v[3];
    const float coef07 = m.cols[1].v[1] * m.cols[2].v[3] - m.cols[2].v[1] * m.cols[1].v[3];
    const float coef08 = m.cols[2].v[1] * m.cols[3].v[2] - m.cols[3].v[1] * m.cols[2].v[2];
    const float coef10 = m.cols[1].v[1] * m.cols[3].v[2] - m.cols[3].v[1] * m.cols[1].v[2];
    const float coef11 = m.cols[1].v[1] * m.cols[2].v[2] - m.cols[2].v[1] * m.cols[1].v[2];
    const float coef12 = m.cols[2].v[0] * m.cols[3].v[3] - m.cols[3].v[0] * m.cols[2].v[3];
    const float coef14 = m.cols[1].v[0] * m.cols[3].v[3] - m.cols[3].v[0] * m.cols[1].v[3];
    const float coef15 = m.cols[1].v[0] * m.cols[2].v[3] - m.cols[2].v[0] * m.cols[1].v[3];
    const float coef16 = m.cols[2].v[0] * m.cols[3].v[2] - m.cols[3].v[0] * m.cols[2].v[2];
    const float coef18 = m.cols[1].v[0] * m.cols[3].v[2] - m.cols[3].v[0] * m.cols[1].v[2];
    const float coef19 = m.cols[1].v[0] * m.cols[2].v[2] - m.cols[2].v[0] * m.cols[1].v[2];
    const float coef20 = m.cols[2].v[0] * m.cols[3].v[1] - m.cols[3].v[0] * m.cols[2].v[1];
    const float coef22 = m.cols[1].v[0] * m.cols[3].v[1] - m.cols[3].v[0] * m.cols[1].v[1];
    const float coef23 = m.cols[1].v[0] * m.cols[2].v[1] - m.cols[2].v[0] * m.cols[1].v[1];
    const float4 fac0 = make_float4(coef00, coef00, coef02, coef03);
    const float4 fac1 = make_float4(coef04, coef04, coef06, coef07);
    const float4 fac2 = make_float4(coef08, coef08, coef10, coef11);
    const float4 fac3 = make_float4(coef12, coef12, coef14, coef15);
    const float4 fac4 = make_float4(coef16, coef16, coef18, coef19);
    const float4 fac5 = make_float4(coef20, coef20, coef22, coef23);
    const float4 Vec0 = make_float4(m.cols[1].v[0], m.cols[0].v[0], m.cols[0].v[0], m.cols[0].v[0]);
    const float4 Vec1 = make_float4(m.cols[1].v[1], m.cols[0].v[1], m.cols[0].v[1], m.cols[0].v[1]);
    const float4 Vec2 = make_float4(m.cols[1].v[2], m.cols[0].v[2], m.cols[0].v[2], m.cols[0].v[2]);
    const float4 Vec3 = make_float4(m.cols[1].v[3], m.cols[0].v[3], m.cols[0].v[3], m.cols[0].v[3]);
    const float4 inv0 = binary_add(binary_sub(binary_mul(Vec1, fac0), binary_mul(Vec2, fac1)), binary_mul(Vec3, fac2));
    const float4 inv1 = binary_add(binary_sub(binary_mul(Vec0, fac0), binary_mul(Vec2, fac3)), binary_mul(Vec3, fac4));
    const float4 inv2 = binary_add(binary_sub(binary_mul(Vec0, fac1), binary_mul(Vec1, fac3)), binary_mul(Vec3, fac5));
    const float4 inv3 = binary_add(binary_sub(binary_mul(Vec0, fac2), binary_mul(Vec1, fac4)), binary_mul(Vec2, fac5));
    const float4 sign_a = make_float4(+1.0f, -1.0f, +1.0f, -1.0f);
    const float4 sign_b = make_float4(-1.0f, +1.0f, -1.0f, +1.0f);
    const float4 inv_0 = binary_mul(inv0, sign_a);
    const float4 inv_1 = binary_mul(inv1, sign_b);
    const float4 inv_2 = binary_mul(inv2, sign_a);
    const float4 inv_3 = binary_mul(inv3, sign_b);
    const float4 dot0 = binary_mul(m.cols[0], make_float4(inv_0.v[0], inv_1.v[0], inv_2.v[0], inv_3.v[0]));
    return dot0.v[0] + dot0.v[1] + dot0.v[2] + dot0.v[3];
}

// inverse
inline float2x2 inverse(float2x2 m) {
    const float one_over_determinant = 1.f / determinant(m);
    return make_float2x2(m.cols[1].v[1] * one_over_determinant,
                        -m.cols[0].v[1] * one_over_determinant,
                        -m.cols[1].v[0] * one_over_determinant,
                        +m.cols[0].v[0] * one_over_determinant);
}
inline float3x3 inverse(float3x3 m) {
    const float one_over_determinant = 1.f / determinant(m);
    return make_float3x3(
        (m.cols[1].v[1] * m.cols[2].v[2] - m.cols[2].v[1] * m.cols[1].v[2]) * one_over_determinant,
        (m.cols[2].v[1] * m.cols[0].v[2] - m.cols[0].v[1] * m.cols[2].v[2]) * one_over_determinant,
        (m.cols[0].v[1] * m.cols[1].v[2] - m.cols[1].v[1] * m.cols[0].v[2]) * one_over_determinant,
        (m.cols[2].v[0] * m.cols[1].v[2] - m.cols[1].v[0] * m.cols[2].v[2]) * one_over_determinant,
        (m.cols[0].v[0] * m.cols[2].v[2] - m.cols[2].v[0] * m.cols[0].v[2]) * one_over_determinant,
        (m.cols[1].v[0] * m.cols[0].v[2] - m.cols[0].v[0] * m.cols[1].v[2]) * one_over_determinant,
        (m.cols[1].v[0] * m.cols[2].v[1] - m.cols[2].v[0] * m.cols[1].v[1]) * one_over_determinant,
        (m.cols[2].v[0] * m.cols[0].v[1] - m.cols[0].v[0] * m.cols[2].v[1]) * one_over_determinant,
        (m.cols[0].v[0] * m.cols[1].v[1] - m.cols[1].v[0] * m.cols[0].v[1]) * one_over_determinant);
}
inline float4x4 inverse(float4x4 m) {
    const float coef00 = m.cols[2].v[2] * m.cols[3].v[3] - m.cols[3].v[2] * m.cols[2].v[3];
    const float coef02 = m.cols[1].v[2] * m.cols[3].v[3] - m.cols[3].v[2] * m.cols[1].v[3];
    const float coef03 = m.cols[1].v[2] * m.cols[2].v[3] - m.cols[2].v[2] * m.cols[1].v[3];
    const float coef04 = m.cols[2].v[1] * m.cols[3].v[3] - m.cols[3].v[1] * m.cols[2].v[3];
    const float coef06 = m.cols[1].v[1] * m.cols[3].v[3] - m.cols[3].v[1] * m.cols[1].v[3];
    const float coef07 = m.cols[1].v[1] * m.cols[2].v[3] - m.cols[2].v[1] * m.cols[1].v[3];
    const float coef08 = m.cols[2].v[1] * m.cols[3].v[2] - m.cols[3].v[1] * m.cols[2].v[2];
    const float coef10 = m.cols[1].v[1] * m.cols[3].v[2] - m.cols[3].v[1] * m.cols[1].v[2];
    const float coef11 = m.cols[1].v[1] * m.cols[2].v[2] - m.cols[2].v[1] * m.cols[1].v[2];
    const float coef12 = m.cols[2].v[0] * m.cols[3].v[3] - m.cols[3].v[0] * m.cols[2].v[3];
    const float coef14 = m.cols[1].v[0] * m.cols[3].v[3] - m.cols[3].v[0] * m.cols[1].v[3];
    const float coef15 = m.cols[1].v[0] * m.cols[2].v[3] - m.cols[2].v[0] * m.cols[1].v[3];
    const float coef16 = m.cols[2].v[0] * m.cols[3].v[2] - m.cols[3].v[0] * m.cols[2].v[2];
    const float coef18 = m.cols[1].v[0] * m.cols[3].v[2] - m.cols[3].v[0] * m.cols[1].v[2];
    const float coef19 = m.cols[1].v[0] * m.cols[2].v[2] - m.cols[2].v[0] * m.cols[1].v[2];
    const float coef20 = m.cols[2].v[0] * m.cols[3].v[1] - m.cols[3].v[0] * m.cols[2].v[1];
    const float coef22 = m.cols[1].v[0] * m.cols[3].v[1] - m.cols[3].v[0] * m.cols[1].v[1];
    const float coef23 = m.cols[1].v[0] * m.cols[2].v[1] - m.cols[2].v[0] * m.cols[1].v[1];
    const float4 fac0 = make_float4(coef00, coef00, coef02, coef03);
    const float4 fac1 = make_float4(coef04, coef04, coef06, coef07);
    const float4 fac2 = make_float4(coef08, coef08, coef10, coef11);
    const float4 fac3 = make_float4(coef12, coef12, coef14, coef15);
    const float4 fac4 = make_float4(coef16, coef16, coef18, coef19);
    const float4 fac5 = make_float4(coef20, coef20, coef22, coef23);
    const float4 Vec0 = make_float4(m.cols[1].v[0], m.cols[0].v[0], m.cols[0].v[0], m.cols[0].v[0]);
    const float4 Vec1 = make_float4(m.cols[1].v[1], m.cols[0].v[1], m.cols[0].v[1], m.cols[0].v[1]);
    const float4 Vec2 = make_float4(m.cols[1].v[2], m.cols[0].v[2], m.cols[0].v[2], m.cols[0].v[2]);
    const float4 Vec3 = make_float4(m.cols[1].v[3], m.cols[0].v[3], m.cols[0].v[3], m.cols[0].v[3]);
    const float4 inv0 = binary_add(binary_sub(binary_mul(Vec1, fac0), binary_mul(Vec2, fac1)), binary_mul(Vec3, fac2));
    const float4 inv1 = binary_add(binary_sub(binary_mul(Vec0, fac0), binary_mul(Vec2, fac3)), binary_mul(Vec3, fac4));
    const float4 inv2 = binary_add(binary_sub(binary_mul(Vec0, fac1), binary_mul(Vec1, fac3)), binary_mul(Vec3, fac5));
    const float4 inv3 = binary_add(binary_sub(binary_mul(Vec0, fac2), binary_mul(Vec1, fac4)), binary_mul(Vec2, fac5));
    const float4 sign_a = make_float4(+1.0f, -1.0f, +1.0f, -1.0f);
    const float4 sign_b = make_float4(-1.0f, +1.0f, -1.0f, +1.0f);
    const float4 inv_0 = binary_mul(inv0, sign_a);
    const float4 inv_1 = binary_mul(inv1, sign_b);
    const float4 inv_2 = binary_mul(inv2, sign_a);
    const float4 inv_3 = binary_mul(inv3, sign_b);
    const float4 dot0 = binary_mul(m.cols[0], make_float4(inv_0.v[0], inv_1.v[0], inv_2.v[0], inv_3.v[0]));
    const float dot1 = dot0.v[0] + dot0.v[1] + dot0.v[2] + dot0.v[3];
    const float one_over_determinant = 1.0f / dot1;
    return make_float4x4(binary_mul(inv_0, one_over_determinant),
                         binary_mul(inv_1, one_over_determinant),
                         binary_mul(inv_2, one_over_determinant),
                         binary_mul(inv_3, one_over_determinant));
}

struct packed_float3 {
    float a[3];
};
struct LCRay {
    packed_float3 m0;
    float m1;
    packed_float3 m2;
    float m3;
};
struct LCHit {
    uint m0;
    uint m1;
    float2 m2;
};
struct LCAccel {
    void *uniform handle;
    const float4x4 *uniform transforms;
};

inline float4x4 accel_instance_transform(uniform LCAccel accel, uint index) {
    return accel.transforms[index];
}

#define make_array_type(name, T, N) struct name { T a[N]; }

struct LCTexture {
    // TODO
};

struct LCBindlessItem {
    const void *uniform buffer;
    const LCTexture tex2d;
    const LCTexture tex3d;
};

struct LCBindlessArray {
    const LCBindlessItem *uniform items;
};

#define bindless_buffer_read(type, array, buffer_id, index) \
    (((const type *uniform)((array).items[buffer_id].buffer))[index])

#ifdef LC_ISPC_RAYTRACING

#include <embree3/rtcore.isph>

inline bool trace_any(uniform LCAccel accel, LCRay ray) {
    uniform RTCIntersectContext ctx;
    rtcInitIntersectContext(&ctx);
    RTCRay r;
    r.org_x = ray.m0.a[0];
    r.org_y = ray.m0.a[1];
    r.org_z = ray.m0.a[2];
    r.tnear = ray.m1;
    r.dir_x = ray.m2.a[0];
    r.dir_y = ray.m2.a[1];
    r.dir_z = ray.m2.a[2];
    r.time = 0.f;
    r.tfar = ray.m3;
    r.mask = 0xffu;
    r.id = 0u;
    r.flags = 0u;
    rtcOccludedV((RTCScene)accel.handle, &ctx, &r);
    return r.tfar < 0.f;
}

inline LCHit trace_closest(uniform LCAccel accel, LCRay ray) {
    uniform RTCIntersectContext ctx;
    rtcInitIntersectContext(&ctx);
    RTCRayHit rh;
    rh.ray.org_x = ray.m0.a[0];
    rh.ray.org_y = ray.m0.a[1];
    rh.ray.org_z = ray.m0.a[2];
    rh.ray.tnear = ray.m1;
    rh.ray.dir_x = ray.m2.a[0];
    rh.ray.dir_y = ray.m2.a[1];
    rh.ray.dir_z = ray.m2.a[2];
    rh.ray.time = 0.f;
    rh.ray.tfar = ray.m3;
    rh.ray.mask = 0xffu;
    rh.ray.id = 0u;
    rh.ray.flags = 0u;
    rh.hit.geomID = RTC_INVALID_GEOMETRY_ID;
    rh.hit.primID = RTC_INVALID_GEOMETRY_ID;
    rtcIntersectV((RTCScene)accel.handle, &ctx, &rh);
    LCHit hit;
    hit.m0 = rh.hit.geomID;
    hit.m1 = rh.hit.primID;
    hit.m2.v[0] = rh.hit.u;
    hit.m2.v[1] = rh.hit.v;
    return hit;
}

#endif
