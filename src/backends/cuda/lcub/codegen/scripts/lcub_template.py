class template:
    def __init__(self, web_page = "https://nvlabs.github.io/cub/index.html"):
        self.header_template = '''// This file is generated by $FILE_NAME$.py
#pragma once
#include <luisa/core/dll_export.h> // for LC_BACKEND_API
#include <luisa/backends/ext/cuda/lcub/dcub/dcub_common.h>
#include <luisa/backends/ext/cuda/lcub/cuda_lcub_command.h>

namespace luisa::compute::cuda::lcub{
// DOC:  $WEBPAGE$
class LC_BACKEND_API $CLASS_NAME${
template<typename T>
using BufferView = luisa::compute::BufferView<T>;
using UCommand = luisa::unique_ptr<luisa::compute::cuda::CudaLCubCommand>;
public:
$FUNC_SIGS$
};
}'''.replace('$WEBPAGE$', web_page)

        self.src_template = ''' // This file is generated by $FILE_NAME$.py
#include <luisa/backends/ext/cuda/lcub/$FILE_NAME$.h>
#include "private/lcub_utils.h"
#include "private/dcub/$FILE_NAME$.h"

namespace luisa::compute::cuda::lcub{
// DOC:  $WEBPAGE$
$FUNC_IMPLS$
}
'''.replace('$WEBPAGE$', web_page)
        
        self.func_sig_template = '''
static void $FUNC_NAME$(size_t &temp_storage_size, $FUNC_SIG_ARGS$) noexcept;
static UCommand $FUNC_NAME$(BufferView<int> d_temp_storage, $FUNC_SIG_ARGS$) noexcept;
'''
        self.func_impl_template ='''
void $CLASS_NAME$::$FUNC_NAME$(size_t &temp_storage_size, $FUNC_IMPL_ARGS$) noexcept {
    using namespace details;
    inner(temp_storage_size, [&](size_t& temp_storage_bytes) {
    return dcub::$CLASS_NAME$::$FUNC_NAME$(nullptr, raw(temp_storage_bytes), $INNER_FUNC_INPUT_ARGS$, nullptr);
    });
}

$CLASS_NAME$::UCommand $CLASS_NAME$::$FUNC_NAME$(BufferView<int> d_temp_storage, $FUNC_IMPL_ARGS$) noexcept {
    using namespace details;
    return luisa::make_unique<luisa::compute::cuda::CudaLCubCommand>([=](cudaStream_t stream) {
        inner(d_temp_storage, [&](size_t& temp_storage_bytes) {
            return dcub::$CLASS_NAME$::$FUNC_NAME$(raw(d_temp_storage), raw(temp_storage_bytes), $INNER_FUNC_INPUT_ARGS$, raw(stream));
        });
    });
}'''