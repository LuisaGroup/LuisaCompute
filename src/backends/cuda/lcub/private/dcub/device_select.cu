 // This file is generated by device_select.py
#include "device_select.h"
#include "dcub_utils.cuh"
#include <cub/device/device_select.cuh>

namespace luisa::compute::cuda::dcub {
// DOC:  https://nvlabs.github.io/cub/structcub_1_1_device_select.html
cudaError_t DeviceSelect::Flagged(void* d_temp_storage, size_t& temp_storage_bytes, const int32_t*  d_in, const int32_t*  d_flags, int32_t*  d_out, int32_t*  d_num_selected_out, int  num_items, cudaStream_t stream)
{
    return ::cub::DeviceSelect::Flagged(d_temp_storage, temp_storage_bytes, d_in, d_flags, d_out, d_num_selected_out, num_items, stream);
}

cudaError_t DeviceSelect::Flagged(void* d_temp_storage, size_t& temp_storage_bytes, const uint32_t*  d_in, const int32_t*  d_flags, uint32_t*  d_out, int32_t*  d_num_selected_out, int  num_items, cudaStream_t stream)
{
    return ::cub::DeviceSelect::Flagged(d_temp_storage, temp_storage_bytes, d_in, d_flags, d_out, d_num_selected_out, num_items, stream);
}

cudaError_t DeviceSelect::Flagged(void* d_temp_storage, size_t& temp_storage_bytes, const int64_t*  d_in, const int32_t*  d_flags, int64_t*  d_out, int32_t*  d_num_selected_out, int  num_items, cudaStream_t stream)
{
    return ::cub::DeviceSelect::Flagged(d_temp_storage, temp_storage_bytes, d_in, d_flags, d_out, d_num_selected_out, num_items, stream);
}

cudaError_t DeviceSelect::Flagged(void* d_temp_storage, size_t& temp_storage_bytes, const uint64_t*  d_in, const int32_t*  d_flags, uint64_t*  d_out, int32_t*  d_num_selected_out, int  num_items, cudaStream_t stream)
{
    return ::cub::DeviceSelect::Flagged(d_temp_storage, temp_storage_bytes, d_in, d_flags, d_out, d_num_selected_out, num_items, stream);
}

cudaError_t DeviceSelect::Flagged(void* d_temp_storage, size_t& temp_storage_bytes, const float*  d_in, const int32_t*  d_flags, float*  d_out, int32_t*  d_num_selected_out, int  num_items, cudaStream_t stream)
{
    return ::cub::DeviceSelect::Flagged(d_temp_storage, temp_storage_bytes, d_in, d_flags, d_out, d_num_selected_out, num_items, stream);
}

cudaError_t DeviceSelect::Flagged(void* d_temp_storage, size_t& temp_storage_bytes, const double*  d_in, const int32_t*  d_flags, double*  d_out, int32_t*  d_num_selected_out, int  num_items, cudaStream_t stream)
{
    return ::cub::DeviceSelect::Flagged(d_temp_storage, temp_storage_bytes, d_in, d_flags, d_out, d_num_selected_out, num_items, stream);
}

cudaError_t DeviceSelect::Unique(void* d_temp_storage, size_t& temp_storage_bytes, const int32_t*  d_in, int32_t*  d_out, int32_t*  d_num_selected_out, int  num_items, cudaStream_t stream)
{
    return ::cub::DeviceSelect::Unique(d_temp_storage, temp_storage_bytes, d_in, d_out, d_num_selected_out, num_items, stream);
}
}
