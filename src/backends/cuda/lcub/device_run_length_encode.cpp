 // This file is generated by device_run_length_encode.py
#include <luisa/backends/ext/cuda/lcub/device_run_length_encode.h>
#include "private/lcub_utils.h"
#include "private/dcub/device_run_length_encode.h"

namespace luisa::compute::cuda::lcub{
// DOC:  https://nvlabs.github.io/cub/structcub_1_1_device_run_length_encode.html

void DeviceRunLengthEncode::Encode(size_t &temp_storage_size, BufferView<int32_t>  d_in, BufferView<int32_t>  d_unique_out, BufferView<int32_t>  d_counts_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    inner(temp_storage_size, [&](size_t& temp_storage_bytes) {
    return dcub::DeviceRunLengthEncode::Encode(nullptr, raw(temp_storage_bytes), raw(d_in), raw(d_unique_out), raw(d_counts_out), raw(d_num_runs_out), raw(num_items), nullptr);
    });
}

DeviceRunLengthEncode::UCommand DeviceRunLengthEncode::Encode(BufferView<int> d_temp_storage, BufferView<int32_t>  d_in, BufferView<int32_t>  d_unique_out, BufferView<int32_t>  d_counts_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    return luisa::make_unique<luisa::compute::cuda::CudaLCubCommand>([=](cudaStream_t stream) {
        inner(d_temp_storage, [&](size_t& temp_storage_bytes) {
            return dcub::DeviceRunLengthEncode::Encode(raw(d_temp_storage), raw(temp_storage_bytes), raw(d_in), raw(d_unique_out), raw(d_counts_out), raw(d_num_runs_out), raw(num_items), raw(stream));
        });
    });
}


void DeviceRunLengthEncode::Encode(size_t &temp_storage_size, BufferView<uint32_t>  d_in, BufferView<uint32_t>  d_unique_out, BufferView<int32_t>  d_counts_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    inner(temp_storage_size, [&](size_t& temp_storage_bytes) {
    return dcub::DeviceRunLengthEncode::Encode(nullptr, raw(temp_storage_bytes), raw(d_in), raw(d_unique_out), raw(d_counts_out), raw(d_num_runs_out), raw(num_items), nullptr);
    });
}

DeviceRunLengthEncode::UCommand DeviceRunLengthEncode::Encode(BufferView<int> d_temp_storage, BufferView<uint32_t>  d_in, BufferView<uint32_t>  d_unique_out, BufferView<int32_t>  d_counts_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    return luisa::make_unique<luisa::compute::cuda::CudaLCubCommand>([=](cudaStream_t stream) {
        inner(d_temp_storage, [&](size_t& temp_storage_bytes) {
            return dcub::DeviceRunLengthEncode::Encode(raw(d_temp_storage), raw(temp_storage_bytes), raw(d_in), raw(d_unique_out), raw(d_counts_out), raw(d_num_runs_out), raw(num_items), raw(stream));
        });
    });
}


void DeviceRunLengthEncode::Encode(size_t &temp_storage_size, BufferView<int64_t>  d_in, BufferView<int64_t>  d_unique_out, BufferView<int32_t>  d_counts_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    inner(temp_storage_size, [&](size_t& temp_storage_bytes) {
    return dcub::DeviceRunLengthEncode::Encode(nullptr, raw(temp_storage_bytes), raw(d_in), raw(d_unique_out), raw(d_counts_out), raw(d_num_runs_out), raw(num_items), nullptr);
    });
}

DeviceRunLengthEncode::UCommand DeviceRunLengthEncode::Encode(BufferView<int> d_temp_storage, BufferView<int64_t>  d_in, BufferView<int64_t>  d_unique_out, BufferView<int32_t>  d_counts_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    return luisa::make_unique<luisa::compute::cuda::CudaLCubCommand>([=](cudaStream_t stream) {
        inner(d_temp_storage, [&](size_t& temp_storage_bytes) {
            return dcub::DeviceRunLengthEncode::Encode(raw(d_temp_storage), raw(temp_storage_bytes), raw(d_in), raw(d_unique_out), raw(d_counts_out), raw(d_num_runs_out), raw(num_items), raw(stream));
        });
    });
}


void DeviceRunLengthEncode::Encode(size_t &temp_storage_size, BufferView<uint64_t>  d_in, BufferView<uint64_t>  d_unique_out, BufferView<int32_t>  d_counts_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    inner(temp_storage_size, [&](size_t& temp_storage_bytes) {
    return dcub::DeviceRunLengthEncode::Encode(nullptr, raw(temp_storage_bytes), raw(d_in), raw(d_unique_out), raw(d_counts_out), raw(d_num_runs_out), raw(num_items), nullptr);
    });
}

DeviceRunLengthEncode::UCommand DeviceRunLengthEncode::Encode(BufferView<int> d_temp_storage, BufferView<uint64_t>  d_in, BufferView<uint64_t>  d_unique_out, BufferView<int32_t>  d_counts_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    return luisa::make_unique<luisa::compute::cuda::CudaLCubCommand>([=](cudaStream_t stream) {
        inner(d_temp_storage, [&](size_t& temp_storage_bytes) {
            return dcub::DeviceRunLengthEncode::Encode(raw(d_temp_storage), raw(temp_storage_bytes), raw(d_in), raw(d_unique_out), raw(d_counts_out), raw(d_num_runs_out), raw(num_items), raw(stream));
        });
    });
}


void DeviceRunLengthEncode::NonTrivialRuns(size_t &temp_storage_size, BufferView<int32_t>  d_in, BufferView<int32_t>  d_offsets_out, BufferView<int32_t>  d_lengths_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    inner(temp_storage_size, [&](size_t& temp_storage_bytes) {
    return dcub::DeviceRunLengthEncode::NonTrivialRuns(nullptr, raw(temp_storage_bytes), raw(d_in), raw(d_offsets_out), raw(d_lengths_out), raw(d_num_runs_out), raw(num_items), nullptr);
    });
}

DeviceRunLengthEncode::UCommand DeviceRunLengthEncode::NonTrivialRuns(BufferView<int> d_temp_storage, BufferView<int32_t>  d_in, BufferView<int32_t>  d_offsets_out, BufferView<int32_t>  d_lengths_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    return luisa::make_unique<luisa::compute::cuda::CudaLCubCommand>([=](cudaStream_t stream) {
        inner(d_temp_storage, [&](size_t& temp_storage_bytes) {
            return dcub::DeviceRunLengthEncode::NonTrivialRuns(raw(d_temp_storage), raw(temp_storage_bytes), raw(d_in), raw(d_offsets_out), raw(d_lengths_out), raw(d_num_runs_out), raw(num_items), raw(stream));
        });
    });
}


void DeviceRunLengthEncode::NonTrivialRuns(size_t &temp_storage_size, BufferView<uint32_t>  d_in, BufferView<int32_t>  d_offsets_out, BufferView<int32_t>  d_lengths_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    inner(temp_storage_size, [&](size_t& temp_storage_bytes) {
    return dcub::DeviceRunLengthEncode::NonTrivialRuns(nullptr, raw(temp_storage_bytes), raw(d_in), raw(d_offsets_out), raw(d_lengths_out), raw(d_num_runs_out), raw(num_items), nullptr);
    });
}

DeviceRunLengthEncode::UCommand DeviceRunLengthEncode::NonTrivialRuns(BufferView<int> d_temp_storage, BufferView<uint32_t>  d_in, BufferView<int32_t>  d_offsets_out, BufferView<int32_t>  d_lengths_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    return luisa::make_unique<luisa::compute::cuda::CudaLCubCommand>([=](cudaStream_t stream) {
        inner(d_temp_storage, [&](size_t& temp_storage_bytes) {
            return dcub::DeviceRunLengthEncode::NonTrivialRuns(raw(d_temp_storage), raw(temp_storage_bytes), raw(d_in), raw(d_offsets_out), raw(d_lengths_out), raw(d_num_runs_out), raw(num_items), raw(stream));
        });
    });
}


void DeviceRunLengthEncode::NonTrivialRuns(size_t &temp_storage_size, BufferView<int64_t>  d_in, BufferView<int32_t>  d_offsets_out, BufferView<int32_t>  d_lengths_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    inner(temp_storage_size, [&](size_t& temp_storage_bytes) {
    return dcub::DeviceRunLengthEncode::NonTrivialRuns(nullptr, raw(temp_storage_bytes), raw(d_in), raw(d_offsets_out), raw(d_lengths_out), raw(d_num_runs_out), raw(num_items), nullptr);
    });
}

DeviceRunLengthEncode::UCommand DeviceRunLengthEncode::NonTrivialRuns(BufferView<int> d_temp_storage, BufferView<int64_t>  d_in, BufferView<int32_t>  d_offsets_out, BufferView<int32_t>  d_lengths_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    return luisa::make_unique<luisa::compute::cuda::CudaLCubCommand>([=](cudaStream_t stream) {
        inner(d_temp_storage, [&](size_t& temp_storage_bytes) {
            return dcub::DeviceRunLengthEncode::NonTrivialRuns(raw(d_temp_storage), raw(temp_storage_bytes), raw(d_in), raw(d_offsets_out), raw(d_lengths_out), raw(d_num_runs_out), raw(num_items), raw(stream));
        });
    });
}


void DeviceRunLengthEncode::NonTrivialRuns(size_t &temp_storage_size, BufferView<uint64_t>  d_in, BufferView<int32_t>  d_offsets_out, BufferView<int32_t>  d_lengths_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    inner(temp_storage_size, [&](size_t& temp_storage_bytes) {
    return dcub::DeviceRunLengthEncode::NonTrivialRuns(nullptr, raw(temp_storage_bytes), raw(d_in), raw(d_offsets_out), raw(d_lengths_out), raw(d_num_runs_out), raw(num_items), nullptr);
    });
}

DeviceRunLengthEncode::UCommand DeviceRunLengthEncode::NonTrivialRuns(BufferView<int> d_temp_storage, BufferView<uint64_t>  d_in, BufferView<int32_t>  d_offsets_out, BufferView<int32_t>  d_lengths_out, BufferView<int32_t>  d_num_runs_out, int  num_items) noexcept {
    using namespace details;
    return luisa::make_unique<luisa::compute::cuda::CudaLCubCommand>([=](cudaStream_t stream) {
        inner(d_temp_storage, [&](size_t& temp_storage_bytes) {
            return dcub::DeviceRunLengthEncode::NonTrivialRuns(raw(d_temp_storage), raw(temp_storage_bytes), raw(d_in), raw(d_offsets_out), raw(d_lengths_out), raw(d_num_runs_out), raw(num_items), raw(stream));
        });
    });
}
}
