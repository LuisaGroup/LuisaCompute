typedef int<2> int2;
typedef int<3> int3;
typedef int<4> int4;
typedef uint<2> uint2;
typedef uint<3> uint3;
typedef uint<4> uint4;
typedef float<2> float2;
typedef float<3> float3;
typedef float<4> float4;
typedef bool<2> bool2;
typedef bool<3> bool3;
typedef bool<4> bool4;

inline uniform int2 make_int2() {
    uniform int2 v;
    v.x = v.y = 0;
    return v;
}
inline uniform int3 make_int3() {
    uniform int3 v;
    v.x = v.y = v.z = 0;
    return v;
}
inline uniform int4 make_int4() {
    uniform int4 v;
    v.x = v.y = v.z = v.w = 0;
    return v;
}

inline uniform uint2 make_uint2() {
    uniform uint2 v;
    v.x = v.y = 0;
    return v;
}
inline uniform uint3 make_uint3() {
    uniform uint3 v;
    v.x = v.y = v.z = 0;
    return v;
}
inline uniform uint4 make_uint4() {
    uniform uint4 v;
    v.x = v.y = v.z = v.w = 0;
    return v;
}

inline uniform float2 make_float2() {
    uniform float2 v;
    v.x = v.y = 0;
    return v;
}
inline uniform float3 make_float3() {
    uniform float3 v;
    v.x = v.y = v.z = 0;
    return v;
}
inline uniform float4 make_float4() {
    uniform float4 v;
    v.x = v.y = v.z = v.w = 0;
    return v;
}

inline uniform bool2 make_bool2() {
    uniform bool2 v;
    v.x = v.y = 0;
    return v;
}
inline uniform bool3 make_bool3() {
    uniform bool3 v;
    v.x = v.y = v.z = 0;
    return v;
}
inline uniform bool4 make_bool4() {
    uniform bool4 v;
    v.x = v.y = v.z = v.w = 0;
    return v;
}

// make_int2 functions
inline int2 make_int2(int s) {
    int2 v;
    v.x = v.y = s;
    return v;
}
inline int2 make_int2(int x, int y) {
    int2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline int2 make_int2(int2 v) {
    return v;
}
inline int2 make_int2(int3 v) {
    int2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline int2 make_int2(int4 v) {
    int2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_int3 functions
inline int3 make_int3(int s) {
    int3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline int3 make_int3(int x, int y, int z) {
    int3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline int3 make_int3(int x, int2 yz) {
    int3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline int3 make_int3(int2 xy, int z) {
    int3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline int3 make_int3(int3 v) {
    return v;
}
inline int3 make_int3(int4 v) {
    int3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_int4 functions
inline int4 make_int4(int s) {
    int4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline int4 make_int4(int x, int y, int z, int w) {
    int4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline int4 make_int4(int x, int y, int2 zw) {
    int4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline int4 make_int4(int x, int2 yz, int w) {
    int4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline int4 make_int4(int2 xy, int z, int w) {
    int4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline int4 make_int4(int2 xy, int2 zw) {
    int4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline int4 make_int4(int x, int3 yzw) {
    int4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline int4 make_int4(int3 xyz, int w) {
    int4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline int4 make_int4(int4 v) {
    return v;
}

// make_int2 functions
inline uniform int2 make_int2(uniform int s) {
    uniform int2 v;
    v.x = v.y = s;
    return v;
}
inline uniform int2 make_int2(uniform int x, uniform int y) {
    uniform int2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline uniform int2 make_int2(uniform int2 v) {
    return v;
}
inline uniform int2 make_int2(uniform int3 v) {
    uniform int2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline uniform int2 make_int2(uniform int4 v) {
    uniform int2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_int3 functions
inline uniform int3 make_int3(uniform int s) {
    uniform int3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline uniform int3 make_int3(uniform int x, uniform int y, uniform int z) {
    uniform int3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline uniform int3 make_int3(uniform int x, uniform int2 yz) {
    uniform int3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline uniform int3 make_int3(uniform int2 xy, uniform int z) {
    uniform int3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline uniform int3 make_int3(uniform int3 v) {
    return v;
}
inline uniform int3 make_int3(uniform int4 v) {
    uniform int3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_int4 functions
inline uniform int4 make_int4(uniform int s) {
    uniform int4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int y, uniform int z, uniform int w) {
    uniform int4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int y, uniform int2 zw) {
    uniform int4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int2 yz, uniform int w) {
    uniform int4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline uniform int4 make_int4(uniform int2 xy, uniform int z, uniform int w) {
    uniform int4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform int4 make_int4(uniform int2 xy, uniform int2 zw) {
    uniform int4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int3 yzw) {
    uniform int4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline uniform int4 make_int4(uniform int3 xyz, uniform int w) {
    uniform int4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline uniform int4 make_int4(uniform int4 v) {
    return v;
}

// make_uint2 functions
inline uint2 make_uint2(uint s) {
    uint2 v;
    v.x = v.y = s;
    return v;
}
inline uint2 make_uint2(uint x, uint y) {
    uint2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline uint2 make_uint2(uint2 v) {
    return v;
}
inline uint2 make_uint2(uint3 v) {
    uint2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline uint2 make_uint2(uint4 v) {
    uint2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_uint3 functions
inline uint3 make_uint3(uint s) {
    uint3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline uint3 make_uint3(uint x, uint y, uint z) {
    uint3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline uint3 make_uint3(uint x, uint2 yz) {
    uint3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline uint3 make_uint3(uint2 xy, uint z) {
    uint3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline uint3 make_uint3(uint3 v) {
    return v;
}
inline uint3 make_uint3(uint4 v) {
    uint3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_uint4 functions
inline uint4 make_uint4(uint s) {
    uint4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline uint4 make_uint4(uint x, uint y, uint z, uint w) {
    uint4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline uint4 make_uint4(uint x, uint y, uint2 zw) {
    uint4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uint4 make_uint4(uint x, uint2 yz, uint w) {
    uint4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline uint4 make_uint4(uint2 xy, uint z, uint w) {
    uint4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline uint4 make_uint4(uint2 xy, uint2 zw) {
    uint4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uint4 make_uint4(uint x, uint3 yzw) {
    uint4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline uint4 make_uint4(uint3 xyz, uint w) {
    uint4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline uint4 make_uint4(uint4 v) {
    return v;
}

// make_uint2 functions
inline uniform uint2 make_uint2(uniform uint s) {
    uniform uint2 v;
    v.x = v.y = s;
    return v;
}
inline uniform uint2 make_uint2(uniform uint x, uniform uint y) {
    uniform uint2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline uniform uint2 make_uint2(uniform uint2 v) {
    return v;
}
inline uniform uint2 make_uint2(uniform uint3 v) {
    uniform uint2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform uint4 v) {
    uniform uint2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_uint3 functions
inline uniform uint3 make_uint3(uniform uint s) {
    uniform uint3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline uniform uint3 make_uint3(uniform uint x, uniform uint y, uniform uint z) {
    uniform uint3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline uniform uint3 make_uint3(uniform uint x, uniform uint2 yz) {
    uniform uint3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline uniform uint3 make_uint3(uniform uint2 xy, uniform uint z) {
    uniform uint3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline uniform uint3 make_uint3(uniform uint3 v) {
    return v;
}
inline uniform uint3 make_uint3(uniform uint4 v) {
    uniform uint3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_uint4 functions
inline uniform uint4 make_uint4(uniform uint s) {
    uniform uint4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint y, uniform uint z, uniform uint w) {
    uniform uint4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint y, uniform uint2 zw) {
    uniform uint4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint2 yz, uniform uint w) {
    uniform uint4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint2 xy, uniform uint z, uniform uint w) {
    uniform uint4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint2 xy, uniform uint2 zw) {
    uniform uint4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint3 yzw) {
    uniform uint4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline uniform uint4 make_uint4(uniform uint3 xyz, uniform uint w) {
    uniform uint4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint4 v) {
    return v;
}

// make_float2 functions
inline float2 make_float2(float s) {
    float2 v;
    v.x = v.y = s;
    return v;
}
inline float2 make_float2(float x, float y) {
    float2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline float2 make_float2(float2 v) {
    return v;
}
inline float2 make_float2(float3 v) {
    float2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline float2 make_float2(float4 v) {
    float2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_float3 functions
inline float3 make_float3(float s) {
    float3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline float3 make_float3(float x, float y, float z) {
    float3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline float3 make_float3(float x, float2 yz) {
    float3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline float3 make_float3(float2 xy, float z) {
    float3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline float3 make_float3(float3 v) {
    return v;
}
inline float3 make_float3(float4 v) {
    float3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_float4 functions
inline float4 make_float4(float s) {
    float4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline float4 make_float4(float x, float y, float z, float w) {
    float4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline float4 make_float4(float x, float y, float2 zw) {
    float4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline float4 make_float4(float x, float2 yz, float w) {
    float4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline float4 make_float4(float2 xy, float z, float w) {
    float4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline float4 make_float4(float2 xy, float2 zw) {
    float4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline float4 make_float4(float x, float3 yzw) {
    float4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline float4 make_float4(float3 xyz, float w) {
    float4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline float4 make_float4(float4 v) {
    return v;
}

// make_float2 functions
inline uniform float2 make_float2(uniform float s) {
    uniform float2 v;
    v.x = v.y = s;
    return v;
}
inline uniform float2 make_float2(uniform float x, uniform float y) {
    uniform float2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline uniform float2 make_float2(uniform float2 v) {
    return v;
}
inline uniform float2 make_float2(uniform float3 v) {
    uniform float2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline uniform float2 make_float2(uniform float4 v) {
    uniform float2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_float3 functions
inline uniform float3 make_float3(uniform float s) {
    uniform float3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline uniform float3 make_float3(uniform float x, uniform float y, uniform float z) {
    uniform float3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline uniform float3 make_float3(uniform float x, uniform float2 yz) {
    uniform float3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline uniform float3 make_float3(uniform float2 xy, uniform float z) {
    uniform float3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline uniform float3 make_float3(uniform float3 v) {
    return v;
}
inline uniform float3 make_float3(uniform float4 v) {
    uniform float3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_float4 functions
inline uniform float4 make_float4(uniform float s) {
    uniform float4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float y, uniform float z, uniform float w) {
    uniform float4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float y, uniform float2 zw) {
    uniform float4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float2 yz, uniform float w) {
    uniform float4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline uniform float4 make_float4(uniform float2 xy, uniform float z, uniform float w) {
    uniform float4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform float4 make_float4(uniform float2 xy, uniform float2 zw) {
    uniform float4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float3 yzw) {
    uniform float4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline uniform float4 make_float4(uniform float3 xyz, uniform float w) {
    uniform float4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline uniform float4 make_float4(uniform float4 v) {
    return v;
}

// make_bool2 functions
inline bool2 make_bool2(bool s) {
    bool2 v;
    v.x = v.y = s;
    return v;
}
inline bool2 make_bool2(bool x, bool y) {
    bool2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline bool2 make_bool2(bool2 v) {
    return v;
}
inline bool2 make_bool2(bool3 v) {
    bool2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline bool2 make_bool2(bool4 v) {
    bool2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_bool3 functions
inline bool3 make_bool3(bool s) {
    bool3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline bool3 make_bool3(bool x, bool y, bool z) {
    bool3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline bool3 make_bool3(bool x, bool2 yz) {
    bool3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline bool3 make_bool3(bool2 xy, bool z) {
    bool3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline bool3 make_bool3(bool3 v) {
    return v;
}
inline bool3 make_bool3(bool4 v) {
    bool3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_bool4 functions
inline bool4 make_bool4(bool s) {
    bool4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline bool4 make_bool4(bool x, bool y, bool z, bool w) {
    bool4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline bool4 make_bool4(bool x, bool y, bool2 zw) {
    bool4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline bool4 make_bool4(bool x, bool2 yz, bool w) {
    bool4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline bool4 make_bool4(bool2 xy, bool z, bool w) {
    bool4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline bool4 make_bool4(bool2 xy, bool2 zw) {
    bool4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline bool4 make_bool4(bool x, bool3 yzw) {
    bool4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline bool4 make_bool4(bool3 xyz, bool w) {
    bool4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline bool4 make_bool4(bool4 v) {
    return v;
}

// make_bool2 functions
inline uniform bool2 make_bool2(uniform bool s) {
    uniform bool2 v;
    v.x = v.y = s;
    return v;
}
inline uniform bool2 make_bool2(uniform bool x, uniform bool y) {
    uniform bool2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline uniform bool2 make_bool2(uniform bool2 v) {
    return v;
}
inline uniform bool2 make_bool2(uniform bool3 v) {
    uniform bool2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform bool4 v) {
    uniform bool2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_bool3 functions
inline uniform bool3 make_bool3(uniform bool s) {
    uniform bool3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline uniform bool3 make_bool3(uniform bool x, uniform bool y, uniform bool z) {
    uniform bool3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline uniform bool3 make_bool3(uniform bool x, uniform bool2 yz) {
    uniform bool3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline uniform bool3 make_bool3(uniform bool2 xy, uniform bool z) {
    uniform bool3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline uniform bool3 make_bool3(uniform bool3 v) {
    return v;
}
inline uniform bool3 make_bool3(uniform bool4 v) {
    uniform bool3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_bool4 functions
inline uniform bool4 make_bool4(uniform bool s) {
    uniform bool4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool y, uniform bool z, uniform bool w) {
    uniform bool4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool y, uniform bool2 zw) {
    uniform bool4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool2 yz, uniform bool w) {
    uniform bool4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool2 xy, uniform bool z, uniform bool w) {
    uniform bool4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool2 xy, uniform bool2 zw) {
    uniform bool4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool3 yzw) {
    uniform bool4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline uniform bool4 make_bool4(uniform bool3 xyz, uniform bool w) {
    uniform bool4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool4 v) {
    return v;
}

// conversions
inline int2 make_int2(uint2 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(uint3 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(uint4 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int3 make_int3(uint3 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int3 make_int3(uint4 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int4 make_int4(uint4 v) {
    int4 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    u.w = (int)v.w;
    return u;
}

// conversions
inline uniform int2 make_int2(uniform uint2 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform uint3 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform uint4 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int3 make_int3(uniform uint3 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int3 make_int3(uniform uint4 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int4 make_int4(uniform uint4 v) {
    uniform int4 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    u.w = (uniform int)v.w;
    return u;
}

// conversions
inline int2 make_int2(float2 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(float3 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(float4 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int3 make_int3(float3 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int3 make_int3(float4 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int4 make_int4(float4 v) {
    int4 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    u.w = (int)v.w;
    return u;
}

// conversions
inline uniform int2 make_int2(uniform float2 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform float3 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform float4 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int3 make_int3(uniform float3 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int3 make_int3(uniform float4 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int4 make_int4(uniform float4 v) {
    uniform int4 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    u.w = (uniform int)v.w;
    return u;
}

// conversions
inline int2 make_int2(bool2 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(bool3 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(bool4 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int3 make_int3(bool3 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int3 make_int3(bool4 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int4 make_int4(bool4 v) {
    int4 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    u.w = (int)v.w;
    return u;
}

// conversions
inline uniform int2 make_int2(uniform bool2 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform bool3 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform bool4 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int3 make_int3(uniform bool3 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int3 make_int3(uniform bool4 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int4 make_int4(uniform bool4 v) {
    uniform int4 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    u.w = (uniform int)v.w;
    return u;
}

// conversions
inline uint2 make_uint2(int2 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(int3 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(int4 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint3 make_uint3(int3 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint3 make_uint3(int4 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint4 make_uint4(int4 v) {
    uint4 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    u.w = (uint)v.w;
    return u;
}

// conversions
inline uniform uint2 make_uint2(uniform int2 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform int3 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform int4 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint3 make_uint3(uniform int3 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint3 make_uint3(uniform int4 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint4 make_uint4(uniform int4 v) {
    uniform uint4 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    u.w = (uniform uint)v.w;
    return u;
}

// conversions
inline uint2 make_uint2(float2 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(float3 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(float4 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint3 make_uint3(float3 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint3 make_uint3(float4 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint4 make_uint4(float4 v) {
    uint4 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    u.w = (uint)v.w;
    return u;
}

// conversions
inline uniform uint2 make_uint2(uniform float2 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform float3 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform float4 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint3 make_uint3(uniform float3 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint3 make_uint3(uniform float4 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint4 make_uint4(uniform float4 v) {
    uniform uint4 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    u.w = (uniform uint)v.w;
    return u;
}

// conversions
inline uint2 make_uint2(bool2 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(bool3 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(bool4 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint3 make_uint3(bool3 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint3 make_uint3(bool4 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint4 make_uint4(bool4 v) {
    uint4 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    u.w = (uint)v.w;
    return u;
}

// conversions
inline uniform uint2 make_uint2(uniform bool2 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform bool3 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform bool4 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint3 make_uint3(uniform bool3 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint3 make_uint3(uniform bool4 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint4 make_uint4(uniform bool4 v) {
    uniform uint4 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    u.w = (uniform uint)v.w;
    return u;
}

// conversions
inline float2 make_float2(int2 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(int3 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(int4 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float3 make_float3(int3 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float3 make_float3(int4 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float4 make_float4(int4 v) {
    float4 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    u.w = (float)v.w;
    return u;
}

// conversions
inline uniform float2 make_float2(uniform int2 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform int3 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform int4 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float3 make_float3(uniform int3 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float3 make_float3(uniform int4 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float4 make_float4(uniform int4 v) {
    uniform float4 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    u.w = (uniform float)v.w;
    return u;
}

// conversions
inline float2 make_float2(uint2 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(uint3 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(uint4 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float3 make_float3(uint3 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float3 make_float3(uint4 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float4 make_float4(uint4 v) {
    float4 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    u.w = (float)v.w;
    return u;
}

// conversions
inline uniform float2 make_float2(uniform uint2 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform uint3 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform uint4 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float3 make_float3(uniform uint3 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float3 make_float3(uniform uint4 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float4 make_float4(uniform uint4 v) {
    uniform float4 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    u.w = (uniform float)v.w;
    return u;
}

// conversions
inline float2 make_float2(bool2 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(bool3 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(bool4 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float3 make_float3(bool3 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float3 make_float3(bool4 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float4 make_float4(bool4 v) {
    float4 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    u.w = (float)v.w;
    return u;
}

// conversions
inline uniform float2 make_float2(uniform bool2 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform bool3 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform bool4 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float3 make_float3(uniform bool3 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float3 make_float3(uniform bool4 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float4 make_float4(uniform bool4 v) {
    uniform float4 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    u.w = (uniform float)v.w;
    return u;
}

// conversions
inline bool2 make_bool2(int2 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(int3 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(int4 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool3 make_bool3(int3 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool3 make_bool3(int4 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool4 make_bool4(int4 v) {
    bool4 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    u.w = (bool)v.w;
    return u;
}

// conversions
inline uniform bool2 make_bool2(uniform int2 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform int3 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform int4 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool3 make_bool3(uniform int3 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool3 make_bool3(uniform int4 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool4 make_bool4(uniform int4 v) {
    uniform bool4 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    u.w = (uniform bool)v.w;
    return u;
}

// conversions
inline bool2 make_bool2(uint2 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(uint3 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(uint4 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool3 make_bool3(uint3 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool3 make_bool3(uint4 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool4 make_bool4(uint4 v) {
    bool4 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    u.w = (bool)v.w;
    return u;
}

// conversions
inline uniform bool2 make_bool2(uniform uint2 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform uint3 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform uint4 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool3 make_bool3(uniform uint3 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool3 make_bool3(uniform uint4 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool4 make_bool4(uniform uint4 v) {
    uniform bool4 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    u.w = (uniform bool)v.w;
    return u;
}

// conversions
inline bool2 make_bool2(float2 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(float3 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(float4 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool3 make_bool3(float3 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool3 make_bool3(float4 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool4 make_bool4(float4 v) {
    bool4 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    u.w = (bool)v.w;
    return u;
}

// conversions
inline uniform bool2 make_bool2(uniform float2 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform float3 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform float4 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool3 make_bool3(uniform float3 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool3 make_bool3(uniform float4 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool4 make_bool4(uniform float4 v) {
    uniform bool4 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    u.w = (uniform bool)v.w;
    return u;
}

inline bool unary_not(int s) { return !s; }
inline uniform bool unary_not(uniform int s) { return !s; }
inline int unary_plus(int s) { return +s; }
inline int unary_minus(int s) { return -s; }
inline uniform int unary_plus(uniform int s) { return +s; }
inline uniform int unary_minus(uniform int s) { return -s; }
inline int unary_bit_not(int s) { return ~s; }
inline uniform int unary_bit_not(uniform int s) { return ~s; }
inline bool2 unary_not(int2 v) { return make_bool2(!v.x, !v.y); }
inline uniform bool2 unary_not(uniform int2 v) { return make_bool2(!v.x, !v.y); }
inline int2 unary_plus(int2 v) { return make_int2(+v.x, +v.y); }
inline int2 unary_minus(int2 v) { return make_int2(-v.x, -v.y); }
inline uniform int2 unary_plus(uniform int2 v) { return make_int2(+v.x, +v.y); }
inline uniform int2 unary_minus(uniform int2 v) { return make_int2(-v.x, -v.y); }
inline int2 unary_bit_not(int2 v) { return make_int2(~v.x, ~v.y); }
inline int2 unary_bit_not(uniform int2 v) { return make_int2(~v.x, ~v.y); }
inline bool3 unary_not(int3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline uniform bool3 unary_not(uniform int3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline int3 unary_plus(int3 v) { return make_int3(+v.x, +v.y, +v.z); }
inline int3 unary_minus(int3 v) { return make_int3(-v.x, -v.y, -v.z); }
inline uniform int3 unary_plus(uniform int3 v) { return make_int3(+v.x, +v.y, +v.z); }
inline uniform int3 unary_minus(uniform int3 v) { return make_int3(-v.x, -v.y, -v.z); }
inline int3 unary_bit_not(int3 v) { return make_int3(~v.x, ~v.y, ~v.z); }
inline int3 unary_bit_not(uniform int3 v) { return make_int3(~v.x, ~v.y, ~v.z); }
inline bool4 unary_not(int4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline uniform bool4 unary_not(uniform int4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline int4 unary_plus(int4 v) { return make_int4(+v.x, +v.y, +v.z, +v.w); }
inline int4 unary_minus(int4 v) { return make_int4(-v.x, -v.y, -v.z, -v.w); }
inline uniform int4 unary_plus(uniform int4 v) { return make_int4(+v.x, +v.y, +v.z, +v.w); }
inline uniform int4 unary_minus(uniform int4 v) { return make_int4(-v.x, -v.y, -v.z, -v.w); }
inline int4 unary_bit_not(int4 v) { return make_int4(~v.x, ~v.y, ~v.z, ~v.w); }
inline int4 unary_bit_not(uniform int4 v) { return make_int4(~v.x, ~v.y, ~v.z, ~v.w); }

inline bool unary_not(uint s) { return !s; }
inline uniform bool unary_not(uniform uint s) { return !s; }
inline uint unary_plus(uint s) { return +s; }
inline uint unary_minus(uint s) { return -s; }
inline uniform uint unary_plus(uniform uint s) { return +s; }
inline uniform uint unary_minus(uniform uint s) { return -s; }
inline uint unary_bit_not(uint s) { return ~s; }
inline uniform uint unary_bit_not(uniform uint s) { return ~s; }
inline bool2 unary_not(uint2 v) { return make_bool2(!v.x, !v.y); }
inline uniform bool2 unary_not(uniform uint2 v) { return make_bool2(!v.x, !v.y); }
inline uint2 unary_plus(uint2 v) { return make_uint2(+v.x, +v.y); }
inline uint2 unary_minus(uint2 v) { return make_uint2(-v.x, -v.y); }
inline uniform uint2 unary_plus(uniform uint2 v) { return make_uint2(+v.x, +v.y); }
inline uniform uint2 unary_minus(uniform uint2 v) { return make_uint2(-v.x, -v.y); }
inline uint2 unary_bit_not(uint2 v) { return make_uint2(~v.x, ~v.y); }
inline uint2 unary_bit_not(uniform uint2 v) { return make_uint2(~v.x, ~v.y); }
inline bool3 unary_not(uint3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline uniform bool3 unary_not(uniform uint3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline uint3 unary_plus(uint3 v) { return make_uint3(+v.x, +v.y, +v.z); }
inline uint3 unary_minus(uint3 v) { return make_uint3(-v.x, -v.y, -v.z); }
inline uniform uint3 unary_plus(uniform uint3 v) { return make_uint3(+v.x, +v.y, +v.z); }
inline uniform uint3 unary_minus(uniform uint3 v) { return make_uint3(-v.x, -v.y, -v.z); }
inline uint3 unary_bit_not(uint3 v) { return make_uint3(~v.x, ~v.y, ~v.z); }
inline uint3 unary_bit_not(uniform uint3 v) { return make_uint3(~v.x, ~v.y, ~v.z); }
inline bool4 unary_not(uint4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline uniform bool4 unary_not(uniform uint4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline uint4 unary_plus(uint4 v) { return make_uint4(+v.x, +v.y, +v.z, +v.w); }
inline uint4 unary_minus(uint4 v) { return make_uint4(-v.x, -v.y, -v.z, -v.w); }
inline uniform uint4 unary_plus(uniform uint4 v) { return make_uint4(+v.x, +v.y, +v.z, +v.w); }
inline uniform uint4 unary_minus(uniform uint4 v) { return make_uint4(-v.x, -v.y, -v.z, -v.w); }
inline uint4 unary_bit_not(uint4 v) { return make_uint4(~v.x, ~v.y, ~v.z, ~v.w); }
inline uint4 unary_bit_not(uniform uint4 v) { return make_uint4(~v.x, ~v.y, ~v.z, ~v.w); }

inline bool unary_not(float s) { return !s; }
inline uniform bool unary_not(uniform float s) { return !s; }
inline float unary_plus(float s) { return +s; }
inline float unary_minus(float s) { return -s; }
inline uniform float unary_plus(uniform float s) { return +s; }
inline uniform float unary_minus(uniform float s) { return -s; }
inline bool2 unary_not(float2 v) { return make_bool2(!v.x, !v.y); }
inline uniform bool2 unary_not(uniform float2 v) { return make_bool2(!v.x, !v.y); }
inline float2 unary_plus(float2 v) { return make_float2(+v.x, +v.y); }
inline float2 unary_minus(float2 v) { return make_float2(-v.x, -v.y); }
inline uniform float2 unary_plus(uniform float2 v) { return make_float2(+v.x, +v.y); }
inline uniform float2 unary_minus(uniform float2 v) { return make_float2(-v.x, -v.y); }
inline bool3 unary_not(float3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline uniform bool3 unary_not(uniform float3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline float3 unary_plus(float3 v) { return make_float3(+v.x, +v.y, +v.z); }
inline float3 unary_minus(float3 v) { return make_float3(-v.x, -v.y, -v.z); }
inline uniform float3 unary_plus(uniform float3 v) { return make_float3(+v.x, +v.y, +v.z); }
inline uniform float3 unary_minus(uniform float3 v) { return make_float3(-v.x, -v.y, -v.z); }
inline bool4 unary_not(float4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline uniform bool4 unary_not(uniform float4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline float4 unary_plus(float4 v) { return make_float4(+v.x, +v.y, +v.z, +v.w); }
inline float4 unary_minus(float4 v) { return make_float4(-v.x, -v.y, -v.z, -v.w); }
inline uniform float4 unary_plus(uniform float4 v) { return make_float4(+v.x, +v.y, +v.z, +v.w); }
inline uniform float4 unary_minus(uniform float4 v) { return make_float4(-v.x, -v.y, -v.z, -v.w); }

inline bool unary_not(bool s) { return !s; }
inline uniform bool unary_not(uniform bool s) { return !s; }
inline bool2 unary_not(bool2 v) { return make_bool2(!v.x, !v.y); }
inline uniform bool2 unary_not(uniform bool2 v) { return make_bool2(!v.x, !v.y); }
inline bool3 unary_not(bool3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline uniform bool3 unary_not(uniform bool3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline bool4 unary_not(bool4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline uniform bool4 unary_not(uniform bool4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }

inline uniform bool binary_eq(uniform int lhs, uniform int rhs) { return lhs == rhs; }
inline bool binary_eq(int lhs, uniform int rhs) { return lhs == rhs; }
inline bool binary_eq(uniform int lhs, int rhs) { return lhs == rhs; }
inline bool binary_eq(int lhs, int rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(int2 lhs, int2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline uniform bool2 binary_eq(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(int2 lhs, uniform int rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uniform int2 lhs, int rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(int2 lhs, int rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline uniform bool2 binary_eq(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(int lhs, uniform int2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uniform int lhs, int2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(int lhs, int2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline uniform bool3 binary_eq(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(int3 lhs, int3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline uniform bool3 binary_eq(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(int3 lhs, uniform int rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uniform int3 lhs, int rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(int3 lhs, int rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline uniform bool3 binary_eq(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(int lhs, uniform int3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uniform int lhs, int3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(int lhs, int3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline uniform bool4 binary_eq(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(int4 lhs, int4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline uniform bool4 binary_eq(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(int4 lhs, uniform int rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uniform int4 lhs, int rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(int4 lhs, int rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline uniform bool4 binary_eq(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(int lhs, uniform int4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uniform int lhs, int4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(int lhs, int4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline uniform bool binary_eq(uniform uint lhs, uniform uint rhs) { return lhs == rhs; }
inline bool binary_eq(uint lhs, uniform uint rhs) { return lhs == rhs; }
inline bool binary_eq(uniform uint lhs, uint rhs) { return lhs == rhs; }
inline bool binary_eq(uint lhs, uint rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline uniform bool2 binary_eq(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uint2 lhs, uint rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline uniform bool2 binary_eq(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uint lhs, uniform uint2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uniform uint lhs, uint2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uint lhs, uint2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline uniform bool3 binary_eq(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline uniform bool3 binary_eq(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uint3 lhs, uint rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline uniform bool3 binary_eq(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uint lhs, uniform uint3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uniform uint lhs, uint3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uint lhs, uint3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline uniform bool4 binary_eq(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline uniform bool4 binary_eq(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uint4 lhs, uint rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline uniform bool4 binary_eq(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uint lhs, uniform uint4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uniform uint lhs, uint4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uint lhs, uint4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline uniform bool binary_eq(uniform float lhs, uniform float rhs) { return lhs == rhs; }
inline bool binary_eq(float lhs, uniform float rhs) { return lhs == rhs; }
inline bool binary_eq(uniform float lhs, float rhs) { return lhs == rhs; }
inline bool binary_eq(float lhs, float rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(float2 lhs, float2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline uniform bool2 binary_eq(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(float2 lhs, uniform float rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uniform float2 lhs, float rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(float2 lhs, float rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline uniform bool2 binary_eq(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(float lhs, uniform float2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uniform float lhs, float2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(float lhs, float2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline uniform bool3 binary_eq(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(float3 lhs, float3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline uniform bool3 binary_eq(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(float3 lhs, uniform float rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uniform float3 lhs, float rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(float3 lhs, float rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline uniform bool3 binary_eq(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(float lhs, uniform float3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uniform float lhs, float3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(float lhs, float3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline uniform bool4 binary_eq(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(float4 lhs, float4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline uniform bool4 binary_eq(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(float4 lhs, uniform float rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uniform float4 lhs, float rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(float4 lhs, float rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline uniform bool4 binary_eq(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(float lhs, uniform float4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uniform float lhs, float4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(float lhs, float4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline uniform bool binary_eq(uniform bool lhs, uniform bool rhs) { return lhs == rhs; }
inline bool binary_eq(bool lhs, uniform bool rhs) { return lhs == rhs; }
inline bool binary_eq(uniform bool lhs, bool rhs) { return lhs == rhs; }
inline bool binary_eq(bool lhs, bool rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline uniform bool2 binary_eq(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(bool2 lhs, bool rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline uniform bool2 binary_eq(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(bool lhs, uniform bool2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uniform bool lhs, bool2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(bool lhs, bool2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline uniform bool3 binary_eq(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline uniform bool3 binary_eq(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(bool3 lhs, bool rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline uniform bool3 binary_eq(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(bool lhs, uniform bool3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uniform bool lhs, bool3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(bool lhs, bool3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline uniform bool4 binary_eq(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline uniform bool4 binary_eq(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(bool4 lhs, bool rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline uniform bool4 binary_eq(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(bool lhs, uniform bool4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uniform bool lhs, bool4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(bool lhs, bool4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }

inline uniform bool binary_ne(uniform int lhs, uniform int rhs) { return lhs != rhs; }
inline bool binary_ne(int lhs, uniform int rhs) { return lhs != rhs; }
inline bool binary_ne(uniform int lhs, int rhs) { return lhs != rhs; }
inline bool binary_ne(int lhs, int rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(int2 lhs, int2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline uniform bool2 binary_ne(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(int2 lhs, uniform int rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uniform int2 lhs, int rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(int2 lhs, int rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline uniform bool2 binary_ne(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(int lhs, uniform int2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uniform int lhs, int2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(int lhs, int2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline uniform bool3 binary_ne(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(int3 lhs, int3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline uniform bool3 binary_ne(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(int3 lhs, uniform int rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uniform int3 lhs, int rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(int3 lhs, int rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline uniform bool3 binary_ne(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(int lhs, uniform int3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uniform int lhs, int3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(int lhs, int3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline uniform bool4 binary_ne(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(int4 lhs, int4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline uniform bool4 binary_ne(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(int4 lhs, uniform int rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uniform int4 lhs, int rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(int4 lhs, int rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline uniform bool4 binary_ne(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(int lhs, uniform int4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uniform int lhs, int4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(int lhs, int4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline uniform bool binary_ne(uniform uint lhs, uniform uint rhs) { return lhs != rhs; }
inline bool binary_ne(uint lhs, uniform uint rhs) { return lhs != rhs; }
inline bool binary_ne(uniform uint lhs, uint rhs) { return lhs != rhs; }
inline bool binary_ne(uint lhs, uint rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline uniform bool2 binary_ne(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uint2 lhs, uint rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline uniform bool2 binary_ne(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uint lhs, uniform uint2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uniform uint lhs, uint2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uint lhs, uint2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline uniform bool3 binary_ne(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline uniform bool3 binary_ne(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uint3 lhs, uint rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline uniform bool3 binary_ne(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uint lhs, uniform uint3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uniform uint lhs, uint3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uint lhs, uint3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline uniform bool4 binary_ne(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline uniform bool4 binary_ne(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uint4 lhs, uint rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline uniform bool4 binary_ne(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uint lhs, uniform uint4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uniform uint lhs, uint4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uint lhs, uint4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline uniform bool binary_ne(uniform float lhs, uniform float rhs) { return lhs != rhs; }
inline bool binary_ne(float lhs, uniform float rhs) { return lhs != rhs; }
inline bool binary_ne(uniform float lhs, float rhs) { return lhs != rhs; }
inline bool binary_ne(float lhs, float rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(float2 lhs, float2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline uniform bool2 binary_ne(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(float2 lhs, uniform float rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uniform float2 lhs, float rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(float2 lhs, float rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline uniform bool2 binary_ne(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(float lhs, uniform float2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uniform float lhs, float2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(float lhs, float2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline uniform bool3 binary_ne(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(float3 lhs, float3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline uniform bool3 binary_ne(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(float3 lhs, uniform float rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uniform float3 lhs, float rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(float3 lhs, float rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline uniform bool3 binary_ne(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(float lhs, uniform float3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uniform float lhs, float3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(float lhs, float3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline uniform bool4 binary_ne(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(float4 lhs, float4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline uniform bool4 binary_ne(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(float4 lhs, uniform float rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uniform float4 lhs, float rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(float4 lhs, float rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline uniform bool4 binary_ne(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(float lhs, uniform float4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uniform float lhs, float4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(float lhs, float4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline uniform bool binary_ne(uniform bool lhs, uniform bool rhs) { return lhs != rhs; }
inline bool binary_ne(bool lhs, uniform bool rhs) { return lhs != rhs; }
inline bool binary_ne(uniform bool lhs, bool rhs) { return lhs != rhs; }
inline bool binary_ne(bool lhs, bool rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline uniform bool2 binary_ne(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(bool2 lhs, bool rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline uniform bool2 binary_ne(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(bool lhs, uniform bool2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uniform bool lhs, bool2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(bool lhs, bool2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline uniform bool3 binary_ne(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline uniform bool3 binary_ne(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(bool3 lhs, bool rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline uniform bool3 binary_ne(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(bool lhs, uniform bool3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uniform bool lhs, bool3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(bool lhs, bool3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline uniform bool4 binary_ne(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline uniform bool4 binary_ne(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(bool4 lhs, bool rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline uniform bool4 binary_ne(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(bool lhs, uniform bool4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uniform bool lhs, bool4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(bool lhs, bool4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }

inline uniform bool binary_lt(uniform int lhs, uniform int rhs) { return lhs < rhs; }
inline bool binary_lt(int lhs, uniform int rhs) { return lhs < rhs; }
inline bool binary_lt(uniform int lhs, int rhs) { return lhs < rhs; }
inline bool binary_lt(int lhs, int rhs) { return lhs < rhs; }
inline uniform bool2 binary_lt(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(int2 lhs, int2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline uniform bool2 binary_lt(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(int2 lhs, uniform int rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(uniform int2 lhs, int rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(int2 lhs, int rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline uniform bool2 binary_lt(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(int lhs, uniform int2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(uniform int lhs, int2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(int lhs, int2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline uniform bool3 binary_lt(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(int3 lhs, int3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline uniform bool3 binary_lt(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(int3 lhs, uniform int rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(uniform int3 lhs, int rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(int3 lhs, int rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline uniform bool3 binary_lt(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(int lhs, uniform int3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(uniform int lhs, int3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(int lhs, int3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline uniform bool4 binary_lt(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(int4 lhs, int4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline uniform bool4 binary_lt(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(int4 lhs, uniform int rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(uniform int4 lhs, int rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(int4 lhs, int rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline uniform bool4 binary_lt(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(int lhs, uniform int4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(uniform int lhs, int4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(int lhs, int4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline uniform bool binary_lt(uniform uint lhs, uniform uint rhs) { return lhs < rhs; }
inline bool binary_lt(uint lhs, uniform uint rhs) { return lhs < rhs; }
inline bool binary_lt(uniform uint lhs, uint rhs) { return lhs < rhs; }
inline bool binary_lt(uint lhs, uint rhs) { return lhs < rhs; }
inline uniform bool2 binary_lt(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline uniform bool2 binary_lt(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(uint2 lhs, uint rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline uniform bool2 binary_lt(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(uint lhs, uniform uint2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(uniform uint lhs, uint2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(uint lhs, uint2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline uniform bool3 binary_lt(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline uniform bool3 binary_lt(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(uint3 lhs, uint rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline uniform bool3 binary_lt(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(uint lhs, uniform uint3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(uniform uint lhs, uint3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(uint lhs, uint3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline uniform bool4 binary_lt(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline uniform bool4 binary_lt(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(uint4 lhs, uint rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline uniform bool4 binary_lt(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(uint lhs, uniform uint4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(uniform uint lhs, uint4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(uint lhs, uint4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline uniform bool binary_lt(uniform float lhs, uniform float rhs) { return lhs < rhs; }
inline bool binary_lt(float lhs, uniform float rhs) { return lhs < rhs; }
inline bool binary_lt(uniform float lhs, float rhs) { return lhs < rhs; }
inline bool binary_lt(float lhs, float rhs) { return lhs < rhs; }
inline uniform bool2 binary_lt(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(float2 lhs, float2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline uniform bool2 binary_lt(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(float2 lhs, uniform float rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(uniform float2 lhs, float rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(float2 lhs, float rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline uniform bool2 binary_lt(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(float lhs, uniform float2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(uniform float lhs, float2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(float lhs, float2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline uniform bool3 binary_lt(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(float3 lhs, float3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline uniform bool3 binary_lt(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(float3 lhs, uniform float rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(uniform float3 lhs, float rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(float3 lhs, float rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline uniform bool3 binary_lt(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(float lhs, uniform float3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(uniform float lhs, float3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(float lhs, float3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline uniform bool4 binary_lt(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(float4 lhs, float4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline uniform bool4 binary_lt(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(float4 lhs, uniform float rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(uniform float4 lhs, float rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(float4 lhs, float rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline uniform bool4 binary_lt(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(float lhs, uniform float4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(uniform float lhs, float4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(float lhs, float4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }

inline uniform bool binary_gt(uniform int lhs, uniform int rhs) { return lhs > rhs; }
inline bool binary_gt(int lhs, uniform int rhs) { return lhs > rhs; }
inline bool binary_gt(uniform int lhs, int rhs) { return lhs > rhs; }
inline bool binary_gt(int lhs, int rhs) { return lhs > rhs; }
inline uniform bool2 binary_gt(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(int2 lhs, int2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline uniform bool2 binary_gt(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(int2 lhs, uniform int rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(uniform int2 lhs, int rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(int2 lhs, int rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline uniform bool2 binary_gt(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(int lhs, uniform int2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(uniform int lhs, int2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(int lhs, int2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline uniform bool3 binary_gt(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(int3 lhs, int3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline uniform bool3 binary_gt(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(int3 lhs, uniform int rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(uniform int3 lhs, int rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(int3 lhs, int rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline uniform bool3 binary_gt(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(int lhs, uniform int3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(uniform int lhs, int3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(int lhs, int3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline uniform bool4 binary_gt(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(int4 lhs, int4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline uniform bool4 binary_gt(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(int4 lhs, uniform int rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(uniform int4 lhs, int rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(int4 lhs, int rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline uniform bool4 binary_gt(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(int lhs, uniform int4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(uniform int lhs, int4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(int lhs, int4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline uniform bool binary_gt(uniform uint lhs, uniform uint rhs) { return lhs > rhs; }
inline bool binary_gt(uint lhs, uniform uint rhs) { return lhs > rhs; }
inline bool binary_gt(uniform uint lhs, uint rhs) { return lhs > rhs; }
inline bool binary_gt(uint lhs, uint rhs) { return lhs > rhs; }
inline uniform bool2 binary_gt(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline uniform bool2 binary_gt(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(uint2 lhs, uint rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline uniform bool2 binary_gt(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(uint lhs, uniform uint2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(uniform uint lhs, uint2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(uint lhs, uint2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline uniform bool3 binary_gt(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline uniform bool3 binary_gt(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(uint3 lhs, uint rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline uniform bool3 binary_gt(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(uint lhs, uniform uint3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(uniform uint lhs, uint3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(uint lhs, uint3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline uniform bool4 binary_gt(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline uniform bool4 binary_gt(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(uint4 lhs, uint rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline uniform bool4 binary_gt(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(uint lhs, uniform uint4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(uniform uint lhs, uint4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(uint lhs, uint4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline uniform bool binary_gt(uniform float lhs, uniform float rhs) { return lhs > rhs; }
inline bool binary_gt(float lhs, uniform float rhs) { return lhs > rhs; }
inline bool binary_gt(uniform float lhs, float rhs) { return lhs > rhs; }
inline bool binary_gt(float lhs, float rhs) { return lhs > rhs; }
inline uniform bool2 binary_gt(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(float2 lhs, float2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline uniform bool2 binary_gt(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(float2 lhs, uniform float rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(uniform float2 lhs, float rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(float2 lhs, float rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline uniform bool2 binary_gt(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(float lhs, uniform float2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(uniform float lhs, float2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(float lhs, float2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline uniform bool3 binary_gt(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(float3 lhs, float3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline uniform bool3 binary_gt(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(float3 lhs, uniform float rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(uniform float3 lhs, float rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(float3 lhs, float rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline uniform bool3 binary_gt(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(float lhs, uniform float3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(uniform float lhs, float3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(float lhs, float3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline uniform bool4 binary_gt(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(float4 lhs, float4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline uniform bool4 binary_gt(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(float4 lhs, uniform float rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(uniform float4 lhs, float rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(float4 lhs, float rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline uniform bool4 binary_gt(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(float lhs, uniform float4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(uniform float lhs, float4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(float lhs, float4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }

inline uniform bool binary_le(uniform int lhs, uniform int rhs) { return lhs <= rhs; }
inline bool binary_le(int lhs, uniform int rhs) { return lhs <= rhs; }
inline bool binary_le(uniform int lhs, int rhs) { return lhs <= rhs; }
inline bool binary_le(int lhs, int rhs) { return lhs <= rhs; }
inline uniform bool2 binary_le(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(int2 lhs, int2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline uniform bool2 binary_le(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(int2 lhs, uniform int rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(uniform int2 lhs, int rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(int2 lhs, int rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline uniform bool2 binary_le(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(int lhs, uniform int2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(uniform int lhs, int2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(int lhs, int2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline uniform bool3 binary_le(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(int3 lhs, int3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline uniform bool3 binary_le(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(int3 lhs, uniform int rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(uniform int3 lhs, int rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(int3 lhs, int rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline uniform bool3 binary_le(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(int lhs, uniform int3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(uniform int lhs, int3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(int lhs, int3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline uniform bool4 binary_le(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(int4 lhs, int4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline uniform bool4 binary_le(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(int4 lhs, uniform int rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(uniform int4 lhs, int rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(int4 lhs, int rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline uniform bool4 binary_le(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(int lhs, uniform int4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(uniform int lhs, int4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(int lhs, int4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline uniform bool binary_le(uniform uint lhs, uniform uint rhs) { return lhs <= rhs; }
inline bool binary_le(uint lhs, uniform uint rhs) { return lhs <= rhs; }
inline bool binary_le(uniform uint lhs, uint rhs) { return lhs <= rhs; }
inline bool binary_le(uint lhs, uint rhs) { return lhs <= rhs; }
inline uniform bool2 binary_le(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline uniform bool2 binary_le(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(uint2 lhs, uint rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline uniform bool2 binary_le(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(uint lhs, uniform uint2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(uniform uint lhs, uint2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(uint lhs, uint2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline uniform bool3 binary_le(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline uniform bool3 binary_le(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(uint3 lhs, uint rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline uniform bool3 binary_le(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(uint lhs, uniform uint3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(uniform uint lhs, uint3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(uint lhs, uint3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline uniform bool4 binary_le(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline uniform bool4 binary_le(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(uint4 lhs, uint rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline uniform bool4 binary_le(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(uint lhs, uniform uint4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(uniform uint lhs, uint4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(uint lhs, uint4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline uniform bool binary_le(uniform float lhs, uniform float rhs) { return lhs <= rhs; }
inline bool binary_le(float lhs, uniform float rhs) { return lhs <= rhs; }
inline bool binary_le(uniform float lhs, float rhs) { return lhs <= rhs; }
inline bool binary_le(float lhs, float rhs) { return lhs <= rhs; }
inline uniform bool2 binary_le(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(float2 lhs, float2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline uniform bool2 binary_le(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(float2 lhs, uniform float rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(uniform float2 lhs, float rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(float2 lhs, float rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline uniform bool2 binary_le(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(float lhs, uniform float2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(uniform float lhs, float2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(float lhs, float2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline uniform bool3 binary_le(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(float3 lhs, float3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline uniform bool3 binary_le(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(float3 lhs, uniform float rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(uniform float3 lhs, float rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(float3 lhs, float rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline uniform bool3 binary_le(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(float lhs, uniform float3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(uniform float lhs, float3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(float lhs, float3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline uniform bool4 binary_le(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(float4 lhs, float4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline uniform bool4 binary_le(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(float4 lhs, uniform float rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(uniform float4 lhs, float rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(float4 lhs, float rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline uniform bool4 binary_le(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(float lhs, uniform float4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(uniform float lhs, float4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(float lhs, float4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }

inline uniform bool binary_ge(uniform int lhs, uniform int rhs) { return lhs >= rhs; }
inline bool binary_ge(int lhs, uniform int rhs) { return lhs >= rhs; }
inline bool binary_ge(uniform int lhs, int rhs) { return lhs >= rhs; }
inline bool binary_ge(int lhs, int rhs) { return lhs >= rhs; }
inline uniform bool2 binary_ge(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(int2 lhs, int2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline uniform bool2 binary_ge(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(int2 lhs, uniform int rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(uniform int2 lhs, int rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(int2 lhs, int rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline uniform bool2 binary_ge(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(int lhs, uniform int2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(uniform int lhs, int2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(int lhs, int2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline uniform bool3 binary_ge(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(int3 lhs, int3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline uniform bool3 binary_ge(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(int3 lhs, uniform int rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(uniform int3 lhs, int rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(int3 lhs, int rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline uniform bool3 binary_ge(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(int lhs, uniform int3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(uniform int lhs, int3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(int lhs, int3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline uniform bool4 binary_ge(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(int4 lhs, int4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline uniform bool4 binary_ge(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(int4 lhs, uniform int rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(uniform int4 lhs, int rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(int4 lhs, int rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline uniform bool4 binary_ge(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(int lhs, uniform int4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(uniform int lhs, int4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(int lhs, int4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline uniform bool binary_ge(uniform uint lhs, uniform uint rhs) { return lhs >= rhs; }
inline bool binary_ge(uint lhs, uniform uint rhs) { return lhs >= rhs; }
inline bool binary_ge(uniform uint lhs, uint rhs) { return lhs >= rhs; }
inline bool binary_ge(uint lhs, uint rhs) { return lhs >= rhs; }
inline uniform bool2 binary_ge(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline uniform bool2 binary_ge(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(uint2 lhs, uint rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline uniform bool2 binary_ge(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(uint lhs, uniform uint2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(uniform uint lhs, uint2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(uint lhs, uint2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline uniform bool3 binary_ge(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline uniform bool3 binary_ge(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(uint3 lhs, uint rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline uniform bool3 binary_ge(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(uint lhs, uniform uint3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(uniform uint lhs, uint3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(uint lhs, uint3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline uniform bool4 binary_ge(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline uniform bool4 binary_ge(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(uint4 lhs, uint rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline uniform bool4 binary_ge(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(uint lhs, uniform uint4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(uniform uint lhs, uint4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(uint lhs, uint4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline uniform bool binary_ge(uniform float lhs, uniform float rhs) { return lhs >= rhs; }
inline bool binary_ge(float lhs, uniform float rhs) { return lhs >= rhs; }
inline bool binary_ge(uniform float lhs, float rhs) { return lhs >= rhs; }
inline bool binary_ge(float lhs, float rhs) { return lhs >= rhs; }
inline uniform bool2 binary_ge(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(float2 lhs, float2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline uniform bool2 binary_ge(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(float2 lhs, uniform float rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(uniform float2 lhs, float rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(float2 lhs, float rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline uniform bool2 binary_ge(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(float lhs, uniform float2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(uniform float lhs, float2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(float lhs, float2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline uniform bool3 binary_ge(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(float3 lhs, float3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline uniform bool3 binary_ge(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(float3 lhs, uniform float rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(uniform float3 lhs, float rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(float3 lhs, float rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline uniform bool3 binary_ge(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(float lhs, uniform float3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(uniform float lhs, float3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(float lhs, float3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline uniform bool4 binary_ge(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(float4 lhs, float4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline uniform bool4 binary_ge(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(float4 lhs, uniform float rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(uniform float4 lhs, float rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(float4 lhs, float rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline uniform bool4 binary_ge(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(float lhs, uniform float4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(uniform float lhs, float4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(float lhs, float4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }

inline uniform int binary_add(uniform int lhs, uniform int rhs) { return lhs + rhs; }
inline int binary_add(int lhs, uniform int rhs) { return lhs + rhs; }
inline int binary_add(uniform int lhs, int rhs) { return lhs + rhs; }
inline int binary_add(int lhs, int rhs) { return lhs + rhs; }
inline uniform int2 binary_add(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline int2 binary_add(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline int2 binary_add(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline int2 binary_add(int2 lhs, int2 rhs) { return make_int2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uniform int2 binary_add(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x + rhs, lhs.y + rhs); }
inline int2 binary_add(int2 lhs, uniform int rhs) { return make_int2(lhs.x + rhs, lhs.y + rhs); }
inline int2 binary_add(uniform int2 lhs, int rhs) { return make_int2(lhs.x + rhs, lhs.y + rhs); }
inline int2 binary_add(int2 lhs, int rhs) { return make_int2(lhs.x + rhs, lhs.y + rhs); }
inline uniform int2 binary_add(uniform int lhs, uniform int2 rhs) { return make_int2(lhs + rhs.x, lhs + rhs.y); }
inline int2 binary_add(int lhs, uniform int2 rhs) { return make_int2(lhs + rhs.x, lhs + rhs.y); }
inline int2 binary_add(uniform int lhs, int2 rhs) { return make_int2(lhs + rhs.x, lhs + rhs.y); }
inline int2 binary_add(int lhs, int2 rhs) { return make_int2(lhs + rhs.x, lhs + rhs.y); }
inline uniform int3 binary_add(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline int3 binary_add(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline int3 binary_add(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline int3 binary_add(int3 lhs, int3 rhs) { return make_int3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uniform int3 binary_add(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline int3 binary_add(int3 lhs, uniform int rhs) { return make_int3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline int3 binary_add(uniform int3 lhs, int rhs) { return make_int3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline int3 binary_add(int3 lhs, int rhs) { return make_int3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uniform int3 binary_add(uniform int lhs, uniform int3 rhs) { return make_int3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline int3 binary_add(int lhs, uniform int3 rhs) { return make_int3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline int3 binary_add(uniform int lhs, int3 rhs) { return make_int3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline int3 binary_add(int lhs, int3 rhs) { return make_int3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uniform int4 binary_add(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline int4 binary_add(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline int4 binary_add(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline int4 binary_add(int4 lhs, int4 rhs) { return make_int4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uniform int4 binary_add(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline int4 binary_add(int4 lhs, uniform int rhs) { return make_int4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline int4 binary_add(uniform int4 lhs, int rhs) { return make_int4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline int4 binary_add(int4 lhs, int rhs) { return make_int4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uniform int4 binary_add(uniform int lhs, uniform int4 rhs) { return make_int4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline int4 binary_add(int lhs, uniform int4 rhs) { return make_int4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline int4 binary_add(uniform int lhs, int4 rhs) { return make_int4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline int4 binary_add(int lhs, int4 rhs) { return make_int4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline uniform uint binary_add(uniform uint lhs, uniform uint rhs) { return lhs + rhs; }
inline uint binary_add(uint lhs, uniform uint rhs) { return lhs + rhs; }
inline uint binary_add(uniform uint lhs, uint rhs) { return lhs + rhs; }
inline uint binary_add(uint lhs, uint rhs) { return lhs + rhs; }
inline uniform uint2 binary_add(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uint2 binary_add(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uint2 binary_add(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uint2 binary_add(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uniform uint2 binary_add(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x + rhs, lhs.y + rhs); }
inline uint2 binary_add(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x + rhs, lhs.y + rhs); }
inline uint2 binary_add(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x + rhs, lhs.y + rhs); }
inline uint2 binary_add(uint2 lhs, uint rhs) { return make_uint2(lhs.x + rhs, lhs.y + rhs); }
inline uniform uint2 binary_add(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs + rhs.x, lhs + rhs.y); }
inline uint2 binary_add(uint lhs, uniform uint2 rhs) { return make_uint2(lhs + rhs.x, lhs + rhs.y); }
inline uint2 binary_add(uniform uint lhs, uint2 rhs) { return make_uint2(lhs + rhs.x, lhs + rhs.y); }
inline uint2 binary_add(uint lhs, uint2 rhs) { return make_uint2(lhs + rhs.x, lhs + rhs.y); }
inline uniform uint3 binary_add(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uint3 binary_add(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uint3 binary_add(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uint3 binary_add(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uniform uint3 binary_add(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uint3 binary_add(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uint3 binary_add(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uint3 binary_add(uint3 lhs, uint rhs) { return make_uint3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uniform uint3 binary_add(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uint3 binary_add(uint lhs, uniform uint3 rhs) { return make_uint3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uint3 binary_add(uniform uint lhs, uint3 rhs) { return make_uint3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uint3 binary_add(uint lhs, uint3 rhs) { return make_uint3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uniform uint4 binary_add(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uint4 binary_add(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uint4 binary_add(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uint4 binary_add(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uniform uint4 binary_add(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uint4 binary_add(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uint4 binary_add(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uint4 binary_add(uint4 lhs, uint rhs) { return make_uint4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uniform uint4 binary_add(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline uint4 binary_add(uint lhs, uniform uint4 rhs) { return make_uint4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline uint4 binary_add(uniform uint lhs, uint4 rhs) { return make_uint4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline uint4 binary_add(uint lhs, uint4 rhs) { return make_uint4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline uniform float binary_add(uniform float lhs, uniform float rhs) { return lhs + rhs; }
inline float binary_add(float lhs, uniform float rhs) { return lhs + rhs; }
inline float binary_add(uniform float lhs, float rhs) { return lhs + rhs; }
inline float binary_add(float lhs, float rhs) { return lhs + rhs; }
inline uniform float2 binary_add(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline float2 binary_add(float2 lhs, uniform float2 rhs) { return make_float2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline float2 binary_add(uniform float2 lhs, float2 rhs) { return make_float2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline float2 binary_add(float2 lhs, float2 rhs) { return make_float2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uniform float2 binary_add(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.x + rhs, lhs.y + rhs); }
inline float2 binary_add(float2 lhs, uniform float rhs) { return make_float2(lhs.x + rhs, lhs.y + rhs); }
inline float2 binary_add(uniform float2 lhs, float rhs) { return make_float2(lhs.x + rhs, lhs.y + rhs); }
inline float2 binary_add(float2 lhs, float rhs) { return make_float2(lhs.x + rhs, lhs.y + rhs); }
inline uniform float2 binary_add(uniform float lhs, uniform float2 rhs) { return make_float2(lhs + rhs.x, lhs + rhs.y); }
inline float2 binary_add(float lhs, uniform float2 rhs) { return make_float2(lhs + rhs.x, lhs + rhs.y); }
inline float2 binary_add(uniform float lhs, float2 rhs) { return make_float2(lhs + rhs.x, lhs + rhs.y); }
inline float2 binary_add(float lhs, float2 rhs) { return make_float2(lhs + rhs.x, lhs + rhs.y); }
inline uniform float3 binary_add(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline float3 binary_add(float3 lhs, uniform float3 rhs) { return make_float3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline float3 binary_add(uniform float3 lhs, float3 rhs) { return make_float3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline float3 binary_add(float3 lhs, float3 rhs) { return make_float3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uniform float3 binary_add(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline float3 binary_add(float3 lhs, uniform float rhs) { return make_float3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline float3 binary_add(uniform float3 lhs, float rhs) { return make_float3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline float3 binary_add(float3 lhs, float rhs) { return make_float3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uniform float3 binary_add(uniform float lhs, uniform float3 rhs) { return make_float3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline float3 binary_add(float lhs, uniform float3 rhs) { return make_float3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline float3 binary_add(uniform float lhs, float3 rhs) { return make_float3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline float3 binary_add(float lhs, float3 rhs) { return make_float3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uniform float4 binary_add(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline float4 binary_add(float4 lhs, uniform float4 rhs) { return make_float4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline float4 binary_add(uniform float4 lhs, float4 rhs) { return make_float4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline float4 binary_add(float4 lhs, float4 rhs) { return make_float4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uniform float4 binary_add(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline float4 binary_add(float4 lhs, uniform float rhs) { return make_float4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline float4 binary_add(uniform float4 lhs, float rhs) { return make_float4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline float4 binary_add(float4 lhs, float rhs) { return make_float4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uniform float4 binary_add(uniform float lhs, uniform float4 rhs) { return make_float4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline float4 binary_add(float lhs, uniform float4 rhs) { return make_float4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline float4 binary_add(uniform float lhs, float4 rhs) { return make_float4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline float4 binary_add(float lhs, float4 rhs) { return make_float4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }

inline uniform int binary_sub(uniform int lhs, uniform int rhs) { return lhs - rhs; }
inline int binary_sub(int lhs, uniform int rhs) { return lhs - rhs; }
inline int binary_sub(uniform int lhs, int rhs) { return lhs - rhs; }
inline int binary_sub(int lhs, int rhs) { return lhs - rhs; }
inline uniform int2 binary_sub(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline int2 binary_sub(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline int2 binary_sub(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline int2 binary_sub(int2 lhs, int2 rhs) { return make_int2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uniform int2 binary_sub(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x - rhs, lhs.y - rhs); }
inline int2 binary_sub(int2 lhs, uniform int rhs) { return make_int2(lhs.x - rhs, lhs.y - rhs); }
inline int2 binary_sub(uniform int2 lhs, int rhs) { return make_int2(lhs.x - rhs, lhs.y - rhs); }
inline int2 binary_sub(int2 lhs, int rhs) { return make_int2(lhs.x - rhs, lhs.y - rhs); }
inline uniform int2 binary_sub(uniform int lhs, uniform int2 rhs) { return make_int2(lhs - rhs.x, lhs - rhs.y); }
inline int2 binary_sub(int lhs, uniform int2 rhs) { return make_int2(lhs - rhs.x, lhs - rhs.y); }
inline int2 binary_sub(uniform int lhs, int2 rhs) { return make_int2(lhs - rhs.x, lhs - rhs.y); }
inline int2 binary_sub(int lhs, int2 rhs) { return make_int2(lhs - rhs.x, lhs - rhs.y); }
inline uniform int3 binary_sub(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline int3 binary_sub(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline int3 binary_sub(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline int3 binary_sub(int3 lhs, int3 rhs) { return make_int3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uniform int3 binary_sub(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline int3 binary_sub(int3 lhs, uniform int rhs) { return make_int3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline int3 binary_sub(uniform int3 lhs, int rhs) { return make_int3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline int3 binary_sub(int3 lhs, int rhs) { return make_int3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uniform int3 binary_sub(uniform int lhs, uniform int3 rhs) { return make_int3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline int3 binary_sub(int lhs, uniform int3 rhs) { return make_int3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline int3 binary_sub(uniform int lhs, int3 rhs) { return make_int3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline int3 binary_sub(int lhs, int3 rhs) { return make_int3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uniform int4 binary_sub(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline int4 binary_sub(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline int4 binary_sub(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline int4 binary_sub(int4 lhs, int4 rhs) { return make_int4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uniform int4 binary_sub(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline int4 binary_sub(int4 lhs, uniform int rhs) { return make_int4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline int4 binary_sub(uniform int4 lhs, int rhs) { return make_int4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline int4 binary_sub(int4 lhs, int rhs) { return make_int4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uniform int4 binary_sub(uniform int lhs, uniform int4 rhs) { return make_int4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline int4 binary_sub(int lhs, uniform int4 rhs) { return make_int4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline int4 binary_sub(uniform int lhs, int4 rhs) { return make_int4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline int4 binary_sub(int lhs, int4 rhs) { return make_int4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline uniform uint binary_sub(uniform uint lhs, uniform uint rhs) { return lhs - rhs; }
inline uint binary_sub(uint lhs, uniform uint rhs) { return lhs - rhs; }
inline uint binary_sub(uniform uint lhs, uint rhs) { return lhs - rhs; }
inline uint binary_sub(uint lhs, uint rhs) { return lhs - rhs; }
inline uniform uint2 binary_sub(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uint2 binary_sub(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uint2 binary_sub(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uint2 binary_sub(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uniform uint2 binary_sub(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x - rhs, lhs.y - rhs); }
inline uint2 binary_sub(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x - rhs, lhs.y - rhs); }
inline uint2 binary_sub(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x - rhs, lhs.y - rhs); }
inline uint2 binary_sub(uint2 lhs, uint rhs) { return make_uint2(lhs.x - rhs, lhs.y - rhs); }
inline uniform uint2 binary_sub(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs - rhs.x, lhs - rhs.y); }
inline uint2 binary_sub(uint lhs, uniform uint2 rhs) { return make_uint2(lhs - rhs.x, lhs - rhs.y); }
inline uint2 binary_sub(uniform uint lhs, uint2 rhs) { return make_uint2(lhs - rhs.x, lhs - rhs.y); }
inline uint2 binary_sub(uint lhs, uint2 rhs) { return make_uint2(lhs - rhs.x, lhs - rhs.y); }
inline uniform uint3 binary_sub(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uint3 binary_sub(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uint3 binary_sub(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uint3 binary_sub(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uniform uint3 binary_sub(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uint3 binary_sub(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uint3 binary_sub(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uint3 binary_sub(uint3 lhs, uint rhs) { return make_uint3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uniform uint3 binary_sub(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uint3 binary_sub(uint lhs, uniform uint3 rhs) { return make_uint3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uint3 binary_sub(uniform uint lhs, uint3 rhs) { return make_uint3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uint3 binary_sub(uint lhs, uint3 rhs) { return make_uint3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uniform uint4 binary_sub(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uint4 binary_sub(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uint4 binary_sub(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uint4 binary_sub(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uniform uint4 binary_sub(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uint4 binary_sub(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uint4 binary_sub(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uint4 binary_sub(uint4 lhs, uint rhs) { return make_uint4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uniform uint4 binary_sub(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline uint4 binary_sub(uint lhs, uniform uint4 rhs) { return make_uint4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline uint4 binary_sub(uniform uint lhs, uint4 rhs) { return make_uint4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline uint4 binary_sub(uint lhs, uint4 rhs) { return make_uint4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline uniform float binary_sub(uniform float lhs, uniform float rhs) { return lhs - rhs; }
inline float binary_sub(float lhs, uniform float rhs) { return lhs - rhs; }
inline float binary_sub(uniform float lhs, float rhs) { return lhs - rhs; }
inline float binary_sub(float lhs, float rhs) { return lhs - rhs; }
inline uniform float2 binary_sub(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline float2 binary_sub(float2 lhs, uniform float2 rhs) { return make_float2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline float2 binary_sub(uniform float2 lhs, float2 rhs) { return make_float2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline float2 binary_sub(float2 lhs, float2 rhs) { return make_float2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uniform float2 binary_sub(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.x - rhs, lhs.y - rhs); }
inline float2 binary_sub(float2 lhs, uniform float rhs) { return make_float2(lhs.x - rhs, lhs.y - rhs); }
inline float2 binary_sub(uniform float2 lhs, float rhs) { return make_float2(lhs.x - rhs, lhs.y - rhs); }
inline float2 binary_sub(float2 lhs, float rhs) { return make_float2(lhs.x - rhs, lhs.y - rhs); }
inline uniform float2 binary_sub(uniform float lhs, uniform float2 rhs) { return make_float2(lhs - rhs.x, lhs - rhs.y); }
inline float2 binary_sub(float lhs, uniform float2 rhs) { return make_float2(lhs - rhs.x, lhs - rhs.y); }
inline float2 binary_sub(uniform float lhs, float2 rhs) { return make_float2(lhs - rhs.x, lhs - rhs.y); }
inline float2 binary_sub(float lhs, float2 rhs) { return make_float2(lhs - rhs.x, lhs - rhs.y); }
inline uniform float3 binary_sub(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline float3 binary_sub(float3 lhs, uniform float3 rhs) { return make_float3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline float3 binary_sub(uniform float3 lhs, float3 rhs) { return make_float3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline float3 binary_sub(float3 lhs, float3 rhs) { return make_float3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uniform float3 binary_sub(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline float3 binary_sub(float3 lhs, uniform float rhs) { return make_float3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline float3 binary_sub(uniform float3 lhs, float rhs) { return make_float3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline float3 binary_sub(float3 lhs, float rhs) { return make_float3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uniform float3 binary_sub(uniform float lhs, uniform float3 rhs) { return make_float3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline float3 binary_sub(float lhs, uniform float3 rhs) { return make_float3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline float3 binary_sub(uniform float lhs, float3 rhs) { return make_float3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline float3 binary_sub(float lhs, float3 rhs) { return make_float3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uniform float4 binary_sub(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline float4 binary_sub(float4 lhs, uniform float4 rhs) { return make_float4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline float4 binary_sub(uniform float4 lhs, float4 rhs) { return make_float4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline float4 binary_sub(float4 lhs, float4 rhs) { return make_float4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uniform float4 binary_sub(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline float4 binary_sub(float4 lhs, uniform float rhs) { return make_float4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline float4 binary_sub(uniform float4 lhs, float rhs) { return make_float4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline float4 binary_sub(float4 lhs, float rhs) { return make_float4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uniform float4 binary_sub(uniform float lhs, uniform float4 rhs) { return make_float4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline float4 binary_sub(float lhs, uniform float4 rhs) { return make_float4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline float4 binary_sub(uniform float lhs, float4 rhs) { return make_float4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline float4 binary_sub(float lhs, float4 rhs) { return make_float4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }

inline uniform int binary_mul(uniform int lhs, uniform int rhs) { return lhs * rhs; }
inline int binary_mul(int lhs, uniform int rhs) { return lhs * rhs; }
inline int binary_mul(uniform int lhs, int rhs) { return lhs * rhs; }
inline int binary_mul(int lhs, int rhs) { return lhs * rhs; }
inline uniform int2 binary_mul(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline int2 binary_mul(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline int2 binary_mul(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline int2 binary_mul(int2 lhs, int2 rhs) { return make_int2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uniform int2 binary_mul(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x * rhs, lhs.y * rhs); }
inline int2 binary_mul(int2 lhs, uniform int rhs) { return make_int2(lhs.x * rhs, lhs.y * rhs); }
inline int2 binary_mul(uniform int2 lhs, int rhs) { return make_int2(lhs.x * rhs, lhs.y * rhs); }
inline int2 binary_mul(int2 lhs, int rhs) { return make_int2(lhs.x * rhs, lhs.y * rhs); }
inline uniform int2 binary_mul(uniform int lhs, uniform int2 rhs) { return make_int2(lhs * rhs.x, lhs * rhs.y); }
inline int2 binary_mul(int lhs, uniform int2 rhs) { return make_int2(lhs * rhs.x, lhs * rhs.y); }
inline int2 binary_mul(uniform int lhs, int2 rhs) { return make_int2(lhs * rhs.x, lhs * rhs.y); }
inline int2 binary_mul(int lhs, int2 rhs) { return make_int2(lhs * rhs.x, lhs * rhs.y); }
inline uniform int3 binary_mul(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline int3 binary_mul(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline int3 binary_mul(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline int3 binary_mul(int3 lhs, int3 rhs) { return make_int3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uniform int3 binary_mul(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline int3 binary_mul(int3 lhs, uniform int rhs) { return make_int3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline int3 binary_mul(uniform int3 lhs, int rhs) { return make_int3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline int3 binary_mul(int3 lhs, int rhs) { return make_int3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uniform int3 binary_mul(uniform int lhs, uniform int3 rhs) { return make_int3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline int3 binary_mul(int lhs, uniform int3 rhs) { return make_int3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline int3 binary_mul(uniform int lhs, int3 rhs) { return make_int3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline int3 binary_mul(int lhs, int3 rhs) { return make_int3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uniform int4 binary_mul(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline int4 binary_mul(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline int4 binary_mul(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline int4 binary_mul(int4 lhs, int4 rhs) { return make_int4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uniform int4 binary_mul(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline int4 binary_mul(int4 lhs, uniform int rhs) { return make_int4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline int4 binary_mul(uniform int4 lhs, int rhs) { return make_int4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline int4 binary_mul(int4 lhs, int rhs) { return make_int4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uniform int4 binary_mul(uniform int lhs, uniform int4 rhs) { return make_int4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline int4 binary_mul(int lhs, uniform int4 rhs) { return make_int4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline int4 binary_mul(uniform int lhs, int4 rhs) { return make_int4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline int4 binary_mul(int lhs, int4 rhs) { return make_int4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline uniform uint binary_mul(uniform uint lhs, uniform uint rhs) { return lhs * rhs; }
inline uint binary_mul(uint lhs, uniform uint rhs) { return lhs * rhs; }
inline uint binary_mul(uniform uint lhs, uint rhs) { return lhs * rhs; }
inline uint binary_mul(uint lhs, uint rhs) { return lhs * rhs; }
inline uniform uint2 binary_mul(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uint2 binary_mul(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uint2 binary_mul(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uint2 binary_mul(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uniform uint2 binary_mul(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x * rhs, lhs.y * rhs); }
inline uint2 binary_mul(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x * rhs, lhs.y * rhs); }
inline uint2 binary_mul(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x * rhs, lhs.y * rhs); }
inline uint2 binary_mul(uint2 lhs, uint rhs) { return make_uint2(lhs.x * rhs, lhs.y * rhs); }
inline uniform uint2 binary_mul(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs * rhs.x, lhs * rhs.y); }
inline uint2 binary_mul(uint lhs, uniform uint2 rhs) { return make_uint2(lhs * rhs.x, lhs * rhs.y); }
inline uint2 binary_mul(uniform uint lhs, uint2 rhs) { return make_uint2(lhs * rhs.x, lhs * rhs.y); }
inline uint2 binary_mul(uint lhs, uint2 rhs) { return make_uint2(lhs * rhs.x, lhs * rhs.y); }
inline uniform uint3 binary_mul(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uint3 binary_mul(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uint3 binary_mul(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uint3 binary_mul(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uniform uint3 binary_mul(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uint3 binary_mul(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uint3 binary_mul(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uint3 binary_mul(uint3 lhs, uint rhs) { return make_uint3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uniform uint3 binary_mul(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uint3 binary_mul(uint lhs, uniform uint3 rhs) { return make_uint3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uint3 binary_mul(uniform uint lhs, uint3 rhs) { return make_uint3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uint3 binary_mul(uint lhs, uint3 rhs) { return make_uint3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uniform uint4 binary_mul(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uint4 binary_mul(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uint4 binary_mul(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uint4 binary_mul(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uniform uint4 binary_mul(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uint4 binary_mul(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uint4 binary_mul(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uint4 binary_mul(uint4 lhs, uint rhs) { return make_uint4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uniform uint4 binary_mul(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline uint4 binary_mul(uint lhs, uniform uint4 rhs) { return make_uint4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline uint4 binary_mul(uniform uint lhs, uint4 rhs) { return make_uint4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline uint4 binary_mul(uint lhs, uint4 rhs) { return make_uint4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline uniform float binary_mul(uniform float lhs, uniform float rhs) { return lhs * rhs; }
inline float binary_mul(float lhs, uniform float rhs) { return lhs * rhs; }
inline float binary_mul(uniform float lhs, float rhs) { return lhs * rhs; }
inline float binary_mul(float lhs, float rhs) { return lhs * rhs; }
inline uniform float2 binary_mul(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline float2 binary_mul(float2 lhs, uniform float2 rhs) { return make_float2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline float2 binary_mul(uniform float2 lhs, float2 rhs) { return make_float2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline float2 binary_mul(float2 lhs, float2 rhs) { return make_float2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uniform float2 binary_mul(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.x * rhs, lhs.y * rhs); }
inline float2 binary_mul(float2 lhs, uniform float rhs) { return make_float2(lhs.x * rhs, lhs.y * rhs); }
inline float2 binary_mul(uniform float2 lhs, float rhs) { return make_float2(lhs.x * rhs, lhs.y * rhs); }
inline float2 binary_mul(float2 lhs, float rhs) { return make_float2(lhs.x * rhs, lhs.y * rhs); }
inline uniform float2 binary_mul(uniform float lhs, uniform float2 rhs) { return make_float2(lhs * rhs.x, lhs * rhs.y); }
inline float2 binary_mul(float lhs, uniform float2 rhs) { return make_float2(lhs * rhs.x, lhs * rhs.y); }
inline float2 binary_mul(uniform float lhs, float2 rhs) { return make_float2(lhs * rhs.x, lhs * rhs.y); }
inline float2 binary_mul(float lhs, float2 rhs) { return make_float2(lhs * rhs.x, lhs * rhs.y); }
inline uniform float3 binary_mul(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline float3 binary_mul(float3 lhs, uniform float3 rhs) { return make_float3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline float3 binary_mul(uniform float3 lhs, float3 rhs) { return make_float3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline float3 binary_mul(float3 lhs, float3 rhs) { return make_float3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uniform float3 binary_mul(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline float3 binary_mul(float3 lhs, uniform float rhs) { return make_float3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline float3 binary_mul(uniform float3 lhs, float rhs) { return make_float3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline float3 binary_mul(float3 lhs, float rhs) { return make_float3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uniform float3 binary_mul(uniform float lhs, uniform float3 rhs) { return make_float3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline float3 binary_mul(float lhs, uniform float3 rhs) { return make_float3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline float3 binary_mul(uniform float lhs, float3 rhs) { return make_float3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline float3 binary_mul(float lhs, float3 rhs) { return make_float3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uniform float4 binary_mul(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline float4 binary_mul(float4 lhs, uniform float4 rhs) { return make_float4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline float4 binary_mul(uniform float4 lhs, float4 rhs) { return make_float4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline float4 binary_mul(float4 lhs, float4 rhs) { return make_float4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uniform float4 binary_mul(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline float4 binary_mul(float4 lhs, uniform float rhs) { return make_float4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline float4 binary_mul(uniform float4 lhs, float rhs) { return make_float4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline float4 binary_mul(float4 lhs, float rhs) { return make_float4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uniform float4 binary_mul(uniform float lhs, uniform float4 rhs) { return make_float4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline float4 binary_mul(float lhs, uniform float4 rhs) { return make_float4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline float4 binary_mul(uniform float lhs, float4 rhs) { return make_float4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline float4 binary_mul(float lhs, float4 rhs) { return make_float4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }

inline uniform int binary_div(uniform int lhs, uniform int rhs) { return lhs / rhs; }
inline int binary_div(int lhs, uniform int rhs) { return lhs / rhs; }
inline int binary_div(uniform int lhs, int rhs) { return lhs / rhs; }
inline int binary_div(int lhs, int rhs) { return lhs / rhs; }
inline uniform int2 binary_div(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline int2 binary_div(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline int2 binary_div(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline int2 binary_div(int2 lhs, int2 rhs) { return make_int2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uniform int2 binary_div(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x / rhs, lhs.y / rhs); }
inline int2 binary_div(int2 lhs, uniform int rhs) { return make_int2(lhs.x / rhs, lhs.y / rhs); }
inline int2 binary_div(uniform int2 lhs, int rhs) { return make_int2(lhs.x / rhs, lhs.y / rhs); }
inline int2 binary_div(int2 lhs, int rhs) { return make_int2(lhs.x / rhs, lhs.y / rhs); }
inline uniform int2 binary_div(uniform int lhs, uniform int2 rhs) { return make_int2(lhs / rhs.x, lhs / rhs.y); }
inline int2 binary_div(int lhs, uniform int2 rhs) { return make_int2(lhs / rhs.x, lhs / rhs.y); }
inline int2 binary_div(uniform int lhs, int2 rhs) { return make_int2(lhs / rhs.x, lhs / rhs.y); }
inline int2 binary_div(int lhs, int2 rhs) { return make_int2(lhs / rhs.x, lhs / rhs.y); }
inline uniform int3 binary_div(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline int3 binary_div(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline int3 binary_div(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline int3 binary_div(int3 lhs, int3 rhs) { return make_int3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uniform int3 binary_div(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline int3 binary_div(int3 lhs, uniform int rhs) { return make_int3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline int3 binary_div(uniform int3 lhs, int rhs) { return make_int3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline int3 binary_div(int3 lhs, int rhs) { return make_int3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uniform int3 binary_div(uniform int lhs, uniform int3 rhs) { return make_int3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline int3 binary_div(int lhs, uniform int3 rhs) { return make_int3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline int3 binary_div(uniform int lhs, int3 rhs) { return make_int3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline int3 binary_div(int lhs, int3 rhs) { return make_int3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uniform int4 binary_div(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline int4 binary_div(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline int4 binary_div(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline int4 binary_div(int4 lhs, int4 rhs) { return make_int4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uniform int4 binary_div(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline int4 binary_div(int4 lhs, uniform int rhs) { return make_int4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline int4 binary_div(uniform int4 lhs, int rhs) { return make_int4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline int4 binary_div(int4 lhs, int rhs) { return make_int4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uniform int4 binary_div(uniform int lhs, uniform int4 rhs) { return make_int4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline int4 binary_div(int lhs, uniform int4 rhs) { return make_int4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline int4 binary_div(uniform int lhs, int4 rhs) { return make_int4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline int4 binary_div(int lhs, int4 rhs) { return make_int4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline uniform uint binary_div(uniform uint lhs, uniform uint rhs) { return lhs / rhs; }
inline uint binary_div(uint lhs, uniform uint rhs) { return lhs / rhs; }
inline uint binary_div(uniform uint lhs, uint rhs) { return lhs / rhs; }
inline uint binary_div(uint lhs, uint rhs) { return lhs / rhs; }
inline uniform uint2 binary_div(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uint2 binary_div(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uint2 binary_div(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uint2 binary_div(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uniform uint2 binary_div(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x / rhs, lhs.y / rhs); }
inline uint2 binary_div(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x / rhs, lhs.y / rhs); }
inline uint2 binary_div(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x / rhs, lhs.y / rhs); }
inline uint2 binary_div(uint2 lhs, uint rhs) { return make_uint2(lhs.x / rhs, lhs.y / rhs); }
inline uniform uint2 binary_div(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs / rhs.x, lhs / rhs.y); }
inline uint2 binary_div(uint lhs, uniform uint2 rhs) { return make_uint2(lhs / rhs.x, lhs / rhs.y); }
inline uint2 binary_div(uniform uint lhs, uint2 rhs) { return make_uint2(lhs / rhs.x, lhs / rhs.y); }
inline uint2 binary_div(uint lhs, uint2 rhs) { return make_uint2(lhs / rhs.x, lhs / rhs.y); }
inline uniform uint3 binary_div(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uint3 binary_div(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uint3 binary_div(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uint3 binary_div(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uniform uint3 binary_div(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uint3 binary_div(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uint3 binary_div(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uint3 binary_div(uint3 lhs, uint rhs) { return make_uint3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uniform uint3 binary_div(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uint3 binary_div(uint lhs, uniform uint3 rhs) { return make_uint3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uint3 binary_div(uniform uint lhs, uint3 rhs) { return make_uint3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uint3 binary_div(uint lhs, uint3 rhs) { return make_uint3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uniform uint4 binary_div(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uint4 binary_div(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uint4 binary_div(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uint4 binary_div(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uniform uint4 binary_div(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uint4 binary_div(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uint4 binary_div(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uint4 binary_div(uint4 lhs, uint rhs) { return make_uint4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uniform uint4 binary_div(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline uint4 binary_div(uint lhs, uniform uint4 rhs) { return make_uint4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline uint4 binary_div(uniform uint lhs, uint4 rhs) { return make_uint4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline uint4 binary_div(uint lhs, uint4 rhs) { return make_uint4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline uniform float binary_div(uniform float lhs, uniform float rhs) { return lhs / rhs; }
inline float binary_div(float lhs, uniform float rhs) { return lhs / rhs; }
inline float binary_div(uniform float lhs, float rhs) { return lhs / rhs; }
inline float binary_div(float lhs, float rhs) { return lhs / rhs; }
inline uniform float2 binary_div(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline float2 binary_div(float2 lhs, uniform float2 rhs) { return make_float2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline float2 binary_div(uniform float2 lhs, float2 rhs) { return make_float2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline float2 binary_div(float2 lhs, float2 rhs) { return make_float2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uniform float2 binary_div(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.x / rhs, lhs.y / rhs); }
inline float2 binary_div(float2 lhs, uniform float rhs) { return make_float2(lhs.x / rhs, lhs.y / rhs); }
inline float2 binary_div(uniform float2 lhs, float rhs) { return make_float2(lhs.x / rhs, lhs.y / rhs); }
inline float2 binary_div(float2 lhs, float rhs) { return make_float2(lhs.x / rhs, lhs.y / rhs); }
inline uniform float2 binary_div(uniform float lhs, uniform float2 rhs) { return make_float2(lhs / rhs.x, lhs / rhs.y); }
inline float2 binary_div(float lhs, uniform float2 rhs) { return make_float2(lhs / rhs.x, lhs / rhs.y); }
inline float2 binary_div(uniform float lhs, float2 rhs) { return make_float2(lhs / rhs.x, lhs / rhs.y); }
inline float2 binary_div(float lhs, float2 rhs) { return make_float2(lhs / rhs.x, lhs / rhs.y); }
inline uniform float3 binary_div(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline float3 binary_div(float3 lhs, uniform float3 rhs) { return make_float3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline float3 binary_div(uniform float3 lhs, float3 rhs) { return make_float3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline float3 binary_div(float3 lhs, float3 rhs) { return make_float3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uniform float3 binary_div(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline float3 binary_div(float3 lhs, uniform float rhs) { return make_float3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline float3 binary_div(uniform float3 lhs, float rhs) { return make_float3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline float3 binary_div(float3 lhs, float rhs) { return make_float3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uniform float3 binary_div(uniform float lhs, uniform float3 rhs) { return make_float3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline float3 binary_div(float lhs, uniform float3 rhs) { return make_float3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline float3 binary_div(uniform float lhs, float3 rhs) { return make_float3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline float3 binary_div(float lhs, float3 rhs) { return make_float3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uniform float4 binary_div(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline float4 binary_div(float4 lhs, uniform float4 rhs) { return make_float4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline float4 binary_div(uniform float4 lhs, float4 rhs) { return make_float4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline float4 binary_div(float4 lhs, float4 rhs) { return make_float4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uniform float4 binary_div(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline float4 binary_div(float4 lhs, uniform float rhs) { return make_float4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline float4 binary_div(uniform float4 lhs, float rhs) { return make_float4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline float4 binary_div(float4 lhs, float rhs) { return make_float4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uniform float4 binary_div(uniform float lhs, uniform float4 rhs) { return make_float4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline float4 binary_div(float lhs, uniform float4 rhs) { return make_float4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline float4 binary_div(uniform float lhs, float4 rhs) { return make_float4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline float4 binary_div(float lhs, float4 rhs) { return make_float4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }

inline uniform int binary_mod(uniform int lhs, uniform int rhs) { return lhs % rhs; }
inline int binary_mod(int lhs, uniform int rhs) { return lhs % rhs; }
inline int binary_mod(uniform int lhs, int rhs) { return lhs % rhs; }
inline int binary_mod(int lhs, int rhs) { return lhs % rhs; }
inline uniform int2 binary_mod(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline int2 binary_mod(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline int2 binary_mod(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline int2 binary_mod(int2 lhs, int2 rhs) { return make_int2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline uniform int2 binary_mod(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x % rhs, lhs.y % rhs); }
inline int2 binary_mod(int2 lhs, uniform int rhs) { return make_int2(lhs.x % rhs, lhs.y % rhs); }
inline int2 binary_mod(uniform int2 lhs, int rhs) { return make_int2(lhs.x % rhs, lhs.y % rhs); }
inline int2 binary_mod(int2 lhs, int rhs) { return make_int2(lhs.x % rhs, lhs.y % rhs); }
inline uniform int2 binary_mod(uniform int lhs, uniform int2 rhs) { return make_int2(lhs % rhs.x, lhs % rhs.y); }
inline int2 binary_mod(int lhs, uniform int2 rhs) { return make_int2(lhs % rhs.x, lhs % rhs.y); }
inline int2 binary_mod(uniform int lhs, int2 rhs) { return make_int2(lhs % rhs.x, lhs % rhs.y); }
inline int2 binary_mod(int lhs, int2 rhs) { return make_int2(lhs % rhs.x, lhs % rhs.y); }
inline uniform int3 binary_mod(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline int3 binary_mod(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline int3 binary_mod(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline int3 binary_mod(int3 lhs, int3 rhs) { return make_int3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline uniform int3 binary_mod(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline int3 binary_mod(int3 lhs, uniform int rhs) { return make_int3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline int3 binary_mod(uniform int3 lhs, int rhs) { return make_int3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline int3 binary_mod(int3 lhs, int rhs) { return make_int3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline uniform int3 binary_mod(uniform int lhs, uniform int3 rhs) { return make_int3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline int3 binary_mod(int lhs, uniform int3 rhs) { return make_int3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline int3 binary_mod(uniform int lhs, int3 rhs) { return make_int3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline int3 binary_mod(int lhs, int3 rhs) { return make_int3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline uniform int4 binary_mod(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline int4 binary_mod(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline int4 binary_mod(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline int4 binary_mod(int4 lhs, int4 rhs) { return make_int4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline uniform int4 binary_mod(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline int4 binary_mod(int4 lhs, uniform int rhs) { return make_int4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline int4 binary_mod(uniform int4 lhs, int rhs) { return make_int4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline int4 binary_mod(int4 lhs, int rhs) { return make_int4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline uniform int4 binary_mod(uniform int lhs, uniform int4 rhs) { return make_int4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline int4 binary_mod(int lhs, uniform int4 rhs) { return make_int4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline int4 binary_mod(uniform int lhs, int4 rhs) { return make_int4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline int4 binary_mod(int lhs, int4 rhs) { return make_int4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline uniform uint binary_mod(uniform uint lhs, uniform uint rhs) { return lhs % rhs; }
inline uint binary_mod(uint lhs, uniform uint rhs) { return lhs % rhs; }
inline uint binary_mod(uniform uint lhs, uint rhs) { return lhs % rhs; }
inline uint binary_mod(uint lhs, uint rhs) { return lhs % rhs; }
inline uniform uint2 binary_mod(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline uint2 binary_mod(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline uint2 binary_mod(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline uint2 binary_mod(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline uniform uint2 binary_mod(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x % rhs, lhs.y % rhs); }
inline uint2 binary_mod(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x % rhs, lhs.y % rhs); }
inline uint2 binary_mod(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x % rhs, lhs.y % rhs); }
inline uint2 binary_mod(uint2 lhs, uint rhs) { return make_uint2(lhs.x % rhs, lhs.y % rhs); }
inline uniform uint2 binary_mod(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs % rhs.x, lhs % rhs.y); }
inline uint2 binary_mod(uint lhs, uniform uint2 rhs) { return make_uint2(lhs % rhs.x, lhs % rhs.y); }
inline uint2 binary_mod(uniform uint lhs, uint2 rhs) { return make_uint2(lhs % rhs.x, lhs % rhs.y); }
inline uint2 binary_mod(uint lhs, uint2 rhs) { return make_uint2(lhs % rhs.x, lhs % rhs.y); }
inline uniform uint3 binary_mod(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline uint3 binary_mod(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline uint3 binary_mod(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline uint3 binary_mod(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline uniform uint3 binary_mod(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline uint3 binary_mod(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline uint3 binary_mod(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline uint3 binary_mod(uint3 lhs, uint rhs) { return make_uint3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline uniform uint3 binary_mod(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline uint3 binary_mod(uint lhs, uniform uint3 rhs) { return make_uint3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline uint3 binary_mod(uniform uint lhs, uint3 rhs) { return make_uint3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline uint3 binary_mod(uint lhs, uint3 rhs) { return make_uint3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline uniform uint4 binary_mod(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline uint4 binary_mod(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline uint4 binary_mod(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline uint4 binary_mod(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline uniform uint4 binary_mod(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline uint4 binary_mod(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline uint4 binary_mod(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline uint4 binary_mod(uint4 lhs, uint rhs) { return make_uint4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline uniform uint4 binary_mod(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline uint4 binary_mod(uint lhs, uniform uint4 rhs) { return make_uint4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline uint4 binary_mod(uniform uint lhs, uint4 rhs) { return make_uint4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline uint4 binary_mod(uint lhs, uint4 rhs) { return make_uint4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }

inline uniform int binary_shl(uniform int lhs, uniform int rhs) { return lhs << rhs; }
inline int binary_shl(int lhs, uniform int rhs) { return lhs << rhs; }
inline int binary_shl(uniform int lhs, int rhs) { return lhs << rhs; }
inline int binary_shl(int lhs, int rhs) { return lhs << rhs; }
inline uniform int2 binary_shl(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline int2 binary_shl(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline int2 binary_shl(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline int2 binary_shl(int2 lhs, int2 rhs) { return make_int2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline uniform int2 binary_shl(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x << rhs, lhs.y << rhs); }
inline int2 binary_shl(int2 lhs, uniform int rhs) { return make_int2(lhs.x << rhs, lhs.y << rhs); }
inline int2 binary_shl(uniform int2 lhs, int rhs) { return make_int2(lhs.x << rhs, lhs.y << rhs); }
inline int2 binary_shl(int2 lhs, int rhs) { return make_int2(lhs.x << rhs, lhs.y << rhs); }
inline uniform int2 binary_shl(uniform int lhs, uniform int2 rhs) { return make_int2(lhs << rhs.x, lhs << rhs.y); }
inline int2 binary_shl(int lhs, uniform int2 rhs) { return make_int2(lhs << rhs.x, lhs << rhs.y); }
inline int2 binary_shl(uniform int lhs, int2 rhs) { return make_int2(lhs << rhs.x, lhs << rhs.y); }
inline int2 binary_shl(int lhs, int2 rhs) { return make_int2(lhs << rhs.x, lhs << rhs.y); }
inline uniform int3 binary_shl(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline int3 binary_shl(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline int3 binary_shl(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline int3 binary_shl(int3 lhs, int3 rhs) { return make_int3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline uniform int3 binary_shl(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline int3 binary_shl(int3 lhs, uniform int rhs) { return make_int3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline int3 binary_shl(uniform int3 lhs, int rhs) { return make_int3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline int3 binary_shl(int3 lhs, int rhs) { return make_int3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline uniform int3 binary_shl(uniform int lhs, uniform int3 rhs) { return make_int3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline int3 binary_shl(int lhs, uniform int3 rhs) { return make_int3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline int3 binary_shl(uniform int lhs, int3 rhs) { return make_int3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline int3 binary_shl(int lhs, int3 rhs) { return make_int3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline uniform int4 binary_shl(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline int4 binary_shl(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline int4 binary_shl(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline int4 binary_shl(int4 lhs, int4 rhs) { return make_int4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline uniform int4 binary_shl(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline int4 binary_shl(int4 lhs, uniform int rhs) { return make_int4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline int4 binary_shl(uniform int4 lhs, int rhs) { return make_int4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline int4 binary_shl(int4 lhs, int rhs) { return make_int4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline uniform int4 binary_shl(uniform int lhs, uniform int4 rhs) { return make_int4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline int4 binary_shl(int lhs, uniform int4 rhs) { return make_int4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline int4 binary_shl(uniform int lhs, int4 rhs) { return make_int4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline int4 binary_shl(int lhs, int4 rhs) { return make_int4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline uniform uint binary_shl(uniform uint lhs, uniform uint rhs) { return lhs << rhs; }
inline uint binary_shl(uint lhs, uniform uint rhs) { return lhs << rhs; }
inline uint binary_shl(uniform uint lhs, uint rhs) { return lhs << rhs; }
inline uint binary_shl(uint lhs, uint rhs) { return lhs << rhs; }
inline uniform uint2 binary_shl(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline uint2 binary_shl(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline uint2 binary_shl(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline uint2 binary_shl(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline uniform uint2 binary_shl(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x << rhs, lhs.y << rhs); }
inline uint2 binary_shl(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x << rhs, lhs.y << rhs); }
inline uint2 binary_shl(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x << rhs, lhs.y << rhs); }
inline uint2 binary_shl(uint2 lhs, uint rhs) { return make_uint2(lhs.x << rhs, lhs.y << rhs); }
inline uniform uint2 binary_shl(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs << rhs.x, lhs << rhs.y); }
inline uint2 binary_shl(uint lhs, uniform uint2 rhs) { return make_uint2(lhs << rhs.x, lhs << rhs.y); }
inline uint2 binary_shl(uniform uint lhs, uint2 rhs) { return make_uint2(lhs << rhs.x, lhs << rhs.y); }
inline uint2 binary_shl(uint lhs, uint2 rhs) { return make_uint2(lhs << rhs.x, lhs << rhs.y); }
inline uniform uint3 binary_shl(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline uint3 binary_shl(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline uint3 binary_shl(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline uint3 binary_shl(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline uniform uint3 binary_shl(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline uint3 binary_shl(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline uint3 binary_shl(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline uint3 binary_shl(uint3 lhs, uint rhs) { return make_uint3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline uniform uint3 binary_shl(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline uint3 binary_shl(uint lhs, uniform uint3 rhs) { return make_uint3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline uint3 binary_shl(uniform uint lhs, uint3 rhs) { return make_uint3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline uint3 binary_shl(uint lhs, uint3 rhs) { return make_uint3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline uniform uint4 binary_shl(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline uint4 binary_shl(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline uint4 binary_shl(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline uint4 binary_shl(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline uniform uint4 binary_shl(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline uint4 binary_shl(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline uint4 binary_shl(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline uint4 binary_shl(uint4 lhs, uint rhs) { return make_uint4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline uniform uint4 binary_shl(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline uint4 binary_shl(uint lhs, uniform uint4 rhs) { return make_uint4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline uint4 binary_shl(uniform uint lhs, uint4 rhs) { return make_uint4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline uint4 binary_shl(uint lhs, uint4 rhs) { return make_uint4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }

inline uniform int binary_shr(uniform int lhs, uniform int rhs) { return lhs >> rhs; }
inline int binary_shr(int lhs, uniform int rhs) { return lhs >> rhs; }
inline int binary_shr(uniform int lhs, int rhs) { return lhs >> rhs; }
inline int binary_shr(int lhs, int rhs) { return lhs >> rhs; }
inline uniform int2 binary_shr(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline int2 binary_shr(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline int2 binary_shr(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline int2 binary_shr(int2 lhs, int2 rhs) { return make_int2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline uniform int2 binary_shr(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x >> rhs, lhs.y >> rhs); }
inline int2 binary_shr(int2 lhs, uniform int rhs) { return make_int2(lhs.x >> rhs, lhs.y >> rhs); }
inline int2 binary_shr(uniform int2 lhs, int rhs) { return make_int2(lhs.x >> rhs, lhs.y >> rhs); }
inline int2 binary_shr(int2 lhs, int rhs) { return make_int2(lhs.x >> rhs, lhs.y >> rhs); }
inline uniform int2 binary_shr(uniform int lhs, uniform int2 rhs) { return make_int2(lhs >> rhs.x, lhs >> rhs.y); }
inline int2 binary_shr(int lhs, uniform int2 rhs) { return make_int2(lhs >> rhs.x, lhs >> rhs.y); }
inline int2 binary_shr(uniform int lhs, int2 rhs) { return make_int2(lhs >> rhs.x, lhs >> rhs.y); }
inline int2 binary_shr(int lhs, int2 rhs) { return make_int2(lhs >> rhs.x, lhs >> rhs.y); }
inline uniform int3 binary_shr(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline int3 binary_shr(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline int3 binary_shr(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline int3 binary_shr(int3 lhs, int3 rhs) { return make_int3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline uniform int3 binary_shr(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline int3 binary_shr(int3 lhs, uniform int rhs) { return make_int3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline int3 binary_shr(uniform int3 lhs, int rhs) { return make_int3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline int3 binary_shr(int3 lhs, int rhs) { return make_int3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline uniform int3 binary_shr(uniform int lhs, uniform int3 rhs) { return make_int3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline int3 binary_shr(int lhs, uniform int3 rhs) { return make_int3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline int3 binary_shr(uniform int lhs, int3 rhs) { return make_int3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline int3 binary_shr(int lhs, int3 rhs) { return make_int3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline uniform int4 binary_shr(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline int4 binary_shr(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline int4 binary_shr(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline int4 binary_shr(int4 lhs, int4 rhs) { return make_int4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline uniform int4 binary_shr(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline int4 binary_shr(int4 lhs, uniform int rhs) { return make_int4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline int4 binary_shr(uniform int4 lhs, int rhs) { return make_int4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline int4 binary_shr(int4 lhs, int rhs) { return make_int4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline uniform int4 binary_shr(uniform int lhs, uniform int4 rhs) { return make_int4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline int4 binary_shr(int lhs, uniform int4 rhs) { return make_int4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline int4 binary_shr(uniform int lhs, int4 rhs) { return make_int4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline int4 binary_shr(int lhs, int4 rhs) { return make_int4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline uniform uint binary_shr(uniform uint lhs, uniform uint rhs) { return lhs >> rhs; }
inline uint binary_shr(uint lhs, uniform uint rhs) { return lhs >> rhs; }
inline uint binary_shr(uniform uint lhs, uint rhs) { return lhs >> rhs; }
inline uint binary_shr(uint lhs, uint rhs) { return lhs >> rhs; }
inline uniform uint2 binary_shr(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline uint2 binary_shr(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline uint2 binary_shr(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline uint2 binary_shr(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline uniform uint2 binary_shr(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x >> rhs, lhs.y >> rhs); }
inline uint2 binary_shr(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x >> rhs, lhs.y >> rhs); }
inline uint2 binary_shr(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x >> rhs, lhs.y >> rhs); }
inline uint2 binary_shr(uint2 lhs, uint rhs) { return make_uint2(lhs.x >> rhs, lhs.y >> rhs); }
inline uniform uint2 binary_shr(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs >> rhs.x, lhs >> rhs.y); }
inline uint2 binary_shr(uint lhs, uniform uint2 rhs) { return make_uint2(lhs >> rhs.x, lhs >> rhs.y); }
inline uint2 binary_shr(uniform uint lhs, uint2 rhs) { return make_uint2(lhs >> rhs.x, lhs >> rhs.y); }
inline uint2 binary_shr(uint lhs, uint2 rhs) { return make_uint2(lhs >> rhs.x, lhs >> rhs.y); }
inline uniform uint3 binary_shr(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline uint3 binary_shr(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline uint3 binary_shr(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline uint3 binary_shr(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline uniform uint3 binary_shr(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline uint3 binary_shr(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline uint3 binary_shr(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline uint3 binary_shr(uint3 lhs, uint rhs) { return make_uint3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline uniform uint3 binary_shr(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline uint3 binary_shr(uint lhs, uniform uint3 rhs) { return make_uint3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline uint3 binary_shr(uniform uint lhs, uint3 rhs) { return make_uint3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline uint3 binary_shr(uint lhs, uint3 rhs) { return make_uint3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline uniform uint4 binary_shr(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline uint4 binary_shr(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline uint4 binary_shr(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline uint4 binary_shr(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline uniform uint4 binary_shr(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline uint4 binary_shr(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline uint4 binary_shr(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline uint4 binary_shr(uint4 lhs, uint rhs) { return make_uint4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline uniform uint4 binary_shr(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline uint4 binary_shr(uint lhs, uniform uint4 rhs) { return make_uint4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline uint4 binary_shr(uniform uint lhs, uint4 rhs) { return make_uint4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline uint4 binary_shr(uint lhs, uint4 rhs) { return make_uint4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }

inline uniform int binary_bit_or(uniform int lhs, uniform int rhs) { return lhs | rhs; }
inline int binary_bit_or(int lhs, uniform int rhs) { return lhs | rhs; }
inline int binary_bit_or(uniform int lhs, int rhs) { return lhs | rhs; }
inline int binary_bit_or(int lhs, int rhs) { return lhs | rhs; }
inline uniform int2 binary_bit_or(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline int2 binary_bit_or(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline int2 binary_bit_or(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline int2 binary_bit_or(int2 lhs, int2 rhs) { return make_int2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uniform int2 binary_bit_or(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x | rhs, lhs.y | rhs); }
inline int2 binary_bit_or(int2 lhs, uniform int rhs) { return make_int2(lhs.x | rhs, lhs.y | rhs); }
inline int2 binary_bit_or(uniform int2 lhs, int rhs) { return make_int2(lhs.x | rhs, lhs.y | rhs); }
inline int2 binary_bit_or(int2 lhs, int rhs) { return make_int2(lhs.x | rhs, lhs.y | rhs); }
inline uniform int2 binary_bit_or(uniform int lhs, uniform int2 rhs) { return make_int2(lhs | rhs.x, lhs | rhs.y); }
inline int2 binary_bit_or(int lhs, uniform int2 rhs) { return make_int2(lhs | rhs.x, lhs | rhs.y); }
inline int2 binary_bit_or(uniform int lhs, int2 rhs) { return make_int2(lhs | rhs.x, lhs | rhs.y); }
inline int2 binary_bit_or(int lhs, int2 rhs) { return make_int2(lhs | rhs.x, lhs | rhs.y); }
inline uniform int3 binary_bit_or(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline int3 binary_bit_or(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline int3 binary_bit_or(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline int3 binary_bit_or(int3 lhs, int3 rhs) { return make_int3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uniform int3 binary_bit_or(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline int3 binary_bit_or(int3 lhs, uniform int rhs) { return make_int3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline int3 binary_bit_or(uniform int3 lhs, int rhs) { return make_int3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline int3 binary_bit_or(int3 lhs, int rhs) { return make_int3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uniform int3 binary_bit_or(uniform int lhs, uniform int3 rhs) { return make_int3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline int3 binary_bit_or(int lhs, uniform int3 rhs) { return make_int3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline int3 binary_bit_or(uniform int lhs, int3 rhs) { return make_int3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline int3 binary_bit_or(int lhs, int3 rhs) { return make_int3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uniform int4 binary_bit_or(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline int4 binary_bit_or(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline int4 binary_bit_or(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline int4 binary_bit_or(int4 lhs, int4 rhs) { return make_int4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uniform int4 binary_bit_or(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline int4 binary_bit_or(int4 lhs, uniform int rhs) { return make_int4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline int4 binary_bit_or(uniform int4 lhs, int rhs) { return make_int4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline int4 binary_bit_or(int4 lhs, int rhs) { return make_int4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uniform int4 binary_bit_or(uniform int lhs, uniform int4 rhs) { return make_int4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline int4 binary_bit_or(int lhs, uniform int4 rhs) { return make_int4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline int4 binary_bit_or(uniform int lhs, int4 rhs) { return make_int4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline int4 binary_bit_or(int lhs, int4 rhs) { return make_int4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline uniform uint binary_bit_or(uniform uint lhs, uniform uint rhs) { return lhs | rhs; }
inline uint binary_bit_or(uint lhs, uniform uint rhs) { return lhs | rhs; }
inline uint binary_bit_or(uniform uint lhs, uint rhs) { return lhs | rhs; }
inline uint binary_bit_or(uint lhs, uint rhs) { return lhs | rhs; }
inline uniform uint2 binary_bit_or(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uint2 binary_bit_or(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uint2 binary_bit_or(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uint2 binary_bit_or(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uniform uint2 binary_bit_or(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x | rhs, lhs.y | rhs); }
inline uint2 binary_bit_or(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x | rhs, lhs.y | rhs); }
inline uint2 binary_bit_or(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x | rhs, lhs.y | rhs); }
inline uint2 binary_bit_or(uint2 lhs, uint rhs) { return make_uint2(lhs.x | rhs, lhs.y | rhs); }
inline uniform uint2 binary_bit_or(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs | rhs.x, lhs | rhs.y); }
inline uint2 binary_bit_or(uint lhs, uniform uint2 rhs) { return make_uint2(lhs | rhs.x, lhs | rhs.y); }
inline uint2 binary_bit_or(uniform uint lhs, uint2 rhs) { return make_uint2(lhs | rhs.x, lhs | rhs.y); }
inline uint2 binary_bit_or(uint lhs, uint2 rhs) { return make_uint2(lhs | rhs.x, lhs | rhs.y); }
inline uniform uint3 binary_bit_or(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uint3 binary_bit_or(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uint3 binary_bit_or(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uint3 binary_bit_or(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uniform uint3 binary_bit_or(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uint3 binary_bit_or(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uint3 binary_bit_or(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uint3 binary_bit_or(uint3 lhs, uint rhs) { return make_uint3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uniform uint3 binary_bit_or(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uint3 binary_bit_or(uint lhs, uniform uint3 rhs) { return make_uint3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uint3 binary_bit_or(uniform uint lhs, uint3 rhs) { return make_uint3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uint3 binary_bit_or(uint lhs, uint3 rhs) { return make_uint3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uniform uint4 binary_bit_or(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uint4 binary_bit_or(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uint4 binary_bit_or(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uint4 binary_bit_or(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uniform uint4 binary_bit_or(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uint4 binary_bit_or(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uint4 binary_bit_or(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uint4 binary_bit_or(uint4 lhs, uint rhs) { return make_uint4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uniform uint4 binary_bit_or(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline uint4 binary_bit_or(uint lhs, uniform uint4 rhs) { return make_uint4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline uint4 binary_bit_or(uniform uint lhs, uint4 rhs) { return make_uint4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline uint4 binary_bit_or(uint lhs, uint4 rhs) { return make_uint4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline uniform bool binary_bit_or(uniform bool lhs, uniform bool rhs) { return lhs | rhs; }
inline bool binary_bit_or(bool lhs, uniform bool rhs) { return lhs | rhs; }
inline bool binary_bit_or(uniform bool lhs, bool rhs) { return lhs | rhs; }
inline bool binary_bit_or(bool lhs, bool rhs) { return lhs | rhs; }
inline uniform bool2 binary_bit_or(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline bool2 binary_bit_or(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline bool2 binary_bit_or(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline bool2 binary_bit_or(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uniform bool2 binary_bit_or(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x | rhs, lhs.y | rhs); }
inline bool2 binary_bit_or(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x | rhs, lhs.y | rhs); }
inline bool2 binary_bit_or(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x | rhs, lhs.y | rhs); }
inline bool2 binary_bit_or(bool2 lhs, bool rhs) { return make_bool2(lhs.x | rhs, lhs.y | rhs); }
inline uniform bool2 binary_bit_or(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs | rhs.x, lhs | rhs.y); }
inline bool2 binary_bit_or(bool lhs, uniform bool2 rhs) { return make_bool2(lhs | rhs.x, lhs | rhs.y); }
inline bool2 binary_bit_or(uniform bool lhs, bool2 rhs) { return make_bool2(lhs | rhs.x, lhs | rhs.y); }
inline bool2 binary_bit_or(bool lhs, bool2 rhs) { return make_bool2(lhs | rhs.x, lhs | rhs.y); }
inline uniform bool3 binary_bit_or(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline bool3 binary_bit_or(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline bool3 binary_bit_or(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline bool3 binary_bit_or(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uniform bool3 binary_bit_or(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline bool3 binary_bit_or(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline bool3 binary_bit_or(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline bool3 binary_bit_or(bool3 lhs, bool rhs) { return make_bool3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uniform bool3 binary_bit_or(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline bool3 binary_bit_or(bool lhs, uniform bool3 rhs) { return make_bool3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline bool3 binary_bit_or(uniform bool lhs, bool3 rhs) { return make_bool3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline bool3 binary_bit_or(bool lhs, bool3 rhs) { return make_bool3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uniform bool4 binary_bit_or(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline bool4 binary_bit_or(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline bool4 binary_bit_or(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline bool4 binary_bit_or(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uniform bool4 binary_bit_or(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline bool4 binary_bit_or(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline bool4 binary_bit_or(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline bool4 binary_bit_or(bool4 lhs, bool rhs) { return make_bool4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uniform bool4 binary_bit_or(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline bool4 binary_bit_or(bool lhs, uniform bool4 rhs) { return make_bool4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline bool4 binary_bit_or(uniform bool lhs, bool4 rhs) { return make_bool4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline bool4 binary_bit_or(bool lhs, bool4 rhs) { return make_bool4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }

inline uniform int binary_bit_and(uniform int lhs, uniform int rhs) { return lhs & rhs; }
inline int binary_bit_and(int lhs, uniform int rhs) { return lhs & rhs; }
inline int binary_bit_and(uniform int lhs, int rhs) { return lhs & rhs; }
inline int binary_bit_and(int lhs, int rhs) { return lhs & rhs; }
inline uniform int2 binary_bit_and(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline int2 binary_bit_and(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline int2 binary_bit_and(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline int2 binary_bit_and(int2 lhs, int2 rhs) { return make_int2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uniform int2 binary_bit_and(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x & rhs, lhs.y & rhs); }
inline int2 binary_bit_and(int2 lhs, uniform int rhs) { return make_int2(lhs.x & rhs, lhs.y & rhs); }
inline int2 binary_bit_and(uniform int2 lhs, int rhs) { return make_int2(lhs.x & rhs, lhs.y & rhs); }
inline int2 binary_bit_and(int2 lhs, int rhs) { return make_int2(lhs.x & rhs, lhs.y & rhs); }
inline uniform int2 binary_bit_and(uniform int lhs, uniform int2 rhs) { return make_int2(lhs & rhs.x, lhs & rhs.y); }
inline int2 binary_bit_and(int lhs, uniform int2 rhs) { return make_int2(lhs & rhs.x, lhs & rhs.y); }
inline int2 binary_bit_and(uniform int lhs, int2 rhs) { return make_int2(lhs & rhs.x, lhs & rhs.y); }
inline int2 binary_bit_and(int lhs, int2 rhs) { return make_int2(lhs & rhs.x, lhs & rhs.y); }
inline uniform int3 binary_bit_and(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline int3 binary_bit_and(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline int3 binary_bit_and(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline int3 binary_bit_and(int3 lhs, int3 rhs) { return make_int3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uniform int3 binary_bit_and(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline int3 binary_bit_and(int3 lhs, uniform int rhs) { return make_int3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline int3 binary_bit_and(uniform int3 lhs, int rhs) { return make_int3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline int3 binary_bit_and(int3 lhs, int rhs) { return make_int3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uniform int3 binary_bit_and(uniform int lhs, uniform int3 rhs) { return make_int3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline int3 binary_bit_and(int lhs, uniform int3 rhs) { return make_int3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline int3 binary_bit_and(uniform int lhs, int3 rhs) { return make_int3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline int3 binary_bit_and(int lhs, int3 rhs) { return make_int3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uniform int4 binary_bit_and(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline int4 binary_bit_and(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline int4 binary_bit_and(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline int4 binary_bit_and(int4 lhs, int4 rhs) { return make_int4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uniform int4 binary_bit_and(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline int4 binary_bit_and(int4 lhs, uniform int rhs) { return make_int4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline int4 binary_bit_and(uniform int4 lhs, int rhs) { return make_int4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline int4 binary_bit_and(int4 lhs, int rhs) { return make_int4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uniform int4 binary_bit_and(uniform int lhs, uniform int4 rhs) { return make_int4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline int4 binary_bit_and(int lhs, uniform int4 rhs) { return make_int4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline int4 binary_bit_and(uniform int lhs, int4 rhs) { return make_int4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline int4 binary_bit_and(int lhs, int4 rhs) { return make_int4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline uniform uint binary_bit_and(uniform uint lhs, uniform uint rhs) { return lhs & rhs; }
inline uint binary_bit_and(uint lhs, uniform uint rhs) { return lhs & rhs; }
inline uint binary_bit_and(uniform uint lhs, uint rhs) { return lhs & rhs; }
inline uint binary_bit_and(uint lhs, uint rhs) { return lhs & rhs; }
inline uniform uint2 binary_bit_and(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uint2 binary_bit_and(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uint2 binary_bit_and(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uint2 binary_bit_and(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uniform uint2 binary_bit_and(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x & rhs, lhs.y & rhs); }
inline uint2 binary_bit_and(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x & rhs, lhs.y & rhs); }
inline uint2 binary_bit_and(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x & rhs, lhs.y & rhs); }
inline uint2 binary_bit_and(uint2 lhs, uint rhs) { return make_uint2(lhs.x & rhs, lhs.y & rhs); }
inline uniform uint2 binary_bit_and(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs & rhs.x, lhs & rhs.y); }
inline uint2 binary_bit_and(uint lhs, uniform uint2 rhs) { return make_uint2(lhs & rhs.x, lhs & rhs.y); }
inline uint2 binary_bit_and(uniform uint lhs, uint2 rhs) { return make_uint2(lhs & rhs.x, lhs & rhs.y); }
inline uint2 binary_bit_and(uint lhs, uint2 rhs) { return make_uint2(lhs & rhs.x, lhs & rhs.y); }
inline uniform uint3 binary_bit_and(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uint3 binary_bit_and(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uint3 binary_bit_and(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uint3 binary_bit_and(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uniform uint3 binary_bit_and(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uint3 binary_bit_and(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uint3 binary_bit_and(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uint3 binary_bit_and(uint3 lhs, uint rhs) { return make_uint3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uniform uint3 binary_bit_and(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uint3 binary_bit_and(uint lhs, uniform uint3 rhs) { return make_uint3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uint3 binary_bit_and(uniform uint lhs, uint3 rhs) { return make_uint3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uint3 binary_bit_and(uint lhs, uint3 rhs) { return make_uint3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uniform uint4 binary_bit_and(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uint4 binary_bit_and(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uint4 binary_bit_and(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uint4 binary_bit_and(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uniform uint4 binary_bit_and(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uint4 binary_bit_and(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uint4 binary_bit_and(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uint4 binary_bit_and(uint4 lhs, uint rhs) { return make_uint4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uniform uint4 binary_bit_and(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline uint4 binary_bit_and(uint lhs, uniform uint4 rhs) { return make_uint4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline uint4 binary_bit_and(uniform uint lhs, uint4 rhs) { return make_uint4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline uint4 binary_bit_and(uint lhs, uint4 rhs) { return make_uint4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline uniform bool binary_bit_and(uniform bool lhs, uniform bool rhs) { return lhs & rhs; }
inline bool binary_bit_and(bool lhs, uniform bool rhs) { return lhs & rhs; }
inline bool binary_bit_and(uniform bool lhs, bool rhs) { return lhs & rhs; }
inline bool binary_bit_and(bool lhs, bool rhs) { return lhs & rhs; }
inline uniform bool2 binary_bit_and(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline bool2 binary_bit_and(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline bool2 binary_bit_and(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline bool2 binary_bit_and(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uniform bool2 binary_bit_and(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x & rhs, lhs.y & rhs); }
inline bool2 binary_bit_and(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x & rhs, lhs.y & rhs); }
inline bool2 binary_bit_and(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x & rhs, lhs.y & rhs); }
inline bool2 binary_bit_and(bool2 lhs, bool rhs) { return make_bool2(lhs.x & rhs, lhs.y & rhs); }
inline uniform bool2 binary_bit_and(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs & rhs.x, lhs & rhs.y); }
inline bool2 binary_bit_and(bool lhs, uniform bool2 rhs) { return make_bool2(lhs & rhs.x, lhs & rhs.y); }
inline bool2 binary_bit_and(uniform bool lhs, bool2 rhs) { return make_bool2(lhs & rhs.x, lhs & rhs.y); }
inline bool2 binary_bit_and(bool lhs, bool2 rhs) { return make_bool2(lhs & rhs.x, lhs & rhs.y); }
inline uniform bool3 binary_bit_and(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline bool3 binary_bit_and(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline bool3 binary_bit_and(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline bool3 binary_bit_and(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uniform bool3 binary_bit_and(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline bool3 binary_bit_and(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline bool3 binary_bit_and(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline bool3 binary_bit_and(bool3 lhs, bool rhs) { return make_bool3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uniform bool3 binary_bit_and(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline bool3 binary_bit_and(bool lhs, uniform bool3 rhs) { return make_bool3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline bool3 binary_bit_and(uniform bool lhs, bool3 rhs) { return make_bool3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline bool3 binary_bit_and(bool lhs, bool3 rhs) { return make_bool3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uniform bool4 binary_bit_and(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline bool4 binary_bit_and(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline bool4 binary_bit_and(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline bool4 binary_bit_and(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uniform bool4 binary_bit_and(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline bool4 binary_bit_and(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline bool4 binary_bit_and(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline bool4 binary_bit_and(bool4 lhs, bool rhs) { return make_bool4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uniform bool4 binary_bit_and(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline bool4 binary_bit_and(bool lhs, uniform bool4 rhs) { return make_bool4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline bool4 binary_bit_and(uniform bool lhs, bool4 rhs) { return make_bool4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline bool4 binary_bit_and(bool lhs, bool4 rhs) { return make_bool4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }

inline uniform int binary_bit_xor(uniform int lhs, uniform int rhs) { return lhs ^ rhs; }
inline int binary_bit_xor(int lhs, uniform int rhs) { return lhs ^ rhs; }
inline int binary_bit_xor(uniform int lhs, int rhs) { return lhs ^ rhs; }
inline int binary_bit_xor(int lhs, int rhs) { return lhs ^ rhs; }
inline uniform int2 binary_bit_xor(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline int2 binary_bit_xor(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline int2 binary_bit_xor(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline int2 binary_bit_xor(int2 lhs, int2 rhs) { return make_int2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uniform int2 binary_bit_xor(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline int2 binary_bit_xor(int2 lhs, uniform int rhs) { return make_int2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline int2 binary_bit_xor(uniform int2 lhs, int rhs) { return make_int2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline int2 binary_bit_xor(int2 lhs, int rhs) { return make_int2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uniform int2 binary_bit_xor(uniform int lhs, uniform int2 rhs) { return make_int2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline int2 binary_bit_xor(int lhs, uniform int2 rhs) { return make_int2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline int2 binary_bit_xor(uniform int lhs, int2 rhs) { return make_int2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline int2 binary_bit_xor(int lhs, int2 rhs) { return make_int2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uniform int3 binary_bit_xor(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline int3 binary_bit_xor(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline int3 binary_bit_xor(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline int3 binary_bit_xor(int3 lhs, int3 rhs) { return make_int3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uniform int3 binary_bit_xor(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline int3 binary_bit_xor(int3 lhs, uniform int rhs) { return make_int3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline int3 binary_bit_xor(uniform int3 lhs, int rhs) { return make_int3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline int3 binary_bit_xor(int3 lhs, int rhs) { return make_int3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uniform int3 binary_bit_xor(uniform int lhs, uniform int3 rhs) { return make_int3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline int3 binary_bit_xor(int lhs, uniform int3 rhs) { return make_int3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline int3 binary_bit_xor(uniform int lhs, int3 rhs) { return make_int3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline int3 binary_bit_xor(int lhs, int3 rhs) { return make_int3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uniform int4 binary_bit_xor(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline int4 binary_bit_xor(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline int4 binary_bit_xor(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline int4 binary_bit_xor(int4 lhs, int4 rhs) { return make_int4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uniform int4 binary_bit_xor(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline int4 binary_bit_xor(int4 lhs, uniform int rhs) { return make_int4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline int4 binary_bit_xor(uniform int4 lhs, int rhs) { return make_int4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline int4 binary_bit_xor(int4 lhs, int rhs) { return make_int4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uniform int4 binary_bit_xor(uniform int lhs, uniform int4 rhs) { return make_int4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline int4 binary_bit_xor(int lhs, uniform int4 rhs) { return make_int4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline int4 binary_bit_xor(uniform int lhs, int4 rhs) { return make_int4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline int4 binary_bit_xor(int lhs, int4 rhs) { return make_int4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline uniform uint binary_bit_xor(uniform uint lhs, uniform uint rhs) { return lhs ^ rhs; }
inline uint binary_bit_xor(uint lhs, uniform uint rhs) { return lhs ^ rhs; }
inline uint binary_bit_xor(uniform uint lhs, uint rhs) { return lhs ^ rhs; }
inline uint binary_bit_xor(uint lhs, uint rhs) { return lhs ^ rhs; }
inline uniform uint2 binary_bit_xor(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uint2 binary_bit_xor(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uint2 binary_bit_xor(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uint2 binary_bit_xor(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uniform uint2 binary_bit_xor(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uint2 binary_bit_xor(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uint2 binary_bit_xor(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uint2 binary_bit_xor(uint2 lhs, uint rhs) { return make_uint2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uniform uint2 binary_bit_xor(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uint2 binary_bit_xor(uint lhs, uniform uint2 rhs) { return make_uint2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uint2 binary_bit_xor(uniform uint lhs, uint2 rhs) { return make_uint2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uint2 binary_bit_xor(uint lhs, uint2 rhs) { return make_uint2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uniform uint3 binary_bit_xor(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uint3 binary_bit_xor(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uint3 binary_bit_xor(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uint3 binary_bit_xor(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uniform uint3 binary_bit_xor(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uint3 binary_bit_xor(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uint3 binary_bit_xor(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uint3 binary_bit_xor(uint3 lhs, uint rhs) { return make_uint3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uniform uint3 binary_bit_xor(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uint3 binary_bit_xor(uint lhs, uniform uint3 rhs) { return make_uint3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uint3 binary_bit_xor(uniform uint lhs, uint3 rhs) { return make_uint3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uint3 binary_bit_xor(uint lhs, uint3 rhs) { return make_uint3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uniform uint4 binary_bit_xor(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uint4 binary_bit_xor(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uint4 binary_bit_xor(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uint4 binary_bit_xor(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uniform uint4 binary_bit_xor(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uint4 binary_bit_xor(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uint4 binary_bit_xor(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uint4 binary_bit_xor(uint4 lhs, uint rhs) { return make_uint4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uniform uint4 binary_bit_xor(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline uint4 binary_bit_xor(uint lhs, uniform uint4 rhs) { return make_uint4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline uint4 binary_bit_xor(uniform uint lhs, uint4 rhs) { return make_uint4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline uint4 binary_bit_xor(uint lhs, uint4 rhs) { return make_uint4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline uniform bool binary_bit_xor(uniform bool lhs, uniform bool rhs) { return lhs ^ rhs; }
inline bool binary_bit_xor(bool lhs, uniform bool rhs) { return lhs ^ rhs; }
inline bool binary_bit_xor(uniform bool lhs, bool rhs) { return lhs ^ rhs; }
inline bool binary_bit_xor(bool lhs, bool rhs) { return lhs ^ rhs; }
inline uniform bool2 binary_bit_xor(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline bool2 binary_bit_xor(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline bool2 binary_bit_xor(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline bool2 binary_bit_xor(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uniform bool2 binary_bit_xor(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline bool2 binary_bit_xor(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline bool2 binary_bit_xor(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline bool2 binary_bit_xor(bool2 lhs, bool rhs) { return make_bool2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uniform bool2 binary_bit_xor(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline bool2 binary_bit_xor(bool lhs, uniform bool2 rhs) { return make_bool2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline bool2 binary_bit_xor(uniform bool lhs, bool2 rhs) { return make_bool2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline bool2 binary_bit_xor(bool lhs, bool2 rhs) { return make_bool2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uniform bool3 binary_bit_xor(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline bool3 binary_bit_xor(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline bool3 binary_bit_xor(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline bool3 binary_bit_xor(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uniform bool3 binary_bit_xor(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline bool3 binary_bit_xor(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline bool3 binary_bit_xor(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline bool3 binary_bit_xor(bool3 lhs, bool rhs) { return make_bool3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uniform bool3 binary_bit_xor(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline bool3 binary_bit_xor(bool lhs, uniform bool3 rhs) { return make_bool3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline bool3 binary_bit_xor(uniform bool lhs, bool3 rhs) { return make_bool3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline bool3 binary_bit_xor(bool lhs, bool3 rhs) { return make_bool3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uniform bool4 binary_bit_xor(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline bool4 binary_bit_xor(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline bool4 binary_bit_xor(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline bool4 binary_bit_xor(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uniform bool4 binary_bit_xor(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline bool4 binary_bit_xor(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline bool4 binary_bit_xor(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline bool4 binary_bit_xor(bool4 lhs, bool rhs) { return make_bool4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uniform bool4 binary_bit_xor(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline bool4 binary_bit_xor(bool lhs, uniform bool4 rhs) { return make_bool4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline bool4 binary_bit_xor(uniform bool lhs, bool4 rhs) { return make_bool4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline bool4 binary_bit_xor(bool lhs, bool4 rhs) { return make_bool4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }

inline uniform bool binary_or(uniform bool lhs, uniform bool rhs) { return lhs || rhs; }
inline bool binary_or(bool lhs, uniform bool rhs) { return lhs || rhs; }
inline bool binary_or(uniform bool lhs, bool rhs) { return lhs || rhs; }
inline bool binary_or(bool lhs, bool rhs) { return lhs || rhs; }
inline uniform bool2 binary_or(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
inline bool2 binary_or(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
inline bool2 binary_or(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
inline bool2 binary_or(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
inline uniform bool2 binary_or(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x || rhs, lhs.y || rhs); }
inline bool2 binary_or(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x || rhs, lhs.y || rhs); }
inline bool2 binary_or(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x || rhs, lhs.y || rhs); }
inline bool2 binary_or(bool2 lhs, bool rhs) { return make_bool2(lhs.x || rhs, lhs.y || rhs); }
inline uniform bool2 binary_or(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs || rhs.x, lhs || rhs.y); }
inline bool2 binary_or(bool lhs, uniform bool2 rhs) { return make_bool2(lhs || rhs.x, lhs || rhs.y); }
inline bool2 binary_or(uniform bool lhs, bool2 rhs) { return make_bool2(lhs || rhs.x, lhs || rhs.y); }
inline bool2 binary_or(bool lhs, bool2 rhs) { return make_bool2(lhs || rhs.x, lhs || rhs.y); }
inline uniform bool3 binary_or(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
inline bool3 binary_or(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
inline bool3 binary_or(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
inline bool3 binary_or(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
inline uniform bool3 binary_or(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
inline bool3 binary_or(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
inline bool3 binary_or(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
inline bool3 binary_or(bool3 lhs, bool rhs) { return make_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
inline uniform bool3 binary_or(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
inline bool3 binary_or(bool lhs, uniform bool3 rhs) { return make_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
inline bool3 binary_or(uniform bool lhs, bool3 rhs) { return make_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
inline bool3 binary_or(bool lhs, bool3 rhs) { return make_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
inline uniform bool4 binary_or(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
inline bool4 binary_or(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
inline bool4 binary_or(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
inline bool4 binary_or(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
inline uniform bool4 binary_or(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
inline bool4 binary_or(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
inline bool4 binary_or(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
inline bool4 binary_or(bool4 lhs, bool rhs) { return make_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
inline uniform bool4 binary_or(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
inline bool4 binary_or(bool lhs, uniform bool4 rhs) { return make_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
inline bool4 binary_or(uniform bool lhs, bool4 rhs) { return make_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
inline bool4 binary_or(bool lhs, bool4 rhs) { return make_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
inline uniform bool binary_and(uniform bool lhs, uniform bool rhs) { return lhs && rhs; }
inline bool binary_and(bool lhs, uniform bool rhs) { return lhs && rhs; }
inline bool binary_and(uniform bool lhs, bool rhs) { return lhs && rhs; }
inline bool binary_and(bool lhs, bool rhs) { return lhs && rhs; }
inline uniform bool2 binary_and(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
inline bool2 binary_and(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
inline bool2 binary_and(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
inline bool2 binary_and(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
inline uniform bool2 binary_and(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x && rhs, lhs.y && rhs); }
inline bool2 binary_and(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x && rhs, lhs.y && rhs); }
inline bool2 binary_and(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x && rhs, lhs.y && rhs); }
inline bool2 binary_and(bool2 lhs, bool rhs) { return make_bool2(lhs.x && rhs, lhs.y && rhs); }
inline uniform bool2 binary_and(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs && rhs.x, lhs && rhs.y); }
inline bool2 binary_and(bool lhs, uniform bool2 rhs) { return make_bool2(lhs && rhs.x, lhs && rhs.y); }
inline bool2 binary_and(uniform bool lhs, bool2 rhs) { return make_bool2(lhs && rhs.x, lhs && rhs.y); }
inline bool2 binary_and(bool lhs, bool2 rhs) { return make_bool2(lhs && rhs.x, lhs && rhs.y); }
inline uniform bool3 binary_and(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
inline bool3 binary_and(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
inline bool3 binary_and(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
inline bool3 binary_and(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
inline uniform bool3 binary_and(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
inline bool3 binary_and(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
inline bool3 binary_and(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
inline bool3 binary_and(bool3 lhs, bool rhs) { return make_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
inline uniform bool3 binary_and(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
inline bool3 binary_and(bool lhs, uniform bool3 rhs) { return make_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
inline bool3 binary_and(uniform bool lhs, bool3 rhs) { return make_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
inline bool3 binary_and(bool lhs, bool3 rhs) { return make_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
inline uniform bool4 binary_and(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
inline bool4 binary_and(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
inline bool4 binary_and(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
inline bool4 binary_and(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
inline uniform bool4 binary_and(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
inline bool4 binary_and(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
inline bool4 binary_and(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
inline bool4 binary_and(bool4 lhs, bool rhs) { return make_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
inline uniform bool4 binary_and(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
inline bool4 binary_and(bool lhs, uniform bool4 rhs) { return make_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
inline bool4 binary_and(uniform bool lhs, bool4 rhs) { return make_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
inline bool4 binary_and(bool lhs, bool4 rhs) { return make_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
