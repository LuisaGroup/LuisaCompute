// constants
#define M_E         2.71828182845904523536028747135266250f   /* e              */
#define M_LOG2E     1.44269504088896340735992468100189214f   /* log2(e)        */
#define M_LOG10E    0.434294481903251827651128918916605082f  /* log10(e)       */
#define M_LN2       0.693147180559945309417232121458176568f  /* loge(2)        */
#define M_LN10      2.30258509299404568401799145468436421f   /* loge(10)       */
#define M_PI        3.14159265358979323846264338327950288f   /* pi             */
#define M_PI_2      1.57079632679489661923132169163975144f   /* pi/2           */
#define M_PI_4      0.785398163397448309615660845819875721f  /* pi/4           */
#define M_1_PI      0.318309886183790671537767526745028724f  /* 1/pi           */
#define M_2_PI      0.636619772367581343075535053490057448f  /* 2/pi           */
#define M_2_SQRTPI  1.12837916709551257389615890312154517f   /* 2/sqrt(pi)     */
#define M_SQRT2     1.41421356237309504880168872420969808f   /* sqrt(2)        */
#define M_SQRT1_2   0.707106781186547524400844362104849039f  /* 1/sqrt(2)      */
        
typedef int<2> int2;
typedef int<3> int3;
typedef int<4> int4;
typedef uint<2> uint2;
typedef uint<3> uint3;
typedef uint<4> uint4;
typedef float<2> float2;
typedef float<3> float3;
typedef float<4> float4;
typedef bool<2> bool2;
typedef bool<3> bool3;
typedef bool<4> bool4;

inline uniform int2 make_int2() {
    uniform int2 v;
    v.x = v.y = 0;
    return v;
}
inline uniform int3 make_int3() {
    uniform int3 v;
    v.x = v.y = v.z = 0;
    return v;
}
inline uniform int4 make_int4() {
    uniform int4 v;
    v.x = v.y = v.z = v.w = 0;
    return v;
}

inline uniform uint2 make_uint2() {
    uniform uint2 v;
    v.x = v.y = 0;
    return v;
}
inline uniform uint3 make_uint3() {
    uniform uint3 v;
    v.x = v.y = v.z = 0;
    return v;
}
inline uniform uint4 make_uint4() {
    uniform uint4 v;
    v.x = v.y = v.z = v.w = 0;
    return v;
}

inline uniform float2 make_float2() {
    uniform float2 v;
    v.x = v.y = 0;
    return v;
}
inline uniform float3 make_float3() {
    uniform float3 v;
    v.x = v.y = v.z = 0;
    return v;
}
inline uniform float4 make_float4() {
    uniform float4 v;
    v.x = v.y = v.z = v.w = 0;
    return v;
}

inline uniform bool2 make_bool2() {
    uniform bool2 v;
    v.x = v.y = 0;
    return v;
}
inline uniform bool3 make_bool3() {
    uniform bool3 v;
    v.x = v.y = v.z = 0;
    return v;
}
inline uniform bool4 make_bool4() {
    uniform bool4 v;
    v.x = v.y = v.z = v.w = 0;
    return v;
}

// make_int2 functions
inline int2 make_int2(int s) {
    int2 v;
    v.x = v.y = s;
    return v;
}
inline int2 make_int2(int x, int y) {
    int2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline int2 make_int2(int2 v) {
    return v;
}
inline int2 make_int2(int3 v) {
    int2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline int2 make_int2(int4 v) {
    int2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_int3 functions
inline int3 make_int3(int s) {
    int3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline int3 make_int3(int x, int y, int z) {
    int3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline int3 make_int3(int x, int2 yz) {
    int3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline int3 make_int3(int2 xy, int z) {
    int3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline int3 make_int3(int3 v) {
    return v;
}
inline int3 make_int3(int4 v) {
    int3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_int4 functions
inline int4 make_int4(int s) {
    int4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline int4 make_int4(int x, int y, int z, int w) {
    int4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline int4 make_int4(int x, int y, int2 zw) {
    int4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline int4 make_int4(int x, int2 yz, int w) {
    int4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline int4 make_int4(int2 xy, int z, int w) {
    int4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline int4 make_int4(int2 xy, int2 zw) {
    int4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline int4 make_int4(int x, int3 yzw) {
    int4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline int4 make_int4(int3 xyz, int w) {
    int4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline int4 make_int4(int4 v) {
    return v;
}

// make_int2 functions
inline uniform int2 make_int2(uniform int s) {
    uniform int2 v;
    v.x = v.y = s;
    return v;
}
inline uniform int2 make_int2(uniform int x, uniform int y) {
    uniform int2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline uniform int2 make_int2(uniform int2 v) {
    return v;
}
inline uniform int2 make_int2(uniform int3 v) {
    uniform int2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline uniform int2 make_int2(uniform int4 v) {
    uniform int2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_int3 functions
inline uniform int3 make_int3(uniform int s) {
    uniform int3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline uniform int3 make_int3(uniform int x, uniform int y, uniform int z) {
    uniform int3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline uniform int3 make_int3(uniform int x, uniform int2 yz) {
    uniform int3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline uniform int3 make_int3(uniform int2 xy, uniform int z) {
    uniform int3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline uniform int3 make_int3(uniform int3 v) {
    return v;
}
inline uniform int3 make_int3(uniform int4 v) {
    uniform int3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_int4 functions
inline uniform int4 make_int4(uniform int s) {
    uniform int4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int y, uniform int z, uniform int w) {
    uniform int4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int y, uniform int2 zw) {
    uniform int4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int2 yz, uniform int w) {
    uniform int4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline uniform int4 make_int4(uniform int2 xy, uniform int z, uniform int w) {
    uniform int4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform int4 make_int4(uniform int2 xy, uniform int2 zw) {
    uniform int4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform int4 make_int4(uniform int x, uniform int3 yzw) {
    uniform int4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline uniform int4 make_int4(uniform int3 xyz, uniform int w) {
    uniform int4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline uniform int4 make_int4(uniform int4 v) {
    return v;
}

// make_uint2 functions
inline uint2 make_uint2(uint s) {
    uint2 v;
    v.x = v.y = s;
    return v;
}
inline uint2 make_uint2(uint x, uint y) {
    uint2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline uint2 make_uint2(uint2 v) {
    return v;
}
inline uint2 make_uint2(uint3 v) {
    uint2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline uint2 make_uint2(uint4 v) {
    uint2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_uint3 functions
inline uint3 make_uint3(uint s) {
    uint3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline uint3 make_uint3(uint x, uint y, uint z) {
    uint3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline uint3 make_uint3(uint x, uint2 yz) {
    uint3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline uint3 make_uint3(uint2 xy, uint z) {
    uint3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline uint3 make_uint3(uint3 v) {
    return v;
}
inline uint3 make_uint3(uint4 v) {
    uint3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_uint4 functions
inline uint4 make_uint4(uint s) {
    uint4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline uint4 make_uint4(uint x, uint y, uint z, uint w) {
    uint4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline uint4 make_uint4(uint x, uint y, uint2 zw) {
    uint4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uint4 make_uint4(uint x, uint2 yz, uint w) {
    uint4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline uint4 make_uint4(uint2 xy, uint z, uint w) {
    uint4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline uint4 make_uint4(uint2 xy, uint2 zw) {
    uint4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uint4 make_uint4(uint x, uint3 yzw) {
    uint4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline uint4 make_uint4(uint3 xyz, uint w) {
    uint4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline uint4 make_uint4(uint4 v) {
    return v;
}

// make_uint2 functions
inline uniform uint2 make_uint2(uniform uint s) {
    uniform uint2 v;
    v.x = v.y = s;
    return v;
}
inline uniform uint2 make_uint2(uniform uint x, uniform uint y) {
    uniform uint2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline uniform uint2 make_uint2(uniform uint2 v) {
    return v;
}
inline uniform uint2 make_uint2(uniform uint3 v) {
    uniform uint2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform uint4 v) {
    uniform uint2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_uint3 functions
inline uniform uint3 make_uint3(uniform uint s) {
    uniform uint3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline uniform uint3 make_uint3(uniform uint x, uniform uint y, uniform uint z) {
    uniform uint3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline uniform uint3 make_uint3(uniform uint x, uniform uint2 yz) {
    uniform uint3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline uniform uint3 make_uint3(uniform uint2 xy, uniform uint z) {
    uniform uint3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline uniform uint3 make_uint3(uniform uint3 v) {
    return v;
}
inline uniform uint3 make_uint3(uniform uint4 v) {
    uniform uint3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_uint4 functions
inline uniform uint4 make_uint4(uniform uint s) {
    uniform uint4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint y, uniform uint z, uniform uint w) {
    uniform uint4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint y, uniform uint2 zw) {
    uniform uint4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint2 yz, uniform uint w) {
    uniform uint4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint2 xy, uniform uint z, uniform uint w) {
    uniform uint4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint2 xy, uniform uint2 zw) {
    uniform uint4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform uint4 make_uint4(uniform uint x, uniform uint3 yzw) {
    uniform uint4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline uniform uint4 make_uint4(uniform uint3 xyz, uniform uint w) {
    uniform uint4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline uniform uint4 make_uint4(uniform uint4 v) {
    return v;
}

// make_float2 functions
inline float2 make_float2(float s) {
    float2 v;
    v.x = v.y = s;
    return v;
}
inline float2 make_float2(float x, float y) {
    float2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline float2 make_float2(float2 v) {
    return v;
}
inline float2 make_float2(float3 v) {
    float2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline float2 make_float2(float4 v) {
    float2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_float3 functions
inline float3 make_float3(float s) {
    float3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline float3 make_float3(float x, float y, float z) {
    float3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline float3 make_float3(float x, float2 yz) {
    float3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline float3 make_float3(float2 xy, float z) {
    float3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline float3 make_float3(float3 v) {
    return v;
}
inline float3 make_float3(float4 v) {
    float3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_float4 functions
inline float4 make_float4(float s) {
    float4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline float4 make_float4(float x, float y, float z, float w) {
    float4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline float4 make_float4(float x, float y, float2 zw) {
    float4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline float4 make_float4(float x, float2 yz, float w) {
    float4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline float4 make_float4(float2 xy, float z, float w) {
    float4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline float4 make_float4(float2 xy, float2 zw) {
    float4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline float4 make_float4(float x, float3 yzw) {
    float4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline float4 make_float4(float3 xyz, float w) {
    float4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline float4 make_float4(float4 v) {
    return v;
}

// make_float2 functions
inline uniform float2 make_float2(uniform float s) {
    uniform float2 v;
    v.x = v.y = s;
    return v;
}
inline uniform float2 make_float2(uniform float x, uniform float y) {
    uniform float2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline uniform float2 make_float2(uniform float2 v) {
    return v;
}
inline uniform float2 make_float2(uniform float3 v) {
    uniform float2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline uniform float2 make_float2(uniform float4 v) {
    uniform float2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_float3 functions
inline uniform float3 make_float3(uniform float s) {
    uniform float3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline uniform float3 make_float3(uniform float x, uniform float y, uniform float z) {
    uniform float3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline uniform float3 make_float3(uniform float x, uniform float2 yz) {
    uniform float3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline uniform float3 make_float3(uniform float2 xy, uniform float z) {
    uniform float3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline uniform float3 make_float3(uniform float3 v) {
    return v;
}
inline uniform float3 make_float3(uniform float4 v) {
    uniform float3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_float4 functions
inline uniform float4 make_float4(uniform float s) {
    uniform float4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float y, uniform float z, uniform float w) {
    uniform float4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float y, uniform float2 zw) {
    uniform float4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float2 yz, uniform float w) {
    uniform float4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline uniform float4 make_float4(uniform float2 xy, uniform float z, uniform float w) {
    uniform float4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform float4 make_float4(uniform float2 xy, uniform float2 zw) {
    uniform float4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform float4 make_float4(uniform float x, uniform float3 yzw) {
    uniform float4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline uniform float4 make_float4(uniform float3 xyz, uniform float w) {
    uniform float4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline uniform float4 make_float4(uniform float4 v) {
    return v;
}

// make_bool2 functions
inline bool2 make_bool2(bool s) {
    bool2 v;
    v.x = v.y = s;
    return v;
}
inline bool2 make_bool2(bool x, bool y) {
    bool2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline bool2 make_bool2(bool2 v) {
    return v;
}
inline bool2 make_bool2(bool3 v) {
    bool2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline bool2 make_bool2(bool4 v) {
    bool2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_bool3 functions
inline bool3 make_bool3(bool s) {
    bool3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline bool3 make_bool3(bool x, bool y, bool z) {
    bool3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline bool3 make_bool3(bool x, bool2 yz) {
    bool3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline bool3 make_bool3(bool2 xy, bool z) {
    bool3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline bool3 make_bool3(bool3 v) {
    return v;
}
inline bool3 make_bool3(bool4 v) {
    bool3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_bool4 functions
inline bool4 make_bool4(bool s) {
    bool4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline bool4 make_bool4(bool x, bool y, bool z, bool w) {
    bool4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline bool4 make_bool4(bool x, bool y, bool2 zw) {
    bool4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline bool4 make_bool4(bool x, bool2 yz, bool w) {
    bool4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline bool4 make_bool4(bool2 xy, bool z, bool w) {
    bool4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline bool4 make_bool4(bool2 xy, bool2 zw) {
    bool4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline bool4 make_bool4(bool x, bool3 yzw) {
    bool4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline bool4 make_bool4(bool3 xyz, bool w) {
    bool4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline bool4 make_bool4(bool4 v) {
    return v;
}

// make_bool2 functions
inline uniform bool2 make_bool2(uniform bool s) {
    uniform bool2 v;
    v.x = v.y = s;
    return v;
}
inline uniform bool2 make_bool2(uniform bool x, uniform bool y) {
    uniform bool2 v;
    v.x = x;
    v.y = y;
    return v;
}
inline uniform bool2 make_bool2(uniform bool2 v) {
    return v;
}
inline uniform bool2 make_bool2(uniform bool3 v) {
    uniform bool2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform bool4 v) {
    uniform bool2 u;
    u.x = v.x;
    u.y = v.y;
    return u;
}

// make_bool3 functions
inline uniform bool3 make_bool3(uniform bool s) {
    uniform bool3 v;
    v.x = v.y = v.z = s;
    return v;
}
inline uniform bool3 make_bool3(uniform bool x, uniform bool y, uniform bool z) {
    uniform bool3 v;
    v.x = x;
    v.y = y;
    v.z = z;
    return v;
}
inline uniform bool3 make_bool3(uniform bool x, uniform bool2 yz) {
    uniform bool3 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    return v;
}
inline uniform bool3 make_bool3(uniform bool2 xy, uniform bool z) {
    uniform bool3 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    return v;
}
inline uniform bool3 make_bool3(uniform bool3 v) {
    return v;
}
inline uniform bool3 make_bool3(uniform bool4 v) {
    uniform bool3 u;
    u.x = v.x;
    u.y = v.y;
    u.z = v.z;
    return u;
}

// make_bool4 functions
inline uniform bool4 make_bool4(uniform bool s) {
    uniform bool4 v;
    v.x = v.y = v.z = v.w = s;
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool y, uniform bool z, uniform bool w) {
    uniform bool4 v;
    v.x = x;
    v.y = y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool y, uniform bool2 zw) {
    uniform bool4 v;
    v.x = x;
    v.y = y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool2 yz, uniform bool w) {
    uniform bool4 v;
    v.x = x;
    v.y = yz.x;
    v.z = yz.y;
    v.w = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool2 xy, uniform bool z, uniform bool w) {
    uniform bool4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = z;
    v.w = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool2 xy, uniform bool2 zw) {
    uniform bool4 v;
    v.x = xy.x;
    v.y = xy.y;
    v.z = zw.x;
    v.w = zw.y;
    return v;
}
inline uniform bool4 make_bool4(uniform bool x, uniform bool3 yzw) {
    uniform bool4 v;
    v.x = x;
    v.y = yzw.x;
    v.z = yzw.y;
    v.w = yzw.z;
    return v;
}
inline uniform bool4 make_bool4(uniform bool3 xyz, uniform bool w) {
    uniform bool4 v;
    v.x = xyz.x;
    v.y = xyz.y;
    v.z = xyz.z;
    v.w = w;
    return v;
}
inline uniform bool4 make_bool4(uniform bool4 v) {
    return v;
}

// conversions
inline int2 make_int2(uint2 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(uint3 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(uint4 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int3 make_int3(uint3 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int3 make_int3(uint4 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int4 make_int4(uint4 v) {
    int4 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    u.w = (int)v.w;
    return u;
}

// conversions
inline uniform int2 make_int2(uniform uint2 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform uint3 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform uint4 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int3 make_int3(uniform uint3 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int3 make_int3(uniform uint4 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int4 make_int4(uniform uint4 v) {
    uniform int4 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    u.w = (uniform int)v.w;
    return u;
}

// conversions
inline int2 make_int2(float2 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(float3 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(float4 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int3 make_int3(float3 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int3 make_int3(float4 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int4 make_int4(float4 v) {
    int4 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    u.w = (int)v.w;
    return u;
}

// conversions
inline uniform int2 make_int2(uniform float2 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform float3 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform float4 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int3 make_int3(uniform float3 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int3 make_int3(uniform float4 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int4 make_int4(uniform float4 v) {
    uniform int4 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    u.w = (uniform int)v.w;
    return u;
}

// conversions
inline int2 make_int2(bool2 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(bool3 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int2 make_int2(bool4 v) {
    int2 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    return u;
}
inline int3 make_int3(bool3 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int3 make_int3(bool4 v) {
    int3 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    return u;
}
inline int4 make_int4(bool4 v) {
    int4 u;
    u.x = (int)v.x;
    u.y = (int)v.y;
    u.z = (int)v.z;
    u.w = (int)v.w;
    return u;
}

// conversions
inline uniform int2 make_int2(uniform bool2 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform bool3 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int2 make_int2(uniform bool4 v) {
    uniform int2 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    return u;
}
inline uniform int3 make_int3(uniform bool3 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int3 make_int3(uniform bool4 v) {
    uniform int3 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    return u;
}
inline uniform int4 make_int4(uniform bool4 v) {
    uniform int4 u;
    u.x = (uniform int)v.x;
    u.y = (uniform int)v.y;
    u.z = (uniform int)v.z;
    u.w = (uniform int)v.w;
    return u;
}

// conversions
inline uint2 make_uint2(int2 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(int3 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(int4 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint3 make_uint3(int3 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint3 make_uint3(int4 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint4 make_uint4(int4 v) {
    uint4 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    u.w = (uint)v.w;
    return u;
}

// conversions
inline uniform uint2 make_uint2(uniform int2 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform int3 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform int4 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint3 make_uint3(uniform int3 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint3 make_uint3(uniform int4 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint4 make_uint4(uniform int4 v) {
    uniform uint4 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    u.w = (uniform uint)v.w;
    return u;
}

// conversions
inline uint2 make_uint2(float2 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(float3 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(float4 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint3 make_uint3(float3 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint3 make_uint3(float4 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint4 make_uint4(float4 v) {
    uint4 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    u.w = (uint)v.w;
    return u;
}

// conversions
inline uniform uint2 make_uint2(uniform float2 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform float3 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform float4 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint3 make_uint3(uniform float3 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint3 make_uint3(uniform float4 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint4 make_uint4(uniform float4 v) {
    uniform uint4 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    u.w = (uniform uint)v.w;
    return u;
}

// conversions
inline uint2 make_uint2(bool2 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(bool3 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint2 make_uint2(bool4 v) {
    uint2 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    return u;
}
inline uint3 make_uint3(bool3 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint3 make_uint3(bool4 v) {
    uint3 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    return u;
}
inline uint4 make_uint4(bool4 v) {
    uint4 u;
    u.x = (uint)v.x;
    u.y = (uint)v.y;
    u.z = (uint)v.z;
    u.w = (uint)v.w;
    return u;
}

// conversions
inline uniform uint2 make_uint2(uniform bool2 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform bool3 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint2 make_uint2(uniform bool4 v) {
    uniform uint2 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    return u;
}
inline uniform uint3 make_uint3(uniform bool3 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint3 make_uint3(uniform bool4 v) {
    uniform uint3 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    return u;
}
inline uniform uint4 make_uint4(uniform bool4 v) {
    uniform uint4 u;
    u.x = (uniform uint)v.x;
    u.y = (uniform uint)v.y;
    u.z = (uniform uint)v.z;
    u.w = (uniform uint)v.w;
    return u;
}

// conversions
inline float2 make_float2(int2 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(int3 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(int4 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float3 make_float3(int3 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float3 make_float3(int4 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float4 make_float4(int4 v) {
    float4 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    u.w = (float)v.w;
    return u;
}

// conversions
inline uniform float2 make_float2(uniform int2 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform int3 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform int4 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float3 make_float3(uniform int3 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float3 make_float3(uniform int4 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float4 make_float4(uniform int4 v) {
    uniform float4 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    u.w = (uniform float)v.w;
    return u;
}

// conversions
inline float2 make_float2(uint2 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(uint3 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(uint4 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float3 make_float3(uint3 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float3 make_float3(uint4 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float4 make_float4(uint4 v) {
    float4 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    u.w = (float)v.w;
    return u;
}

// conversions
inline uniform float2 make_float2(uniform uint2 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform uint3 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform uint4 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float3 make_float3(uniform uint3 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float3 make_float3(uniform uint4 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float4 make_float4(uniform uint4 v) {
    uniform float4 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    u.w = (uniform float)v.w;
    return u;
}

// conversions
inline float2 make_float2(bool2 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(bool3 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float2 make_float2(bool4 v) {
    float2 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    return u;
}
inline float3 make_float3(bool3 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float3 make_float3(bool4 v) {
    float3 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    return u;
}
inline float4 make_float4(bool4 v) {
    float4 u;
    u.x = (float)v.x;
    u.y = (float)v.y;
    u.z = (float)v.z;
    u.w = (float)v.w;
    return u;
}

// conversions
inline uniform float2 make_float2(uniform bool2 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform bool3 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float2 make_float2(uniform bool4 v) {
    uniform float2 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    return u;
}
inline uniform float3 make_float3(uniform bool3 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float3 make_float3(uniform bool4 v) {
    uniform float3 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    return u;
}
inline uniform float4 make_float4(uniform bool4 v) {
    uniform float4 u;
    u.x = (uniform float)v.x;
    u.y = (uniform float)v.y;
    u.z = (uniform float)v.z;
    u.w = (uniform float)v.w;
    return u;
}

// conversions
inline bool2 make_bool2(int2 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(int3 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(int4 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool3 make_bool3(int3 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool3 make_bool3(int4 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool4 make_bool4(int4 v) {
    bool4 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    u.w = (bool)v.w;
    return u;
}

// conversions
inline uniform bool2 make_bool2(uniform int2 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform int3 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform int4 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool3 make_bool3(uniform int3 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool3 make_bool3(uniform int4 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool4 make_bool4(uniform int4 v) {
    uniform bool4 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    u.w = (uniform bool)v.w;
    return u;
}

// conversions
inline bool2 make_bool2(uint2 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(uint3 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(uint4 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool3 make_bool3(uint3 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool3 make_bool3(uint4 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool4 make_bool4(uint4 v) {
    bool4 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    u.w = (bool)v.w;
    return u;
}

// conversions
inline uniform bool2 make_bool2(uniform uint2 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform uint3 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform uint4 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool3 make_bool3(uniform uint3 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool3 make_bool3(uniform uint4 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool4 make_bool4(uniform uint4 v) {
    uniform bool4 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    u.w = (uniform bool)v.w;
    return u;
}

// conversions
inline bool2 make_bool2(float2 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(float3 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool2 make_bool2(float4 v) {
    bool2 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    return u;
}
inline bool3 make_bool3(float3 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool3 make_bool3(float4 v) {
    bool3 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    return u;
}
inline bool4 make_bool4(float4 v) {
    bool4 u;
    u.x = (bool)v.x;
    u.y = (bool)v.y;
    u.z = (bool)v.z;
    u.w = (bool)v.w;
    return u;
}

// conversions
inline uniform bool2 make_bool2(uniform float2 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform float3 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool2 make_bool2(uniform float4 v) {
    uniform bool2 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    return u;
}
inline uniform bool3 make_bool3(uniform float3 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool3 make_bool3(uniform float4 v) {
    uniform bool3 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    return u;
}
inline uniform bool4 make_bool4(uniform float4 v) {
    uniform bool4 u;
    u.x = (uniform bool)v.x;
    u.y = (uniform bool)v.y;
    u.z = (uniform bool)v.z;
    u.w = (uniform bool)v.w;
    return u;
}

inline bool unary_not(int s) { return !s; }
inline uniform bool unary_not(uniform int s) { return !s; }
inline int unary_plus(int s) { return +s; }
inline int unary_minus(int s) { return -s; }
inline uniform int unary_plus(uniform int s) { return +s; }
inline uniform int unary_minus(uniform int s) { return -s; }
inline int unary_bit_not(int s) { return ~s; }
inline uniform int unary_bit_not(uniform int s) { return ~s; }
inline bool2 unary_not(int2 v) { return make_bool2(!v.x, !v.y); }
inline uniform bool2 unary_not(uniform int2 v) { return make_bool2(!v.x, !v.y); }
inline int2 unary_plus(int2 v) { return make_int2(+v.x, +v.y); }
inline int2 unary_minus(int2 v) { return make_int2(-v.x, -v.y); }
inline uniform int2 unary_plus(uniform int2 v) { return make_int2(+v.x, +v.y); }
inline uniform int2 unary_minus(uniform int2 v) { return make_int2(-v.x, -v.y); }
inline int2 unary_bit_not(int2 v) { return make_int2(~v.x, ~v.y); }
inline int2 unary_bit_not(uniform int2 v) { return make_int2(~v.x, ~v.y); }
inline bool3 unary_not(int3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline uniform bool3 unary_not(uniform int3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline int3 unary_plus(int3 v) { return make_int3(+v.x, +v.y, +v.z); }
inline int3 unary_minus(int3 v) { return make_int3(-v.x, -v.y, -v.z); }
inline uniform int3 unary_plus(uniform int3 v) { return make_int3(+v.x, +v.y, +v.z); }
inline uniform int3 unary_minus(uniform int3 v) { return make_int3(-v.x, -v.y, -v.z); }
inline int3 unary_bit_not(int3 v) { return make_int3(~v.x, ~v.y, ~v.z); }
inline int3 unary_bit_not(uniform int3 v) { return make_int3(~v.x, ~v.y, ~v.z); }
inline bool4 unary_not(int4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline uniform bool4 unary_not(uniform int4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline int4 unary_plus(int4 v) { return make_int4(+v.x, +v.y, +v.z, +v.w); }
inline int4 unary_minus(int4 v) { return make_int4(-v.x, -v.y, -v.z, -v.w); }
inline uniform int4 unary_plus(uniform int4 v) { return make_int4(+v.x, +v.y, +v.z, +v.w); }
inline uniform int4 unary_minus(uniform int4 v) { return make_int4(-v.x, -v.y, -v.z, -v.w); }
inline int4 unary_bit_not(int4 v) { return make_int4(~v.x, ~v.y, ~v.z, ~v.w); }
inline int4 unary_bit_not(uniform int4 v) { return make_int4(~v.x, ~v.y, ~v.z, ~v.w); }

inline bool unary_not(uint s) { return !s; }
inline uniform bool unary_not(uniform uint s) { return !s; }
inline uint unary_plus(uint s) { return +s; }
inline uint unary_minus(uint s) { return -s; }
inline uniform uint unary_plus(uniform uint s) { return +s; }
inline uniform uint unary_minus(uniform uint s) { return -s; }
inline uint unary_bit_not(uint s) { return ~s; }
inline uniform uint unary_bit_not(uniform uint s) { return ~s; }
inline bool2 unary_not(uint2 v) { return make_bool2(!v.x, !v.y); }
inline uniform bool2 unary_not(uniform uint2 v) { return make_bool2(!v.x, !v.y); }
inline uint2 unary_plus(uint2 v) { return make_uint2(+v.x, +v.y); }
inline uint2 unary_minus(uint2 v) { return make_uint2(-v.x, -v.y); }
inline uniform uint2 unary_plus(uniform uint2 v) { return make_uint2(+v.x, +v.y); }
inline uniform uint2 unary_minus(uniform uint2 v) { return make_uint2(-v.x, -v.y); }
inline uint2 unary_bit_not(uint2 v) { return make_uint2(~v.x, ~v.y); }
inline uint2 unary_bit_not(uniform uint2 v) { return make_uint2(~v.x, ~v.y); }
inline bool3 unary_not(uint3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline uniform bool3 unary_not(uniform uint3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline uint3 unary_plus(uint3 v) { return make_uint3(+v.x, +v.y, +v.z); }
inline uint3 unary_minus(uint3 v) { return make_uint3(-v.x, -v.y, -v.z); }
inline uniform uint3 unary_plus(uniform uint3 v) { return make_uint3(+v.x, +v.y, +v.z); }
inline uniform uint3 unary_minus(uniform uint3 v) { return make_uint3(-v.x, -v.y, -v.z); }
inline uint3 unary_bit_not(uint3 v) { return make_uint3(~v.x, ~v.y, ~v.z); }
inline uint3 unary_bit_not(uniform uint3 v) { return make_uint3(~v.x, ~v.y, ~v.z); }
inline bool4 unary_not(uint4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline uniform bool4 unary_not(uniform uint4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline uint4 unary_plus(uint4 v) { return make_uint4(+v.x, +v.y, +v.z, +v.w); }
inline uint4 unary_minus(uint4 v) { return make_uint4(-v.x, -v.y, -v.z, -v.w); }
inline uniform uint4 unary_plus(uniform uint4 v) { return make_uint4(+v.x, +v.y, +v.z, +v.w); }
inline uniform uint4 unary_minus(uniform uint4 v) { return make_uint4(-v.x, -v.y, -v.z, -v.w); }
inline uint4 unary_bit_not(uint4 v) { return make_uint4(~v.x, ~v.y, ~v.z, ~v.w); }
inline uint4 unary_bit_not(uniform uint4 v) { return make_uint4(~v.x, ~v.y, ~v.z, ~v.w); }

inline bool unary_not(float s) { return !s; }
inline uniform bool unary_not(uniform float s) { return !s; }
inline float unary_plus(float s) { return +s; }
inline float unary_minus(float s) { return -s; }
inline uniform float unary_plus(uniform float s) { return +s; }
inline uniform float unary_minus(uniform float s) { return -s; }
inline bool2 unary_not(float2 v) { return make_bool2(!v.x, !v.y); }
inline uniform bool2 unary_not(uniform float2 v) { return make_bool2(!v.x, !v.y); }
inline float2 unary_plus(float2 v) { return make_float2(+v.x, +v.y); }
inline float2 unary_minus(float2 v) { return make_float2(-v.x, -v.y); }
inline uniform float2 unary_plus(uniform float2 v) { return make_float2(+v.x, +v.y); }
inline uniform float2 unary_minus(uniform float2 v) { return make_float2(-v.x, -v.y); }
inline bool3 unary_not(float3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline uniform bool3 unary_not(uniform float3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline float3 unary_plus(float3 v) { return make_float3(+v.x, +v.y, +v.z); }
inline float3 unary_minus(float3 v) { return make_float3(-v.x, -v.y, -v.z); }
inline uniform float3 unary_plus(uniform float3 v) { return make_float3(+v.x, +v.y, +v.z); }
inline uniform float3 unary_minus(uniform float3 v) { return make_float3(-v.x, -v.y, -v.z); }
inline bool4 unary_not(float4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline uniform bool4 unary_not(uniform float4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline float4 unary_plus(float4 v) { return make_float4(+v.x, +v.y, +v.z, +v.w); }
inline float4 unary_minus(float4 v) { return make_float4(-v.x, -v.y, -v.z, -v.w); }
inline uniform float4 unary_plus(uniform float4 v) { return make_float4(+v.x, +v.y, +v.z, +v.w); }
inline uniform float4 unary_minus(uniform float4 v) { return make_float4(-v.x, -v.y, -v.z, -v.w); }

inline bool unary_not(bool s) { return !s; }
inline uniform bool unary_not(uniform bool s) { return !s; }
inline bool2 unary_not(bool2 v) { return make_bool2(!v.x, !v.y); }
inline uniform bool2 unary_not(uniform bool2 v) { return make_bool2(!v.x, !v.y); }
inline bool3 unary_not(bool3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline uniform bool3 unary_not(uniform bool3 v) { return make_bool3(!v.x, !v.y, !v.z); }
inline bool4 unary_not(bool4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }
inline uniform bool4 unary_not(uniform bool4 v) { return make_bool4(!v.x, !v.y, !v.z, !v.w); }

inline uniform bool binary_eq(uniform int lhs, uniform int rhs) { return lhs == rhs; }
inline bool binary_eq(int lhs, uniform int rhs) { return lhs == rhs; }
inline bool binary_eq(uniform int lhs, int rhs) { return lhs == rhs; }
inline bool binary_eq(int lhs, int rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(int2 lhs, int2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline uniform bool2 binary_eq(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(int2 lhs, uniform int rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uniform int2 lhs, int rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(int2 lhs, int rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline uniform bool2 binary_eq(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(int lhs, uniform int2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uniform int lhs, int2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(int lhs, int2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline uniform bool3 binary_eq(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(int3 lhs, int3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline uniform bool3 binary_eq(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(int3 lhs, uniform int rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uniform int3 lhs, int rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(int3 lhs, int rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline uniform bool3 binary_eq(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(int lhs, uniform int3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uniform int lhs, int3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(int lhs, int3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline uniform bool4 binary_eq(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(int4 lhs, int4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline uniform bool4 binary_eq(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(int4 lhs, uniform int rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uniform int4 lhs, int rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(int4 lhs, int rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline uniform bool4 binary_eq(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(int lhs, uniform int4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uniform int lhs, int4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(int lhs, int4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline uniform bool binary_eq(uniform uint lhs, uniform uint rhs) { return lhs == rhs; }
inline bool binary_eq(uint lhs, uniform uint rhs) { return lhs == rhs; }
inline bool binary_eq(uniform uint lhs, uint rhs) { return lhs == rhs; }
inline bool binary_eq(uint lhs, uint rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline uniform bool2 binary_eq(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uint2 lhs, uint rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline uniform bool2 binary_eq(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uint lhs, uniform uint2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uniform uint lhs, uint2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uint lhs, uint2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline uniform bool3 binary_eq(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline uniform bool3 binary_eq(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uint3 lhs, uint rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline uniform bool3 binary_eq(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uint lhs, uniform uint3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uniform uint lhs, uint3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uint lhs, uint3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline uniform bool4 binary_eq(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline uniform bool4 binary_eq(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uint4 lhs, uint rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline uniform bool4 binary_eq(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uint lhs, uniform uint4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uniform uint lhs, uint4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uint lhs, uint4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline uniform bool binary_eq(uniform float lhs, uniform float rhs) { return lhs == rhs; }
inline bool binary_eq(float lhs, uniform float rhs) { return lhs == rhs; }
inline bool binary_eq(uniform float lhs, float rhs) { return lhs == rhs; }
inline bool binary_eq(float lhs, float rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(float2 lhs, float2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline uniform bool2 binary_eq(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(float2 lhs, uniform float rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uniform float2 lhs, float rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(float2 lhs, float rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline uniform bool2 binary_eq(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(float lhs, uniform float2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uniform float lhs, float2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(float lhs, float2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline uniform bool3 binary_eq(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(float3 lhs, float3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline uniform bool3 binary_eq(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(float3 lhs, uniform float rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uniform float3 lhs, float rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(float3 lhs, float rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline uniform bool3 binary_eq(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(float lhs, uniform float3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uniform float lhs, float3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(float lhs, float3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline uniform bool4 binary_eq(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(float4 lhs, float4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline uniform bool4 binary_eq(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(float4 lhs, uniform float rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uniform float4 lhs, float rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(float4 lhs, float rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline uniform bool4 binary_eq(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(float lhs, uniform float4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uniform float lhs, float4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(float lhs, float4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline uniform bool binary_eq(uniform bool lhs, uniform bool rhs) { return lhs == rhs; }
inline bool binary_eq(bool lhs, uniform bool rhs) { return lhs == rhs; }
inline bool binary_eq(uniform bool lhs, bool rhs) { return lhs == rhs; }
inline bool binary_eq(bool lhs, bool rhs) { return lhs == rhs; }
inline uniform bool2 binary_eq(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline bool2 binary_eq(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
inline uniform bool2 binary_eq(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline bool2 binary_eq(bool2 lhs, bool rhs) { return make_bool2(lhs.x == rhs, lhs.y == rhs); }
inline uniform bool2 binary_eq(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(bool lhs, uniform bool2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(uniform bool lhs, bool2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline bool2 binary_eq(bool lhs, bool2 rhs) { return make_bool2(lhs == rhs.x, lhs == rhs.y); }
inline uniform bool3 binary_eq(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline bool3 binary_eq(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
inline uniform bool3 binary_eq(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline bool3 binary_eq(bool3 lhs, bool rhs) { return make_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
inline uniform bool3 binary_eq(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(bool lhs, uniform bool3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(uniform bool lhs, bool3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline bool3 binary_eq(bool lhs, bool3 rhs) { return make_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
inline uniform bool4 binary_eq(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline bool4 binary_eq(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
inline uniform bool4 binary_eq(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline bool4 binary_eq(bool4 lhs, bool rhs) { return make_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
inline uniform bool4 binary_eq(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(bool lhs, uniform bool4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(uniform bool lhs, bool4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
inline bool4 binary_eq(bool lhs, bool4 rhs) { return make_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }

inline uniform bool binary_ne(uniform int lhs, uniform int rhs) { return lhs != rhs; }
inline bool binary_ne(int lhs, uniform int rhs) { return lhs != rhs; }
inline bool binary_ne(uniform int lhs, int rhs) { return lhs != rhs; }
inline bool binary_ne(int lhs, int rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(int2 lhs, int2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline uniform bool2 binary_ne(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(int2 lhs, uniform int rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uniform int2 lhs, int rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(int2 lhs, int rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline uniform bool2 binary_ne(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(int lhs, uniform int2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uniform int lhs, int2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(int lhs, int2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline uniform bool3 binary_ne(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(int3 lhs, int3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline uniform bool3 binary_ne(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(int3 lhs, uniform int rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uniform int3 lhs, int rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(int3 lhs, int rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline uniform bool3 binary_ne(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(int lhs, uniform int3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uniform int lhs, int3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(int lhs, int3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline uniform bool4 binary_ne(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(int4 lhs, int4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline uniform bool4 binary_ne(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(int4 lhs, uniform int rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uniform int4 lhs, int rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(int4 lhs, int rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline uniform bool4 binary_ne(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(int lhs, uniform int4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uniform int lhs, int4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(int lhs, int4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline uniform bool binary_ne(uniform uint lhs, uniform uint rhs) { return lhs != rhs; }
inline bool binary_ne(uint lhs, uniform uint rhs) { return lhs != rhs; }
inline bool binary_ne(uniform uint lhs, uint rhs) { return lhs != rhs; }
inline bool binary_ne(uint lhs, uint rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline uniform bool2 binary_ne(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uint2 lhs, uint rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline uniform bool2 binary_ne(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uint lhs, uniform uint2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uniform uint lhs, uint2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uint lhs, uint2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline uniform bool3 binary_ne(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline uniform bool3 binary_ne(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uint3 lhs, uint rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline uniform bool3 binary_ne(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uint lhs, uniform uint3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uniform uint lhs, uint3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uint lhs, uint3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline uniform bool4 binary_ne(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline uniform bool4 binary_ne(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uint4 lhs, uint rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline uniform bool4 binary_ne(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uint lhs, uniform uint4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uniform uint lhs, uint4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uint lhs, uint4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline uniform bool binary_ne(uniform float lhs, uniform float rhs) { return lhs != rhs; }
inline bool binary_ne(float lhs, uniform float rhs) { return lhs != rhs; }
inline bool binary_ne(uniform float lhs, float rhs) { return lhs != rhs; }
inline bool binary_ne(float lhs, float rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(float2 lhs, float2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline uniform bool2 binary_ne(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(float2 lhs, uniform float rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uniform float2 lhs, float rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(float2 lhs, float rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline uniform bool2 binary_ne(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(float lhs, uniform float2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uniform float lhs, float2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(float lhs, float2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline uniform bool3 binary_ne(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(float3 lhs, float3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline uniform bool3 binary_ne(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(float3 lhs, uniform float rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uniform float3 lhs, float rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(float3 lhs, float rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline uniform bool3 binary_ne(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(float lhs, uniform float3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uniform float lhs, float3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(float lhs, float3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline uniform bool4 binary_ne(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(float4 lhs, float4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline uniform bool4 binary_ne(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(float4 lhs, uniform float rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uniform float4 lhs, float rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(float4 lhs, float rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline uniform bool4 binary_ne(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(float lhs, uniform float4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uniform float lhs, float4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(float lhs, float4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline uniform bool binary_ne(uniform bool lhs, uniform bool rhs) { return lhs != rhs; }
inline bool binary_ne(bool lhs, uniform bool rhs) { return lhs != rhs; }
inline bool binary_ne(uniform bool lhs, bool rhs) { return lhs != rhs; }
inline bool binary_ne(bool lhs, bool rhs) { return lhs != rhs; }
inline uniform bool2 binary_ne(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline bool2 binary_ne(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
inline uniform bool2 binary_ne(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline bool2 binary_ne(bool2 lhs, bool rhs) { return make_bool2(lhs.x != rhs, lhs.y != rhs); }
inline uniform bool2 binary_ne(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(bool lhs, uniform bool2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(uniform bool lhs, bool2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline bool2 binary_ne(bool lhs, bool2 rhs) { return make_bool2(lhs != rhs.x, lhs != rhs.y); }
inline uniform bool3 binary_ne(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline bool3 binary_ne(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
inline uniform bool3 binary_ne(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline bool3 binary_ne(bool3 lhs, bool rhs) { return make_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
inline uniform bool3 binary_ne(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(bool lhs, uniform bool3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(uniform bool lhs, bool3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline bool3 binary_ne(bool lhs, bool3 rhs) { return make_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
inline uniform bool4 binary_ne(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline bool4 binary_ne(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
inline uniform bool4 binary_ne(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline bool4 binary_ne(bool4 lhs, bool rhs) { return make_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
inline uniform bool4 binary_ne(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(bool lhs, uniform bool4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(uniform bool lhs, bool4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
inline bool4 binary_ne(bool lhs, bool4 rhs) { return make_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }

inline uniform bool binary_lt(uniform int lhs, uniform int rhs) { return lhs < rhs; }
inline bool binary_lt(int lhs, uniform int rhs) { return lhs < rhs; }
inline bool binary_lt(uniform int lhs, int rhs) { return lhs < rhs; }
inline bool binary_lt(int lhs, int rhs) { return lhs < rhs; }
inline uniform bool2 binary_lt(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(int2 lhs, int2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline uniform bool2 binary_lt(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(int2 lhs, uniform int rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(uniform int2 lhs, int rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(int2 lhs, int rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline uniform bool2 binary_lt(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(int lhs, uniform int2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(uniform int lhs, int2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(int lhs, int2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline uniform bool3 binary_lt(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(int3 lhs, int3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline uniform bool3 binary_lt(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(int3 lhs, uniform int rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(uniform int3 lhs, int rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(int3 lhs, int rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline uniform bool3 binary_lt(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(int lhs, uniform int3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(uniform int lhs, int3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(int lhs, int3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline uniform bool4 binary_lt(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(int4 lhs, int4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline uniform bool4 binary_lt(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(int4 lhs, uniform int rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(uniform int4 lhs, int rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(int4 lhs, int rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline uniform bool4 binary_lt(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(int lhs, uniform int4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(uniform int lhs, int4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(int lhs, int4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline uniform bool binary_lt(uniform uint lhs, uniform uint rhs) { return lhs < rhs; }
inline bool binary_lt(uint lhs, uniform uint rhs) { return lhs < rhs; }
inline bool binary_lt(uniform uint lhs, uint rhs) { return lhs < rhs; }
inline bool binary_lt(uint lhs, uint rhs) { return lhs < rhs; }
inline uniform bool2 binary_lt(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline uniform bool2 binary_lt(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(uint2 lhs, uint rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline uniform bool2 binary_lt(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(uint lhs, uniform uint2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(uniform uint lhs, uint2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(uint lhs, uint2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline uniform bool3 binary_lt(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline uniform bool3 binary_lt(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(uint3 lhs, uint rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline uniform bool3 binary_lt(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(uint lhs, uniform uint3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(uniform uint lhs, uint3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(uint lhs, uint3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline uniform bool4 binary_lt(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline uniform bool4 binary_lt(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(uint4 lhs, uint rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline uniform bool4 binary_lt(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(uint lhs, uniform uint4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(uniform uint lhs, uint4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(uint lhs, uint4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline uniform bool binary_lt(uniform float lhs, uniform float rhs) { return lhs < rhs; }
inline bool binary_lt(float lhs, uniform float rhs) { return lhs < rhs; }
inline bool binary_lt(uniform float lhs, float rhs) { return lhs < rhs; }
inline bool binary_lt(float lhs, float rhs) { return lhs < rhs; }
inline uniform bool2 binary_lt(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline bool2 binary_lt(float2 lhs, float2 rhs) { return make_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
inline uniform bool2 binary_lt(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(float2 lhs, uniform float rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(uniform float2 lhs, float rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline bool2 binary_lt(float2 lhs, float rhs) { return make_bool2(lhs.x < rhs, lhs.y < rhs); }
inline uniform bool2 binary_lt(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(float lhs, uniform float2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(uniform float lhs, float2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline bool2 binary_lt(float lhs, float2 rhs) { return make_bool2(lhs < rhs.x, lhs < rhs.y); }
inline uniform bool3 binary_lt(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline bool3 binary_lt(float3 lhs, float3 rhs) { return make_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
inline uniform bool3 binary_lt(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(float3 lhs, uniform float rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(uniform float3 lhs, float rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline bool3 binary_lt(float3 lhs, float rhs) { return make_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
inline uniform bool3 binary_lt(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(float lhs, uniform float3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(uniform float lhs, float3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline bool3 binary_lt(float lhs, float3 rhs) { return make_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
inline uniform bool4 binary_lt(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline bool4 binary_lt(float4 lhs, float4 rhs) { return make_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
inline uniform bool4 binary_lt(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(float4 lhs, uniform float rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(uniform float4 lhs, float rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline bool4 binary_lt(float4 lhs, float rhs) { return make_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
inline uniform bool4 binary_lt(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(float lhs, uniform float4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(uniform float lhs, float4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
inline bool4 binary_lt(float lhs, float4 rhs) { return make_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }

inline uniform bool binary_gt(uniform int lhs, uniform int rhs) { return lhs > rhs; }
inline bool binary_gt(int lhs, uniform int rhs) { return lhs > rhs; }
inline bool binary_gt(uniform int lhs, int rhs) { return lhs > rhs; }
inline bool binary_gt(int lhs, int rhs) { return lhs > rhs; }
inline uniform bool2 binary_gt(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(int2 lhs, int2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline uniform bool2 binary_gt(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(int2 lhs, uniform int rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(uniform int2 lhs, int rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(int2 lhs, int rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline uniform bool2 binary_gt(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(int lhs, uniform int2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(uniform int lhs, int2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(int lhs, int2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline uniform bool3 binary_gt(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(int3 lhs, int3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline uniform bool3 binary_gt(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(int3 lhs, uniform int rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(uniform int3 lhs, int rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(int3 lhs, int rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline uniform bool3 binary_gt(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(int lhs, uniform int3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(uniform int lhs, int3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(int lhs, int3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline uniform bool4 binary_gt(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(int4 lhs, int4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline uniform bool4 binary_gt(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(int4 lhs, uniform int rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(uniform int4 lhs, int rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(int4 lhs, int rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline uniform bool4 binary_gt(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(int lhs, uniform int4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(uniform int lhs, int4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(int lhs, int4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline uniform bool binary_gt(uniform uint lhs, uniform uint rhs) { return lhs > rhs; }
inline bool binary_gt(uint lhs, uniform uint rhs) { return lhs > rhs; }
inline bool binary_gt(uniform uint lhs, uint rhs) { return lhs > rhs; }
inline bool binary_gt(uint lhs, uint rhs) { return lhs > rhs; }
inline uniform bool2 binary_gt(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline uniform bool2 binary_gt(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(uint2 lhs, uint rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline uniform bool2 binary_gt(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(uint lhs, uniform uint2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(uniform uint lhs, uint2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(uint lhs, uint2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline uniform bool3 binary_gt(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline uniform bool3 binary_gt(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(uint3 lhs, uint rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline uniform bool3 binary_gt(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(uint lhs, uniform uint3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(uniform uint lhs, uint3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(uint lhs, uint3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline uniform bool4 binary_gt(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline uniform bool4 binary_gt(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(uint4 lhs, uint rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline uniform bool4 binary_gt(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(uint lhs, uniform uint4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(uniform uint lhs, uint4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(uint lhs, uint4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline uniform bool binary_gt(uniform float lhs, uniform float rhs) { return lhs > rhs; }
inline bool binary_gt(float lhs, uniform float rhs) { return lhs > rhs; }
inline bool binary_gt(uniform float lhs, float rhs) { return lhs > rhs; }
inline bool binary_gt(float lhs, float rhs) { return lhs > rhs; }
inline uniform bool2 binary_gt(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline bool2 binary_gt(float2 lhs, float2 rhs) { return make_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
inline uniform bool2 binary_gt(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(float2 lhs, uniform float rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(uniform float2 lhs, float rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline bool2 binary_gt(float2 lhs, float rhs) { return make_bool2(lhs.x > rhs, lhs.y > rhs); }
inline uniform bool2 binary_gt(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(float lhs, uniform float2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(uniform float lhs, float2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline bool2 binary_gt(float lhs, float2 rhs) { return make_bool2(lhs > rhs.x, lhs > rhs.y); }
inline uniform bool3 binary_gt(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline bool3 binary_gt(float3 lhs, float3 rhs) { return make_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
inline uniform bool3 binary_gt(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(float3 lhs, uniform float rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(uniform float3 lhs, float rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline bool3 binary_gt(float3 lhs, float rhs) { return make_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
inline uniform bool3 binary_gt(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(float lhs, uniform float3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(uniform float lhs, float3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline bool3 binary_gt(float lhs, float3 rhs) { return make_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
inline uniform bool4 binary_gt(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline bool4 binary_gt(float4 lhs, float4 rhs) { return make_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
inline uniform bool4 binary_gt(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(float4 lhs, uniform float rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(uniform float4 lhs, float rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline bool4 binary_gt(float4 lhs, float rhs) { return make_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
inline uniform bool4 binary_gt(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(float lhs, uniform float4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(uniform float lhs, float4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
inline bool4 binary_gt(float lhs, float4 rhs) { return make_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }

inline uniform bool binary_le(uniform int lhs, uniform int rhs) { return lhs <= rhs; }
inline bool binary_le(int lhs, uniform int rhs) { return lhs <= rhs; }
inline bool binary_le(uniform int lhs, int rhs) { return lhs <= rhs; }
inline bool binary_le(int lhs, int rhs) { return lhs <= rhs; }
inline uniform bool2 binary_le(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(int2 lhs, int2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline uniform bool2 binary_le(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(int2 lhs, uniform int rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(uniform int2 lhs, int rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(int2 lhs, int rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline uniform bool2 binary_le(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(int lhs, uniform int2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(uniform int lhs, int2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(int lhs, int2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline uniform bool3 binary_le(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(int3 lhs, int3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline uniform bool3 binary_le(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(int3 lhs, uniform int rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(uniform int3 lhs, int rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(int3 lhs, int rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline uniform bool3 binary_le(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(int lhs, uniform int3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(uniform int lhs, int3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(int lhs, int3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline uniform bool4 binary_le(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(int4 lhs, int4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline uniform bool4 binary_le(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(int4 lhs, uniform int rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(uniform int4 lhs, int rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(int4 lhs, int rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline uniform bool4 binary_le(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(int lhs, uniform int4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(uniform int lhs, int4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(int lhs, int4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline uniform bool binary_le(uniform uint lhs, uniform uint rhs) { return lhs <= rhs; }
inline bool binary_le(uint lhs, uniform uint rhs) { return lhs <= rhs; }
inline bool binary_le(uniform uint lhs, uint rhs) { return lhs <= rhs; }
inline bool binary_le(uint lhs, uint rhs) { return lhs <= rhs; }
inline uniform bool2 binary_le(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline uniform bool2 binary_le(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(uint2 lhs, uint rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline uniform bool2 binary_le(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(uint lhs, uniform uint2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(uniform uint lhs, uint2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(uint lhs, uint2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline uniform bool3 binary_le(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline uniform bool3 binary_le(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(uint3 lhs, uint rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline uniform bool3 binary_le(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(uint lhs, uniform uint3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(uniform uint lhs, uint3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(uint lhs, uint3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline uniform bool4 binary_le(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline uniform bool4 binary_le(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(uint4 lhs, uint rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline uniform bool4 binary_le(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(uint lhs, uniform uint4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(uniform uint lhs, uint4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(uint lhs, uint4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline uniform bool binary_le(uniform float lhs, uniform float rhs) { return lhs <= rhs; }
inline bool binary_le(float lhs, uniform float rhs) { return lhs <= rhs; }
inline bool binary_le(uniform float lhs, float rhs) { return lhs <= rhs; }
inline bool binary_le(float lhs, float rhs) { return lhs <= rhs; }
inline uniform bool2 binary_le(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline bool2 binary_le(float2 lhs, float2 rhs) { return make_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
inline uniform bool2 binary_le(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(float2 lhs, uniform float rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(uniform float2 lhs, float rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline bool2 binary_le(float2 lhs, float rhs) { return make_bool2(lhs.x <= rhs, lhs.y <= rhs); }
inline uniform bool2 binary_le(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(float lhs, uniform float2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(uniform float lhs, float2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline bool2 binary_le(float lhs, float2 rhs) { return make_bool2(lhs <= rhs.x, lhs <= rhs.y); }
inline uniform bool3 binary_le(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline bool3 binary_le(float3 lhs, float3 rhs) { return make_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
inline uniform bool3 binary_le(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(float3 lhs, uniform float rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(uniform float3 lhs, float rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline bool3 binary_le(float3 lhs, float rhs) { return make_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
inline uniform bool3 binary_le(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(float lhs, uniform float3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(uniform float lhs, float3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline bool3 binary_le(float lhs, float3 rhs) { return make_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
inline uniform bool4 binary_le(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline bool4 binary_le(float4 lhs, float4 rhs) { return make_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
inline uniform bool4 binary_le(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(float4 lhs, uniform float rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(uniform float4 lhs, float rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline bool4 binary_le(float4 lhs, float rhs) { return make_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
inline uniform bool4 binary_le(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(float lhs, uniform float4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(uniform float lhs, float4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
inline bool4 binary_le(float lhs, float4 rhs) { return make_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }

inline uniform bool binary_ge(uniform int lhs, uniform int rhs) { return lhs >= rhs; }
inline bool binary_ge(int lhs, uniform int rhs) { return lhs >= rhs; }
inline bool binary_ge(uniform int lhs, int rhs) { return lhs >= rhs; }
inline bool binary_ge(int lhs, int rhs) { return lhs >= rhs; }
inline uniform bool2 binary_ge(uniform int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(int2 lhs, uniform int2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(uniform int2 lhs, int2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(int2 lhs, int2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline uniform bool2 binary_ge(uniform int2 lhs, uniform int rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(int2 lhs, uniform int rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(uniform int2 lhs, int rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(int2 lhs, int rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline uniform bool2 binary_ge(uniform int lhs, uniform int2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(int lhs, uniform int2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(uniform int lhs, int2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(int lhs, int2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline uniform bool3 binary_ge(uniform int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(int3 lhs, uniform int3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(uniform int3 lhs, int3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(int3 lhs, int3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline uniform bool3 binary_ge(uniform int3 lhs, uniform int rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(int3 lhs, uniform int rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(uniform int3 lhs, int rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(int3 lhs, int rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline uniform bool3 binary_ge(uniform int lhs, uniform int3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(int lhs, uniform int3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(uniform int lhs, int3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(int lhs, int3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline uniform bool4 binary_ge(uniform int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(int4 lhs, uniform int4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(uniform int4 lhs, int4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(int4 lhs, int4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline uniform bool4 binary_ge(uniform int4 lhs, uniform int rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(int4 lhs, uniform int rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(uniform int4 lhs, int rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(int4 lhs, int rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline uniform bool4 binary_ge(uniform int lhs, uniform int4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(int lhs, uniform int4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(uniform int lhs, int4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(int lhs, int4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline uniform bool binary_ge(uniform uint lhs, uniform uint rhs) { return lhs >= rhs; }
inline bool binary_ge(uint lhs, uniform uint rhs) { return lhs >= rhs; }
inline bool binary_ge(uniform uint lhs, uint rhs) { return lhs >= rhs; }
inline bool binary_ge(uint lhs, uint rhs) { return lhs >= rhs; }
inline uniform bool2 binary_ge(uniform uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(uint2 lhs, uniform uint2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(uniform uint2 lhs, uint2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(uint2 lhs, uint2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline uniform bool2 binary_ge(uniform uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(uint2 lhs, uniform uint rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(uniform uint2 lhs, uint rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(uint2 lhs, uint rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline uniform bool2 binary_ge(uniform uint lhs, uniform uint2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(uint lhs, uniform uint2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(uniform uint lhs, uint2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(uint lhs, uint2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline uniform bool3 binary_ge(uniform uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(uint3 lhs, uniform uint3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(uniform uint3 lhs, uint3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(uint3 lhs, uint3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline uniform bool3 binary_ge(uniform uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(uint3 lhs, uniform uint rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(uniform uint3 lhs, uint rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(uint3 lhs, uint rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline uniform bool3 binary_ge(uniform uint lhs, uniform uint3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(uint lhs, uniform uint3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(uniform uint lhs, uint3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(uint lhs, uint3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline uniform bool4 binary_ge(uniform uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(uint4 lhs, uniform uint4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(uniform uint4 lhs, uint4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(uint4 lhs, uint4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline uniform bool4 binary_ge(uniform uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(uint4 lhs, uniform uint rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(uniform uint4 lhs, uint rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(uint4 lhs, uint rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline uniform bool4 binary_ge(uniform uint lhs, uniform uint4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(uint lhs, uniform uint4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(uniform uint lhs, uint4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(uint lhs, uint4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline uniform bool binary_ge(uniform float lhs, uniform float rhs) { return lhs >= rhs; }
inline bool binary_ge(float lhs, uniform float rhs) { return lhs >= rhs; }
inline bool binary_ge(uniform float lhs, float rhs) { return lhs >= rhs; }
inline bool binary_ge(float lhs, float rhs) { return lhs >= rhs; }
inline uniform bool2 binary_ge(uniform float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(float2 lhs, uniform float2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(uniform float2 lhs, float2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline bool2 binary_ge(float2 lhs, float2 rhs) { return make_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
inline uniform bool2 binary_ge(uniform float2 lhs, uniform float rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(float2 lhs, uniform float rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(uniform float2 lhs, float rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline bool2 binary_ge(float2 lhs, float rhs) { return make_bool2(lhs.x >= rhs, lhs.y >= rhs); }
inline uniform bool2 binary_ge(uniform float lhs, uniform float2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(float lhs, uniform float2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(uniform float lhs, float2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline bool2 binary_ge(float lhs, float2 rhs) { return make_bool2(lhs >= rhs.x, lhs >= rhs.y); }
inline uniform bool3 binary_ge(uniform float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(float3 lhs, uniform float3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(uniform float3 lhs, float3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline bool3 binary_ge(float3 lhs, float3 rhs) { return make_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
inline uniform bool3 binary_ge(uniform float3 lhs, uniform float rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(float3 lhs, uniform float rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(uniform float3 lhs, float rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline bool3 binary_ge(float3 lhs, float rhs) { return make_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
inline uniform bool3 binary_ge(uniform float lhs, uniform float3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(float lhs, uniform float3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(uniform float lhs, float3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline bool3 binary_ge(float lhs, float3 rhs) { return make_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
inline uniform bool4 binary_ge(uniform float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(float4 lhs, uniform float4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(uniform float4 lhs, float4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline bool4 binary_ge(float4 lhs, float4 rhs) { return make_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
inline uniform bool4 binary_ge(uniform float4 lhs, uniform float rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(float4 lhs, uniform float rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(uniform float4 lhs, float rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline bool4 binary_ge(float4 lhs, float rhs) { return make_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
inline uniform bool4 binary_ge(uniform float lhs, uniform float4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(float lhs, uniform float4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(uniform float lhs, float4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
inline bool4 binary_ge(float lhs, float4 rhs) { return make_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }

inline uniform int binary_add(uniform int lhs, uniform int rhs) { return lhs + rhs; }
inline int binary_add(int lhs, uniform int rhs) { return lhs + rhs; }
inline int binary_add(uniform int lhs, int rhs) { return lhs + rhs; }
inline int binary_add(int lhs, int rhs) { return lhs + rhs; }
inline uniform int2 binary_add(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline int2 binary_add(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline int2 binary_add(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline int2 binary_add(int2 lhs, int2 rhs) { return make_int2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uniform int2 binary_add(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x + rhs, lhs.y + rhs); }
inline int2 binary_add(int2 lhs, uniform int rhs) { return make_int2(lhs.x + rhs, lhs.y + rhs); }
inline int2 binary_add(uniform int2 lhs, int rhs) { return make_int2(lhs.x + rhs, lhs.y + rhs); }
inline int2 binary_add(int2 lhs, int rhs) { return make_int2(lhs.x + rhs, lhs.y + rhs); }
inline uniform int2 binary_add(uniform int lhs, uniform int2 rhs) { return make_int2(lhs + rhs.x, lhs + rhs.y); }
inline int2 binary_add(int lhs, uniform int2 rhs) { return make_int2(lhs + rhs.x, lhs + rhs.y); }
inline int2 binary_add(uniform int lhs, int2 rhs) { return make_int2(lhs + rhs.x, lhs + rhs.y); }
inline int2 binary_add(int lhs, int2 rhs) { return make_int2(lhs + rhs.x, lhs + rhs.y); }
inline uniform int3 binary_add(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline int3 binary_add(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline int3 binary_add(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline int3 binary_add(int3 lhs, int3 rhs) { return make_int3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uniform int3 binary_add(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline int3 binary_add(int3 lhs, uniform int rhs) { return make_int3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline int3 binary_add(uniform int3 lhs, int rhs) { return make_int3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline int3 binary_add(int3 lhs, int rhs) { return make_int3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uniform int3 binary_add(uniform int lhs, uniform int3 rhs) { return make_int3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline int3 binary_add(int lhs, uniform int3 rhs) { return make_int3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline int3 binary_add(uniform int lhs, int3 rhs) { return make_int3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline int3 binary_add(int lhs, int3 rhs) { return make_int3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uniform int4 binary_add(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline int4 binary_add(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline int4 binary_add(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline int4 binary_add(int4 lhs, int4 rhs) { return make_int4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uniform int4 binary_add(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline int4 binary_add(int4 lhs, uniform int rhs) { return make_int4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline int4 binary_add(uniform int4 lhs, int rhs) { return make_int4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline int4 binary_add(int4 lhs, int rhs) { return make_int4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uniform int4 binary_add(uniform int lhs, uniform int4 rhs) { return make_int4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline int4 binary_add(int lhs, uniform int4 rhs) { return make_int4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline int4 binary_add(uniform int lhs, int4 rhs) { return make_int4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline int4 binary_add(int lhs, int4 rhs) { return make_int4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline uniform uint binary_add(uniform uint lhs, uniform uint rhs) { return lhs + rhs; }
inline uint binary_add(uint lhs, uniform uint rhs) { return lhs + rhs; }
inline uint binary_add(uniform uint lhs, uint rhs) { return lhs + rhs; }
inline uint binary_add(uint lhs, uint rhs) { return lhs + rhs; }
inline uniform uint2 binary_add(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uint2 binary_add(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uint2 binary_add(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uint2 binary_add(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uniform uint2 binary_add(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x + rhs, lhs.y + rhs); }
inline uint2 binary_add(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x + rhs, lhs.y + rhs); }
inline uint2 binary_add(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x + rhs, lhs.y + rhs); }
inline uint2 binary_add(uint2 lhs, uint rhs) { return make_uint2(lhs.x + rhs, lhs.y + rhs); }
inline uniform uint2 binary_add(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs + rhs.x, lhs + rhs.y); }
inline uint2 binary_add(uint lhs, uniform uint2 rhs) { return make_uint2(lhs + rhs.x, lhs + rhs.y); }
inline uint2 binary_add(uniform uint lhs, uint2 rhs) { return make_uint2(lhs + rhs.x, lhs + rhs.y); }
inline uint2 binary_add(uint lhs, uint2 rhs) { return make_uint2(lhs + rhs.x, lhs + rhs.y); }
inline uniform uint3 binary_add(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uint3 binary_add(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uint3 binary_add(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uint3 binary_add(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uniform uint3 binary_add(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uint3 binary_add(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uint3 binary_add(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uint3 binary_add(uint3 lhs, uint rhs) { return make_uint3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uniform uint3 binary_add(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uint3 binary_add(uint lhs, uniform uint3 rhs) { return make_uint3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uint3 binary_add(uniform uint lhs, uint3 rhs) { return make_uint3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uint3 binary_add(uint lhs, uint3 rhs) { return make_uint3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uniform uint4 binary_add(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uint4 binary_add(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uint4 binary_add(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uint4 binary_add(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uniform uint4 binary_add(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uint4 binary_add(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uint4 binary_add(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uint4 binary_add(uint4 lhs, uint rhs) { return make_uint4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uniform uint4 binary_add(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline uint4 binary_add(uint lhs, uniform uint4 rhs) { return make_uint4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline uint4 binary_add(uniform uint lhs, uint4 rhs) { return make_uint4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline uint4 binary_add(uint lhs, uint4 rhs) { return make_uint4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline uniform float binary_add(uniform float lhs, uniform float rhs) { return lhs + rhs; }
inline float binary_add(float lhs, uniform float rhs) { return lhs + rhs; }
inline float binary_add(uniform float lhs, float rhs) { return lhs + rhs; }
inline float binary_add(float lhs, float rhs) { return lhs + rhs; }
inline uniform float2 binary_add(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline float2 binary_add(float2 lhs, uniform float2 rhs) { return make_float2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline float2 binary_add(uniform float2 lhs, float2 rhs) { return make_float2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline float2 binary_add(float2 lhs, float2 rhs) { return make_float2(lhs.x + rhs.x, lhs.y + rhs.y); }
inline uniform float2 binary_add(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.x + rhs, lhs.y + rhs); }
inline float2 binary_add(float2 lhs, uniform float rhs) { return make_float2(lhs.x + rhs, lhs.y + rhs); }
inline float2 binary_add(uniform float2 lhs, float rhs) { return make_float2(lhs.x + rhs, lhs.y + rhs); }
inline float2 binary_add(float2 lhs, float rhs) { return make_float2(lhs.x + rhs, lhs.y + rhs); }
inline uniform float2 binary_add(uniform float lhs, uniform float2 rhs) { return make_float2(lhs + rhs.x, lhs + rhs.y); }
inline float2 binary_add(float lhs, uniform float2 rhs) { return make_float2(lhs + rhs.x, lhs + rhs.y); }
inline float2 binary_add(uniform float lhs, float2 rhs) { return make_float2(lhs + rhs.x, lhs + rhs.y); }
inline float2 binary_add(float lhs, float2 rhs) { return make_float2(lhs + rhs.x, lhs + rhs.y); }
inline uniform float3 binary_add(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline float3 binary_add(float3 lhs, uniform float3 rhs) { return make_float3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline float3 binary_add(uniform float3 lhs, float3 rhs) { return make_float3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline float3 binary_add(float3 lhs, float3 rhs) { return make_float3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
inline uniform float3 binary_add(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline float3 binary_add(float3 lhs, uniform float rhs) { return make_float3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline float3 binary_add(uniform float3 lhs, float rhs) { return make_float3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline float3 binary_add(float3 lhs, float rhs) { return make_float3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
inline uniform float3 binary_add(uniform float lhs, uniform float3 rhs) { return make_float3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline float3 binary_add(float lhs, uniform float3 rhs) { return make_float3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline float3 binary_add(uniform float lhs, float3 rhs) { return make_float3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline float3 binary_add(float lhs, float3 rhs) { return make_float3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
inline uniform float4 binary_add(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline float4 binary_add(float4 lhs, uniform float4 rhs) { return make_float4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline float4 binary_add(uniform float4 lhs, float4 rhs) { return make_float4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline float4 binary_add(float4 lhs, float4 rhs) { return make_float4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
inline uniform float4 binary_add(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline float4 binary_add(float4 lhs, uniform float rhs) { return make_float4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline float4 binary_add(uniform float4 lhs, float rhs) { return make_float4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline float4 binary_add(float4 lhs, float rhs) { return make_float4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
inline uniform float4 binary_add(uniform float lhs, uniform float4 rhs) { return make_float4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline float4 binary_add(float lhs, uniform float4 rhs) { return make_float4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline float4 binary_add(uniform float lhs, float4 rhs) { return make_float4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
inline float4 binary_add(float lhs, float4 rhs) { return make_float4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }

inline uniform int binary_sub(uniform int lhs, uniform int rhs) { return lhs - rhs; }
inline int binary_sub(int lhs, uniform int rhs) { return lhs - rhs; }
inline int binary_sub(uniform int lhs, int rhs) { return lhs - rhs; }
inline int binary_sub(int lhs, int rhs) { return lhs - rhs; }
inline uniform int2 binary_sub(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline int2 binary_sub(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline int2 binary_sub(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline int2 binary_sub(int2 lhs, int2 rhs) { return make_int2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uniform int2 binary_sub(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x - rhs, lhs.y - rhs); }
inline int2 binary_sub(int2 lhs, uniform int rhs) { return make_int2(lhs.x - rhs, lhs.y - rhs); }
inline int2 binary_sub(uniform int2 lhs, int rhs) { return make_int2(lhs.x - rhs, lhs.y - rhs); }
inline int2 binary_sub(int2 lhs, int rhs) { return make_int2(lhs.x - rhs, lhs.y - rhs); }
inline uniform int2 binary_sub(uniform int lhs, uniform int2 rhs) { return make_int2(lhs - rhs.x, lhs - rhs.y); }
inline int2 binary_sub(int lhs, uniform int2 rhs) { return make_int2(lhs - rhs.x, lhs - rhs.y); }
inline int2 binary_sub(uniform int lhs, int2 rhs) { return make_int2(lhs - rhs.x, lhs - rhs.y); }
inline int2 binary_sub(int lhs, int2 rhs) { return make_int2(lhs - rhs.x, lhs - rhs.y); }
inline uniform int3 binary_sub(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline int3 binary_sub(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline int3 binary_sub(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline int3 binary_sub(int3 lhs, int3 rhs) { return make_int3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uniform int3 binary_sub(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline int3 binary_sub(int3 lhs, uniform int rhs) { return make_int3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline int3 binary_sub(uniform int3 lhs, int rhs) { return make_int3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline int3 binary_sub(int3 lhs, int rhs) { return make_int3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uniform int3 binary_sub(uniform int lhs, uniform int3 rhs) { return make_int3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline int3 binary_sub(int lhs, uniform int3 rhs) { return make_int3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline int3 binary_sub(uniform int lhs, int3 rhs) { return make_int3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline int3 binary_sub(int lhs, int3 rhs) { return make_int3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uniform int4 binary_sub(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline int4 binary_sub(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline int4 binary_sub(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline int4 binary_sub(int4 lhs, int4 rhs) { return make_int4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uniform int4 binary_sub(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline int4 binary_sub(int4 lhs, uniform int rhs) { return make_int4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline int4 binary_sub(uniform int4 lhs, int rhs) { return make_int4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline int4 binary_sub(int4 lhs, int rhs) { return make_int4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uniform int4 binary_sub(uniform int lhs, uniform int4 rhs) { return make_int4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline int4 binary_sub(int lhs, uniform int4 rhs) { return make_int4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline int4 binary_sub(uniform int lhs, int4 rhs) { return make_int4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline int4 binary_sub(int lhs, int4 rhs) { return make_int4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline uniform uint binary_sub(uniform uint lhs, uniform uint rhs) { return lhs - rhs; }
inline uint binary_sub(uint lhs, uniform uint rhs) { return lhs - rhs; }
inline uint binary_sub(uniform uint lhs, uint rhs) { return lhs - rhs; }
inline uint binary_sub(uint lhs, uint rhs) { return lhs - rhs; }
inline uniform uint2 binary_sub(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uint2 binary_sub(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uint2 binary_sub(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uint2 binary_sub(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uniform uint2 binary_sub(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x - rhs, lhs.y - rhs); }
inline uint2 binary_sub(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x - rhs, lhs.y - rhs); }
inline uint2 binary_sub(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x - rhs, lhs.y - rhs); }
inline uint2 binary_sub(uint2 lhs, uint rhs) { return make_uint2(lhs.x - rhs, lhs.y - rhs); }
inline uniform uint2 binary_sub(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs - rhs.x, lhs - rhs.y); }
inline uint2 binary_sub(uint lhs, uniform uint2 rhs) { return make_uint2(lhs - rhs.x, lhs - rhs.y); }
inline uint2 binary_sub(uniform uint lhs, uint2 rhs) { return make_uint2(lhs - rhs.x, lhs - rhs.y); }
inline uint2 binary_sub(uint lhs, uint2 rhs) { return make_uint2(lhs - rhs.x, lhs - rhs.y); }
inline uniform uint3 binary_sub(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uint3 binary_sub(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uint3 binary_sub(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uint3 binary_sub(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uniform uint3 binary_sub(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uint3 binary_sub(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uint3 binary_sub(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uint3 binary_sub(uint3 lhs, uint rhs) { return make_uint3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uniform uint3 binary_sub(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uint3 binary_sub(uint lhs, uniform uint3 rhs) { return make_uint3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uint3 binary_sub(uniform uint lhs, uint3 rhs) { return make_uint3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uint3 binary_sub(uint lhs, uint3 rhs) { return make_uint3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uniform uint4 binary_sub(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uint4 binary_sub(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uint4 binary_sub(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uint4 binary_sub(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uniform uint4 binary_sub(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uint4 binary_sub(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uint4 binary_sub(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uint4 binary_sub(uint4 lhs, uint rhs) { return make_uint4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uniform uint4 binary_sub(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline uint4 binary_sub(uint lhs, uniform uint4 rhs) { return make_uint4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline uint4 binary_sub(uniform uint lhs, uint4 rhs) { return make_uint4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline uint4 binary_sub(uint lhs, uint4 rhs) { return make_uint4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline uniform float binary_sub(uniform float lhs, uniform float rhs) { return lhs - rhs; }
inline float binary_sub(float lhs, uniform float rhs) { return lhs - rhs; }
inline float binary_sub(uniform float lhs, float rhs) { return lhs - rhs; }
inline float binary_sub(float lhs, float rhs) { return lhs - rhs; }
inline uniform float2 binary_sub(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline float2 binary_sub(float2 lhs, uniform float2 rhs) { return make_float2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline float2 binary_sub(uniform float2 lhs, float2 rhs) { return make_float2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline float2 binary_sub(float2 lhs, float2 rhs) { return make_float2(lhs.x - rhs.x, lhs.y - rhs.y); }
inline uniform float2 binary_sub(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.x - rhs, lhs.y - rhs); }
inline float2 binary_sub(float2 lhs, uniform float rhs) { return make_float2(lhs.x - rhs, lhs.y - rhs); }
inline float2 binary_sub(uniform float2 lhs, float rhs) { return make_float2(lhs.x - rhs, lhs.y - rhs); }
inline float2 binary_sub(float2 lhs, float rhs) { return make_float2(lhs.x - rhs, lhs.y - rhs); }
inline uniform float2 binary_sub(uniform float lhs, uniform float2 rhs) { return make_float2(lhs - rhs.x, lhs - rhs.y); }
inline float2 binary_sub(float lhs, uniform float2 rhs) { return make_float2(lhs - rhs.x, lhs - rhs.y); }
inline float2 binary_sub(uniform float lhs, float2 rhs) { return make_float2(lhs - rhs.x, lhs - rhs.y); }
inline float2 binary_sub(float lhs, float2 rhs) { return make_float2(lhs - rhs.x, lhs - rhs.y); }
inline uniform float3 binary_sub(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline float3 binary_sub(float3 lhs, uniform float3 rhs) { return make_float3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline float3 binary_sub(uniform float3 lhs, float3 rhs) { return make_float3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline float3 binary_sub(float3 lhs, float3 rhs) { return make_float3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
inline uniform float3 binary_sub(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline float3 binary_sub(float3 lhs, uniform float rhs) { return make_float3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline float3 binary_sub(uniform float3 lhs, float rhs) { return make_float3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline float3 binary_sub(float3 lhs, float rhs) { return make_float3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
inline uniform float3 binary_sub(uniform float lhs, uniform float3 rhs) { return make_float3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline float3 binary_sub(float lhs, uniform float3 rhs) { return make_float3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline float3 binary_sub(uniform float lhs, float3 rhs) { return make_float3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline float3 binary_sub(float lhs, float3 rhs) { return make_float3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
inline uniform float4 binary_sub(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline float4 binary_sub(float4 lhs, uniform float4 rhs) { return make_float4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline float4 binary_sub(uniform float4 lhs, float4 rhs) { return make_float4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline float4 binary_sub(float4 lhs, float4 rhs) { return make_float4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
inline uniform float4 binary_sub(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline float4 binary_sub(float4 lhs, uniform float rhs) { return make_float4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline float4 binary_sub(uniform float4 lhs, float rhs) { return make_float4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline float4 binary_sub(float4 lhs, float rhs) { return make_float4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
inline uniform float4 binary_sub(uniform float lhs, uniform float4 rhs) { return make_float4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline float4 binary_sub(float lhs, uniform float4 rhs) { return make_float4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline float4 binary_sub(uniform float lhs, float4 rhs) { return make_float4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
inline float4 binary_sub(float lhs, float4 rhs) { return make_float4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }

inline uniform int binary_mul(uniform int lhs, uniform int rhs) { return lhs * rhs; }
inline int binary_mul(int lhs, uniform int rhs) { return lhs * rhs; }
inline int binary_mul(uniform int lhs, int rhs) { return lhs * rhs; }
inline int binary_mul(int lhs, int rhs) { return lhs * rhs; }
inline uniform int2 binary_mul(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline int2 binary_mul(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline int2 binary_mul(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline int2 binary_mul(int2 lhs, int2 rhs) { return make_int2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uniform int2 binary_mul(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x * rhs, lhs.y * rhs); }
inline int2 binary_mul(int2 lhs, uniform int rhs) { return make_int2(lhs.x * rhs, lhs.y * rhs); }
inline int2 binary_mul(uniform int2 lhs, int rhs) { return make_int2(lhs.x * rhs, lhs.y * rhs); }
inline int2 binary_mul(int2 lhs, int rhs) { return make_int2(lhs.x * rhs, lhs.y * rhs); }
inline uniform int2 binary_mul(uniform int lhs, uniform int2 rhs) { return make_int2(lhs * rhs.x, lhs * rhs.y); }
inline int2 binary_mul(int lhs, uniform int2 rhs) { return make_int2(lhs * rhs.x, lhs * rhs.y); }
inline int2 binary_mul(uniform int lhs, int2 rhs) { return make_int2(lhs * rhs.x, lhs * rhs.y); }
inline int2 binary_mul(int lhs, int2 rhs) { return make_int2(lhs * rhs.x, lhs * rhs.y); }
inline uniform int3 binary_mul(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline int3 binary_mul(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline int3 binary_mul(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline int3 binary_mul(int3 lhs, int3 rhs) { return make_int3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uniform int3 binary_mul(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline int3 binary_mul(int3 lhs, uniform int rhs) { return make_int3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline int3 binary_mul(uniform int3 lhs, int rhs) { return make_int3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline int3 binary_mul(int3 lhs, int rhs) { return make_int3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uniform int3 binary_mul(uniform int lhs, uniform int3 rhs) { return make_int3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline int3 binary_mul(int lhs, uniform int3 rhs) { return make_int3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline int3 binary_mul(uniform int lhs, int3 rhs) { return make_int3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline int3 binary_mul(int lhs, int3 rhs) { return make_int3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uniform int4 binary_mul(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline int4 binary_mul(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline int4 binary_mul(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline int4 binary_mul(int4 lhs, int4 rhs) { return make_int4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uniform int4 binary_mul(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline int4 binary_mul(int4 lhs, uniform int rhs) { return make_int4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline int4 binary_mul(uniform int4 lhs, int rhs) { return make_int4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline int4 binary_mul(int4 lhs, int rhs) { return make_int4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uniform int4 binary_mul(uniform int lhs, uniform int4 rhs) { return make_int4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline int4 binary_mul(int lhs, uniform int4 rhs) { return make_int4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline int4 binary_mul(uniform int lhs, int4 rhs) { return make_int4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline int4 binary_mul(int lhs, int4 rhs) { return make_int4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline uniform uint binary_mul(uniform uint lhs, uniform uint rhs) { return lhs * rhs; }
inline uint binary_mul(uint lhs, uniform uint rhs) { return lhs * rhs; }
inline uint binary_mul(uniform uint lhs, uint rhs) { return lhs * rhs; }
inline uint binary_mul(uint lhs, uint rhs) { return lhs * rhs; }
inline uniform uint2 binary_mul(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uint2 binary_mul(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uint2 binary_mul(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uint2 binary_mul(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uniform uint2 binary_mul(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x * rhs, lhs.y * rhs); }
inline uint2 binary_mul(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x * rhs, lhs.y * rhs); }
inline uint2 binary_mul(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x * rhs, lhs.y * rhs); }
inline uint2 binary_mul(uint2 lhs, uint rhs) { return make_uint2(lhs.x * rhs, lhs.y * rhs); }
inline uniform uint2 binary_mul(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs * rhs.x, lhs * rhs.y); }
inline uint2 binary_mul(uint lhs, uniform uint2 rhs) { return make_uint2(lhs * rhs.x, lhs * rhs.y); }
inline uint2 binary_mul(uniform uint lhs, uint2 rhs) { return make_uint2(lhs * rhs.x, lhs * rhs.y); }
inline uint2 binary_mul(uint lhs, uint2 rhs) { return make_uint2(lhs * rhs.x, lhs * rhs.y); }
inline uniform uint3 binary_mul(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uint3 binary_mul(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uint3 binary_mul(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uint3 binary_mul(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uniform uint3 binary_mul(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uint3 binary_mul(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uint3 binary_mul(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uint3 binary_mul(uint3 lhs, uint rhs) { return make_uint3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uniform uint3 binary_mul(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uint3 binary_mul(uint lhs, uniform uint3 rhs) { return make_uint3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uint3 binary_mul(uniform uint lhs, uint3 rhs) { return make_uint3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uint3 binary_mul(uint lhs, uint3 rhs) { return make_uint3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uniform uint4 binary_mul(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uint4 binary_mul(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uint4 binary_mul(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uint4 binary_mul(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uniform uint4 binary_mul(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uint4 binary_mul(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uint4 binary_mul(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uint4 binary_mul(uint4 lhs, uint rhs) { return make_uint4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uniform uint4 binary_mul(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline uint4 binary_mul(uint lhs, uniform uint4 rhs) { return make_uint4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline uint4 binary_mul(uniform uint lhs, uint4 rhs) { return make_uint4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline uint4 binary_mul(uint lhs, uint4 rhs) { return make_uint4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline uniform float binary_mul(uniform float lhs, uniform float rhs) { return lhs * rhs; }
inline float binary_mul(float lhs, uniform float rhs) { return lhs * rhs; }
inline float binary_mul(uniform float lhs, float rhs) { return lhs * rhs; }
inline float binary_mul(float lhs, float rhs) { return lhs * rhs; }
inline uniform float2 binary_mul(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline float2 binary_mul(float2 lhs, uniform float2 rhs) { return make_float2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline float2 binary_mul(uniform float2 lhs, float2 rhs) { return make_float2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline float2 binary_mul(float2 lhs, float2 rhs) { return make_float2(lhs.x * rhs.x, lhs.y * rhs.y); }
inline uniform float2 binary_mul(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.x * rhs, lhs.y * rhs); }
inline float2 binary_mul(float2 lhs, uniform float rhs) { return make_float2(lhs.x * rhs, lhs.y * rhs); }
inline float2 binary_mul(uniform float2 lhs, float rhs) { return make_float2(lhs.x * rhs, lhs.y * rhs); }
inline float2 binary_mul(float2 lhs, float rhs) { return make_float2(lhs.x * rhs, lhs.y * rhs); }
inline uniform float2 binary_mul(uniform float lhs, uniform float2 rhs) { return make_float2(lhs * rhs.x, lhs * rhs.y); }
inline float2 binary_mul(float lhs, uniform float2 rhs) { return make_float2(lhs * rhs.x, lhs * rhs.y); }
inline float2 binary_mul(uniform float lhs, float2 rhs) { return make_float2(lhs * rhs.x, lhs * rhs.y); }
inline float2 binary_mul(float lhs, float2 rhs) { return make_float2(lhs * rhs.x, lhs * rhs.y); }
inline uniform float3 binary_mul(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline float3 binary_mul(float3 lhs, uniform float3 rhs) { return make_float3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline float3 binary_mul(uniform float3 lhs, float3 rhs) { return make_float3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline float3 binary_mul(float3 lhs, float3 rhs) { return make_float3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
inline uniform float3 binary_mul(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline float3 binary_mul(float3 lhs, uniform float rhs) { return make_float3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline float3 binary_mul(uniform float3 lhs, float rhs) { return make_float3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline float3 binary_mul(float3 lhs, float rhs) { return make_float3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
inline uniform float3 binary_mul(uniform float lhs, uniform float3 rhs) { return make_float3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline float3 binary_mul(float lhs, uniform float3 rhs) { return make_float3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline float3 binary_mul(uniform float lhs, float3 rhs) { return make_float3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline float3 binary_mul(float lhs, float3 rhs) { return make_float3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
inline uniform float4 binary_mul(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline float4 binary_mul(float4 lhs, uniform float4 rhs) { return make_float4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline float4 binary_mul(uniform float4 lhs, float4 rhs) { return make_float4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline float4 binary_mul(float4 lhs, float4 rhs) { return make_float4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
inline uniform float4 binary_mul(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline float4 binary_mul(float4 lhs, uniform float rhs) { return make_float4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline float4 binary_mul(uniform float4 lhs, float rhs) { return make_float4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline float4 binary_mul(float4 lhs, float rhs) { return make_float4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
inline uniform float4 binary_mul(uniform float lhs, uniform float4 rhs) { return make_float4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline float4 binary_mul(float lhs, uniform float4 rhs) { return make_float4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline float4 binary_mul(uniform float lhs, float4 rhs) { return make_float4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
inline float4 binary_mul(float lhs, float4 rhs) { return make_float4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }

inline uniform int binary_div(uniform int lhs, uniform int rhs) { return lhs / rhs; }
inline int binary_div(int lhs, uniform int rhs) { return lhs / rhs; }
inline int binary_div(uniform int lhs, int rhs) { return lhs / rhs; }
inline int binary_div(int lhs, int rhs) { return lhs / rhs; }
inline uniform int2 binary_div(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline int2 binary_div(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline int2 binary_div(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline int2 binary_div(int2 lhs, int2 rhs) { return make_int2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uniform int2 binary_div(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x / rhs, lhs.y / rhs); }
inline int2 binary_div(int2 lhs, uniform int rhs) { return make_int2(lhs.x / rhs, lhs.y / rhs); }
inline int2 binary_div(uniform int2 lhs, int rhs) { return make_int2(lhs.x / rhs, lhs.y / rhs); }
inline int2 binary_div(int2 lhs, int rhs) { return make_int2(lhs.x / rhs, lhs.y / rhs); }
inline uniform int2 binary_div(uniform int lhs, uniform int2 rhs) { return make_int2(lhs / rhs.x, lhs / rhs.y); }
inline int2 binary_div(int lhs, uniform int2 rhs) { return make_int2(lhs / rhs.x, lhs / rhs.y); }
inline int2 binary_div(uniform int lhs, int2 rhs) { return make_int2(lhs / rhs.x, lhs / rhs.y); }
inline int2 binary_div(int lhs, int2 rhs) { return make_int2(lhs / rhs.x, lhs / rhs.y); }
inline uniform int3 binary_div(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline int3 binary_div(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline int3 binary_div(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline int3 binary_div(int3 lhs, int3 rhs) { return make_int3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uniform int3 binary_div(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline int3 binary_div(int3 lhs, uniform int rhs) { return make_int3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline int3 binary_div(uniform int3 lhs, int rhs) { return make_int3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline int3 binary_div(int3 lhs, int rhs) { return make_int3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uniform int3 binary_div(uniform int lhs, uniform int3 rhs) { return make_int3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline int3 binary_div(int lhs, uniform int3 rhs) { return make_int3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline int3 binary_div(uniform int lhs, int3 rhs) { return make_int3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline int3 binary_div(int lhs, int3 rhs) { return make_int3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uniform int4 binary_div(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline int4 binary_div(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline int4 binary_div(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline int4 binary_div(int4 lhs, int4 rhs) { return make_int4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uniform int4 binary_div(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline int4 binary_div(int4 lhs, uniform int rhs) { return make_int4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline int4 binary_div(uniform int4 lhs, int rhs) { return make_int4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline int4 binary_div(int4 lhs, int rhs) { return make_int4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uniform int4 binary_div(uniform int lhs, uniform int4 rhs) { return make_int4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline int4 binary_div(int lhs, uniform int4 rhs) { return make_int4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline int4 binary_div(uniform int lhs, int4 rhs) { return make_int4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline int4 binary_div(int lhs, int4 rhs) { return make_int4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline uniform uint binary_div(uniform uint lhs, uniform uint rhs) { return lhs / rhs; }
inline uint binary_div(uint lhs, uniform uint rhs) { return lhs / rhs; }
inline uint binary_div(uniform uint lhs, uint rhs) { return lhs / rhs; }
inline uint binary_div(uint lhs, uint rhs) { return lhs / rhs; }
inline uniform uint2 binary_div(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uint2 binary_div(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uint2 binary_div(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uint2 binary_div(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uniform uint2 binary_div(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x / rhs, lhs.y / rhs); }
inline uint2 binary_div(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x / rhs, lhs.y / rhs); }
inline uint2 binary_div(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x / rhs, lhs.y / rhs); }
inline uint2 binary_div(uint2 lhs, uint rhs) { return make_uint2(lhs.x / rhs, lhs.y / rhs); }
inline uniform uint2 binary_div(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs / rhs.x, lhs / rhs.y); }
inline uint2 binary_div(uint lhs, uniform uint2 rhs) { return make_uint2(lhs / rhs.x, lhs / rhs.y); }
inline uint2 binary_div(uniform uint lhs, uint2 rhs) { return make_uint2(lhs / rhs.x, lhs / rhs.y); }
inline uint2 binary_div(uint lhs, uint2 rhs) { return make_uint2(lhs / rhs.x, lhs / rhs.y); }
inline uniform uint3 binary_div(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uint3 binary_div(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uint3 binary_div(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uint3 binary_div(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uniform uint3 binary_div(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uint3 binary_div(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uint3 binary_div(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uint3 binary_div(uint3 lhs, uint rhs) { return make_uint3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uniform uint3 binary_div(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uint3 binary_div(uint lhs, uniform uint3 rhs) { return make_uint3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uint3 binary_div(uniform uint lhs, uint3 rhs) { return make_uint3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uint3 binary_div(uint lhs, uint3 rhs) { return make_uint3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uniform uint4 binary_div(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uint4 binary_div(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uint4 binary_div(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uint4 binary_div(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uniform uint4 binary_div(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uint4 binary_div(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uint4 binary_div(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uint4 binary_div(uint4 lhs, uint rhs) { return make_uint4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uniform uint4 binary_div(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline uint4 binary_div(uint lhs, uniform uint4 rhs) { return make_uint4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline uint4 binary_div(uniform uint lhs, uint4 rhs) { return make_uint4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline uint4 binary_div(uint lhs, uint4 rhs) { return make_uint4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline uniform float binary_div(uniform float lhs, uniform float rhs) { return lhs / rhs; }
inline float binary_div(float lhs, uniform float rhs) { return lhs / rhs; }
inline float binary_div(uniform float lhs, float rhs) { return lhs / rhs; }
inline float binary_div(float lhs, float rhs) { return lhs / rhs; }
inline uniform float2 binary_div(uniform float2 lhs, uniform float2 rhs) { return make_float2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline float2 binary_div(float2 lhs, uniform float2 rhs) { return make_float2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline float2 binary_div(uniform float2 lhs, float2 rhs) { return make_float2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline float2 binary_div(float2 lhs, float2 rhs) { return make_float2(lhs.x / rhs.x, lhs.y / rhs.y); }
inline uniform float2 binary_div(uniform float2 lhs, uniform float rhs) { return make_float2(lhs.x / rhs, lhs.y / rhs); }
inline float2 binary_div(float2 lhs, uniform float rhs) { return make_float2(lhs.x / rhs, lhs.y / rhs); }
inline float2 binary_div(uniform float2 lhs, float rhs) { return make_float2(lhs.x / rhs, lhs.y / rhs); }
inline float2 binary_div(float2 lhs, float rhs) { return make_float2(lhs.x / rhs, lhs.y / rhs); }
inline uniform float2 binary_div(uniform float lhs, uniform float2 rhs) { return make_float2(lhs / rhs.x, lhs / rhs.y); }
inline float2 binary_div(float lhs, uniform float2 rhs) { return make_float2(lhs / rhs.x, lhs / rhs.y); }
inline float2 binary_div(uniform float lhs, float2 rhs) { return make_float2(lhs / rhs.x, lhs / rhs.y); }
inline float2 binary_div(float lhs, float2 rhs) { return make_float2(lhs / rhs.x, lhs / rhs.y); }
inline uniform float3 binary_div(uniform float3 lhs, uniform float3 rhs) { return make_float3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline float3 binary_div(float3 lhs, uniform float3 rhs) { return make_float3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline float3 binary_div(uniform float3 lhs, float3 rhs) { return make_float3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline float3 binary_div(float3 lhs, float3 rhs) { return make_float3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
inline uniform float3 binary_div(uniform float3 lhs, uniform float rhs) { return make_float3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline float3 binary_div(float3 lhs, uniform float rhs) { return make_float3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline float3 binary_div(uniform float3 lhs, float rhs) { return make_float3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline float3 binary_div(float3 lhs, float rhs) { return make_float3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
inline uniform float3 binary_div(uniform float lhs, uniform float3 rhs) { return make_float3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline float3 binary_div(float lhs, uniform float3 rhs) { return make_float3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline float3 binary_div(uniform float lhs, float3 rhs) { return make_float3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline float3 binary_div(float lhs, float3 rhs) { return make_float3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
inline uniform float4 binary_div(uniform float4 lhs, uniform float4 rhs) { return make_float4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline float4 binary_div(float4 lhs, uniform float4 rhs) { return make_float4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline float4 binary_div(uniform float4 lhs, float4 rhs) { return make_float4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline float4 binary_div(float4 lhs, float4 rhs) { return make_float4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
inline uniform float4 binary_div(uniform float4 lhs, uniform float rhs) { return make_float4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline float4 binary_div(float4 lhs, uniform float rhs) { return make_float4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline float4 binary_div(uniform float4 lhs, float rhs) { return make_float4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline float4 binary_div(float4 lhs, float rhs) { return make_float4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
inline uniform float4 binary_div(uniform float lhs, uniform float4 rhs) { return make_float4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline float4 binary_div(float lhs, uniform float4 rhs) { return make_float4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline float4 binary_div(uniform float lhs, float4 rhs) { return make_float4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
inline float4 binary_div(float lhs, float4 rhs) { return make_float4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }

inline uniform int binary_mod(uniform int lhs, uniform int rhs) { return lhs % rhs; }
inline int binary_mod(int lhs, uniform int rhs) { return lhs % rhs; }
inline int binary_mod(uniform int lhs, int rhs) { return lhs % rhs; }
inline int binary_mod(int lhs, int rhs) { return lhs % rhs; }
inline uniform int2 binary_mod(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline int2 binary_mod(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline int2 binary_mod(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline int2 binary_mod(int2 lhs, int2 rhs) { return make_int2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline uniform int2 binary_mod(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x % rhs, lhs.y % rhs); }
inline int2 binary_mod(int2 lhs, uniform int rhs) { return make_int2(lhs.x % rhs, lhs.y % rhs); }
inline int2 binary_mod(uniform int2 lhs, int rhs) { return make_int2(lhs.x % rhs, lhs.y % rhs); }
inline int2 binary_mod(int2 lhs, int rhs) { return make_int2(lhs.x % rhs, lhs.y % rhs); }
inline uniform int2 binary_mod(uniform int lhs, uniform int2 rhs) { return make_int2(lhs % rhs.x, lhs % rhs.y); }
inline int2 binary_mod(int lhs, uniform int2 rhs) { return make_int2(lhs % rhs.x, lhs % rhs.y); }
inline int2 binary_mod(uniform int lhs, int2 rhs) { return make_int2(lhs % rhs.x, lhs % rhs.y); }
inline int2 binary_mod(int lhs, int2 rhs) { return make_int2(lhs % rhs.x, lhs % rhs.y); }
inline uniform int3 binary_mod(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline int3 binary_mod(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline int3 binary_mod(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline int3 binary_mod(int3 lhs, int3 rhs) { return make_int3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline uniform int3 binary_mod(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline int3 binary_mod(int3 lhs, uniform int rhs) { return make_int3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline int3 binary_mod(uniform int3 lhs, int rhs) { return make_int3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline int3 binary_mod(int3 lhs, int rhs) { return make_int3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline uniform int3 binary_mod(uniform int lhs, uniform int3 rhs) { return make_int3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline int3 binary_mod(int lhs, uniform int3 rhs) { return make_int3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline int3 binary_mod(uniform int lhs, int3 rhs) { return make_int3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline int3 binary_mod(int lhs, int3 rhs) { return make_int3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline uniform int4 binary_mod(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline int4 binary_mod(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline int4 binary_mod(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline int4 binary_mod(int4 lhs, int4 rhs) { return make_int4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline uniform int4 binary_mod(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline int4 binary_mod(int4 lhs, uniform int rhs) { return make_int4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline int4 binary_mod(uniform int4 lhs, int rhs) { return make_int4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline int4 binary_mod(int4 lhs, int rhs) { return make_int4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline uniform int4 binary_mod(uniform int lhs, uniform int4 rhs) { return make_int4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline int4 binary_mod(int lhs, uniform int4 rhs) { return make_int4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline int4 binary_mod(uniform int lhs, int4 rhs) { return make_int4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline int4 binary_mod(int lhs, int4 rhs) { return make_int4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline uniform uint binary_mod(uniform uint lhs, uniform uint rhs) { return lhs % rhs; }
inline uint binary_mod(uint lhs, uniform uint rhs) { return lhs % rhs; }
inline uint binary_mod(uniform uint lhs, uint rhs) { return lhs % rhs; }
inline uint binary_mod(uint lhs, uint rhs) { return lhs % rhs; }
inline uniform uint2 binary_mod(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline uint2 binary_mod(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline uint2 binary_mod(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline uint2 binary_mod(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x % rhs.x, lhs.y % rhs.y); }
inline uniform uint2 binary_mod(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x % rhs, lhs.y % rhs); }
inline uint2 binary_mod(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x % rhs, lhs.y % rhs); }
inline uint2 binary_mod(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x % rhs, lhs.y % rhs); }
inline uint2 binary_mod(uint2 lhs, uint rhs) { return make_uint2(lhs.x % rhs, lhs.y % rhs); }
inline uniform uint2 binary_mod(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs % rhs.x, lhs % rhs.y); }
inline uint2 binary_mod(uint lhs, uniform uint2 rhs) { return make_uint2(lhs % rhs.x, lhs % rhs.y); }
inline uint2 binary_mod(uniform uint lhs, uint2 rhs) { return make_uint2(lhs % rhs.x, lhs % rhs.y); }
inline uint2 binary_mod(uint lhs, uint2 rhs) { return make_uint2(lhs % rhs.x, lhs % rhs.y); }
inline uniform uint3 binary_mod(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline uint3 binary_mod(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline uint3 binary_mod(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline uint3 binary_mod(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
inline uniform uint3 binary_mod(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline uint3 binary_mod(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline uint3 binary_mod(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline uint3 binary_mod(uint3 lhs, uint rhs) { return make_uint3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
inline uniform uint3 binary_mod(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline uint3 binary_mod(uint lhs, uniform uint3 rhs) { return make_uint3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline uint3 binary_mod(uniform uint lhs, uint3 rhs) { return make_uint3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline uint3 binary_mod(uint lhs, uint3 rhs) { return make_uint3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
inline uniform uint4 binary_mod(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline uint4 binary_mod(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline uint4 binary_mod(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline uint4 binary_mod(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
inline uniform uint4 binary_mod(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline uint4 binary_mod(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline uint4 binary_mod(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline uint4 binary_mod(uint4 lhs, uint rhs) { return make_uint4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
inline uniform uint4 binary_mod(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline uint4 binary_mod(uint lhs, uniform uint4 rhs) { return make_uint4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline uint4 binary_mod(uniform uint lhs, uint4 rhs) { return make_uint4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
inline uint4 binary_mod(uint lhs, uint4 rhs) { return make_uint4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }

inline uniform int binary_shl(uniform int lhs, uniform int rhs) { return lhs << rhs; }
inline int binary_shl(int lhs, uniform int rhs) { return lhs << rhs; }
inline int binary_shl(uniform int lhs, int rhs) { return lhs << rhs; }
inline int binary_shl(int lhs, int rhs) { return lhs << rhs; }
inline uniform int2 binary_shl(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline int2 binary_shl(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline int2 binary_shl(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline int2 binary_shl(int2 lhs, int2 rhs) { return make_int2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline uniform int2 binary_shl(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x << rhs, lhs.y << rhs); }
inline int2 binary_shl(int2 lhs, uniform int rhs) { return make_int2(lhs.x << rhs, lhs.y << rhs); }
inline int2 binary_shl(uniform int2 lhs, int rhs) { return make_int2(lhs.x << rhs, lhs.y << rhs); }
inline int2 binary_shl(int2 lhs, int rhs) { return make_int2(lhs.x << rhs, lhs.y << rhs); }
inline uniform int2 binary_shl(uniform int lhs, uniform int2 rhs) { return make_int2(lhs << rhs.x, lhs << rhs.y); }
inline int2 binary_shl(int lhs, uniform int2 rhs) { return make_int2(lhs << rhs.x, lhs << rhs.y); }
inline int2 binary_shl(uniform int lhs, int2 rhs) { return make_int2(lhs << rhs.x, lhs << rhs.y); }
inline int2 binary_shl(int lhs, int2 rhs) { return make_int2(lhs << rhs.x, lhs << rhs.y); }
inline uniform int3 binary_shl(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline int3 binary_shl(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline int3 binary_shl(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline int3 binary_shl(int3 lhs, int3 rhs) { return make_int3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline uniform int3 binary_shl(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline int3 binary_shl(int3 lhs, uniform int rhs) { return make_int3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline int3 binary_shl(uniform int3 lhs, int rhs) { return make_int3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline int3 binary_shl(int3 lhs, int rhs) { return make_int3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline uniform int3 binary_shl(uniform int lhs, uniform int3 rhs) { return make_int3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline int3 binary_shl(int lhs, uniform int3 rhs) { return make_int3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline int3 binary_shl(uniform int lhs, int3 rhs) { return make_int3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline int3 binary_shl(int lhs, int3 rhs) { return make_int3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline uniform int4 binary_shl(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline int4 binary_shl(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline int4 binary_shl(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline int4 binary_shl(int4 lhs, int4 rhs) { return make_int4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline uniform int4 binary_shl(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline int4 binary_shl(int4 lhs, uniform int rhs) { return make_int4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline int4 binary_shl(uniform int4 lhs, int rhs) { return make_int4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline int4 binary_shl(int4 lhs, int rhs) { return make_int4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline uniform int4 binary_shl(uniform int lhs, uniform int4 rhs) { return make_int4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline int4 binary_shl(int lhs, uniform int4 rhs) { return make_int4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline int4 binary_shl(uniform int lhs, int4 rhs) { return make_int4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline int4 binary_shl(int lhs, int4 rhs) { return make_int4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline uniform uint binary_shl(uniform uint lhs, uniform uint rhs) { return lhs << rhs; }
inline uint binary_shl(uint lhs, uniform uint rhs) { return lhs << rhs; }
inline uint binary_shl(uniform uint lhs, uint rhs) { return lhs << rhs; }
inline uint binary_shl(uint lhs, uint rhs) { return lhs << rhs; }
inline uniform uint2 binary_shl(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline uint2 binary_shl(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline uint2 binary_shl(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline uint2 binary_shl(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x << rhs.x, lhs.y << rhs.y); }
inline uniform uint2 binary_shl(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x << rhs, lhs.y << rhs); }
inline uint2 binary_shl(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x << rhs, lhs.y << rhs); }
inline uint2 binary_shl(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x << rhs, lhs.y << rhs); }
inline uint2 binary_shl(uint2 lhs, uint rhs) { return make_uint2(lhs.x << rhs, lhs.y << rhs); }
inline uniform uint2 binary_shl(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs << rhs.x, lhs << rhs.y); }
inline uint2 binary_shl(uint lhs, uniform uint2 rhs) { return make_uint2(lhs << rhs.x, lhs << rhs.y); }
inline uint2 binary_shl(uniform uint lhs, uint2 rhs) { return make_uint2(lhs << rhs.x, lhs << rhs.y); }
inline uint2 binary_shl(uint lhs, uint2 rhs) { return make_uint2(lhs << rhs.x, lhs << rhs.y); }
inline uniform uint3 binary_shl(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline uint3 binary_shl(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline uint3 binary_shl(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline uint3 binary_shl(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
inline uniform uint3 binary_shl(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline uint3 binary_shl(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline uint3 binary_shl(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline uint3 binary_shl(uint3 lhs, uint rhs) { return make_uint3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
inline uniform uint3 binary_shl(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline uint3 binary_shl(uint lhs, uniform uint3 rhs) { return make_uint3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline uint3 binary_shl(uniform uint lhs, uint3 rhs) { return make_uint3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline uint3 binary_shl(uint lhs, uint3 rhs) { return make_uint3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
inline uniform uint4 binary_shl(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline uint4 binary_shl(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline uint4 binary_shl(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline uint4 binary_shl(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
inline uniform uint4 binary_shl(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline uint4 binary_shl(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline uint4 binary_shl(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline uint4 binary_shl(uint4 lhs, uint rhs) { return make_uint4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
inline uniform uint4 binary_shl(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline uint4 binary_shl(uint lhs, uniform uint4 rhs) { return make_uint4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline uint4 binary_shl(uniform uint lhs, uint4 rhs) { return make_uint4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
inline uint4 binary_shl(uint lhs, uint4 rhs) { return make_uint4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }

inline uniform int binary_shr(uniform int lhs, uniform int rhs) { return lhs >> rhs; }
inline int binary_shr(int lhs, uniform int rhs) { return lhs >> rhs; }
inline int binary_shr(uniform int lhs, int rhs) { return lhs >> rhs; }
inline int binary_shr(int lhs, int rhs) { return lhs >> rhs; }
inline uniform int2 binary_shr(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline int2 binary_shr(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline int2 binary_shr(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline int2 binary_shr(int2 lhs, int2 rhs) { return make_int2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline uniform int2 binary_shr(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x >> rhs, lhs.y >> rhs); }
inline int2 binary_shr(int2 lhs, uniform int rhs) { return make_int2(lhs.x >> rhs, lhs.y >> rhs); }
inline int2 binary_shr(uniform int2 lhs, int rhs) { return make_int2(lhs.x >> rhs, lhs.y >> rhs); }
inline int2 binary_shr(int2 lhs, int rhs) { return make_int2(lhs.x >> rhs, lhs.y >> rhs); }
inline uniform int2 binary_shr(uniform int lhs, uniform int2 rhs) { return make_int2(lhs >> rhs.x, lhs >> rhs.y); }
inline int2 binary_shr(int lhs, uniform int2 rhs) { return make_int2(lhs >> rhs.x, lhs >> rhs.y); }
inline int2 binary_shr(uniform int lhs, int2 rhs) { return make_int2(lhs >> rhs.x, lhs >> rhs.y); }
inline int2 binary_shr(int lhs, int2 rhs) { return make_int2(lhs >> rhs.x, lhs >> rhs.y); }
inline uniform int3 binary_shr(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline int3 binary_shr(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline int3 binary_shr(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline int3 binary_shr(int3 lhs, int3 rhs) { return make_int3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline uniform int3 binary_shr(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline int3 binary_shr(int3 lhs, uniform int rhs) { return make_int3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline int3 binary_shr(uniform int3 lhs, int rhs) { return make_int3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline int3 binary_shr(int3 lhs, int rhs) { return make_int3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline uniform int3 binary_shr(uniform int lhs, uniform int3 rhs) { return make_int3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline int3 binary_shr(int lhs, uniform int3 rhs) { return make_int3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline int3 binary_shr(uniform int lhs, int3 rhs) { return make_int3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline int3 binary_shr(int lhs, int3 rhs) { return make_int3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline uniform int4 binary_shr(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline int4 binary_shr(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline int4 binary_shr(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline int4 binary_shr(int4 lhs, int4 rhs) { return make_int4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline uniform int4 binary_shr(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline int4 binary_shr(int4 lhs, uniform int rhs) { return make_int4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline int4 binary_shr(uniform int4 lhs, int rhs) { return make_int4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline int4 binary_shr(int4 lhs, int rhs) { return make_int4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline uniform int4 binary_shr(uniform int lhs, uniform int4 rhs) { return make_int4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline int4 binary_shr(int lhs, uniform int4 rhs) { return make_int4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline int4 binary_shr(uniform int lhs, int4 rhs) { return make_int4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline int4 binary_shr(int lhs, int4 rhs) { return make_int4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline uniform uint binary_shr(uniform uint lhs, uniform uint rhs) { return lhs >> rhs; }
inline uint binary_shr(uint lhs, uniform uint rhs) { return lhs >> rhs; }
inline uint binary_shr(uniform uint lhs, uint rhs) { return lhs >> rhs; }
inline uint binary_shr(uint lhs, uint rhs) { return lhs >> rhs; }
inline uniform uint2 binary_shr(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline uint2 binary_shr(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline uint2 binary_shr(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline uint2 binary_shr(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
inline uniform uint2 binary_shr(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x >> rhs, lhs.y >> rhs); }
inline uint2 binary_shr(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x >> rhs, lhs.y >> rhs); }
inline uint2 binary_shr(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x >> rhs, lhs.y >> rhs); }
inline uint2 binary_shr(uint2 lhs, uint rhs) { return make_uint2(lhs.x >> rhs, lhs.y >> rhs); }
inline uniform uint2 binary_shr(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs >> rhs.x, lhs >> rhs.y); }
inline uint2 binary_shr(uint lhs, uniform uint2 rhs) { return make_uint2(lhs >> rhs.x, lhs >> rhs.y); }
inline uint2 binary_shr(uniform uint lhs, uint2 rhs) { return make_uint2(lhs >> rhs.x, lhs >> rhs.y); }
inline uint2 binary_shr(uint lhs, uint2 rhs) { return make_uint2(lhs >> rhs.x, lhs >> rhs.y); }
inline uniform uint3 binary_shr(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline uint3 binary_shr(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline uint3 binary_shr(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline uint3 binary_shr(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
inline uniform uint3 binary_shr(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline uint3 binary_shr(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline uint3 binary_shr(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline uint3 binary_shr(uint3 lhs, uint rhs) { return make_uint3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
inline uniform uint3 binary_shr(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline uint3 binary_shr(uint lhs, uniform uint3 rhs) { return make_uint3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline uint3 binary_shr(uniform uint lhs, uint3 rhs) { return make_uint3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline uint3 binary_shr(uint lhs, uint3 rhs) { return make_uint3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
inline uniform uint4 binary_shr(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline uint4 binary_shr(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline uint4 binary_shr(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline uint4 binary_shr(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
inline uniform uint4 binary_shr(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline uint4 binary_shr(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline uint4 binary_shr(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline uint4 binary_shr(uint4 lhs, uint rhs) { return make_uint4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
inline uniform uint4 binary_shr(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline uint4 binary_shr(uint lhs, uniform uint4 rhs) { return make_uint4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline uint4 binary_shr(uniform uint lhs, uint4 rhs) { return make_uint4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }
inline uint4 binary_shr(uint lhs, uint4 rhs) { return make_uint4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }

inline uniform int binary_bit_or(uniform int lhs, uniform int rhs) { return lhs | rhs; }
inline int binary_bit_or(int lhs, uniform int rhs) { return lhs | rhs; }
inline int binary_bit_or(uniform int lhs, int rhs) { return lhs | rhs; }
inline int binary_bit_or(int lhs, int rhs) { return lhs | rhs; }
inline uniform int2 binary_bit_or(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline int2 binary_bit_or(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline int2 binary_bit_or(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline int2 binary_bit_or(int2 lhs, int2 rhs) { return make_int2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uniform int2 binary_bit_or(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x | rhs, lhs.y | rhs); }
inline int2 binary_bit_or(int2 lhs, uniform int rhs) { return make_int2(lhs.x | rhs, lhs.y | rhs); }
inline int2 binary_bit_or(uniform int2 lhs, int rhs) { return make_int2(lhs.x | rhs, lhs.y | rhs); }
inline int2 binary_bit_or(int2 lhs, int rhs) { return make_int2(lhs.x | rhs, lhs.y | rhs); }
inline uniform int2 binary_bit_or(uniform int lhs, uniform int2 rhs) { return make_int2(lhs | rhs.x, lhs | rhs.y); }
inline int2 binary_bit_or(int lhs, uniform int2 rhs) { return make_int2(lhs | rhs.x, lhs | rhs.y); }
inline int2 binary_bit_or(uniform int lhs, int2 rhs) { return make_int2(lhs | rhs.x, lhs | rhs.y); }
inline int2 binary_bit_or(int lhs, int2 rhs) { return make_int2(lhs | rhs.x, lhs | rhs.y); }
inline uniform int3 binary_bit_or(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline int3 binary_bit_or(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline int3 binary_bit_or(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline int3 binary_bit_or(int3 lhs, int3 rhs) { return make_int3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uniform int3 binary_bit_or(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline int3 binary_bit_or(int3 lhs, uniform int rhs) { return make_int3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline int3 binary_bit_or(uniform int3 lhs, int rhs) { return make_int3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline int3 binary_bit_or(int3 lhs, int rhs) { return make_int3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uniform int3 binary_bit_or(uniform int lhs, uniform int3 rhs) { return make_int3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline int3 binary_bit_or(int lhs, uniform int3 rhs) { return make_int3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline int3 binary_bit_or(uniform int lhs, int3 rhs) { return make_int3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline int3 binary_bit_or(int lhs, int3 rhs) { return make_int3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uniform int4 binary_bit_or(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline int4 binary_bit_or(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline int4 binary_bit_or(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline int4 binary_bit_or(int4 lhs, int4 rhs) { return make_int4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uniform int4 binary_bit_or(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline int4 binary_bit_or(int4 lhs, uniform int rhs) { return make_int4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline int4 binary_bit_or(uniform int4 lhs, int rhs) { return make_int4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline int4 binary_bit_or(int4 lhs, int rhs) { return make_int4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uniform int4 binary_bit_or(uniform int lhs, uniform int4 rhs) { return make_int4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline int4 binary_bit_or(int lhs, uniform int4 rhs) { return make_int4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline int4 binary_bit_or(uniform int lhs, int4 rhs) { return make_int4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline int4 binary_bit_or(int lhs, int4 rhs) { return make_int4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline uniform uint binary_bit_or(uniform uint lhs, uniform uint rhs) { return lhs | rhs; }
inline uint binary_bit_or(uint lhs, uniform uint rhs) { return lhs | rhs; }
inline uint binary_bit_or(uniform uint lhs, uint rhs) { return lhs | rhs; }
inline uint binary_bit_or(uint lhs, uint rhs) { return lhs | rhs; }
inline uniform uint2 binary_bit_or(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uint2 binary_bit_or(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uint2 binary_bit_or(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uint2 binary_bit_or(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uniform uint2 binary_bit_or(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x | rhs, lhs.y | rhs); }
inline uint2 binary_bit_or(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x | rhs, lhs.y | rhs); }
inline uint2 binary_bit_or(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x | rhs, lhs.y | rhs); }
inline uint2 binary_bit_or(uint2 lhs, uint rhs) { return make_uint2(lhs.x | rhs, lhs.y | rhs); }
inline uniform uint2 binary_bit_or(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs | rhs.x, lhs | rhs.y); }
inline uint2 binary_bit_or(uint lhs, uniform uint2 rhs) { return make_uint2(lhs | rhs.x, lhs | rhs.y); }
inline uint2 binary_bit_or(uniform uint lhs, uint2 rhs) { return make_uint2(lhs | rhs.x, lhs | rhs.y); }
inline uint2 binary_bit_or(uint lhs, uint2 rhs) { return make_uint2(lhs | rhs.x, lhs | rhs.y); }
inline uniform uint3 binary_bit_or(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uint3 binary_bit_or(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uint3 binary_bit_or(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uint3 binary_bit_or(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uniform uint3 binary_bit_or(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uint3 binary_bit_or(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uint3 binary_bit_or(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uint3 binary_bit_or(uint3 lhs, uint rhs) { return make_uint3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uniform uint3 binary_bit_or(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uint3 binary_bit_or(uint lhs, uniform uint3 rhs) { return make_uint3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uint3 binary_bit_or(uniform uint lhs, uint3 rhs) { return make_uint3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uint3 binary_bit_or(uint lhs, uint3 rhs) { return make_uint3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uniform uint4 binary_bit_or(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uint4 binary_bit_or(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uint4 binary_bit_or(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uint4 binary_bit_or(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uniform uint4 binary_bit_or(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uint4 binary_bit_or(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uint4 binary_bit_or(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uint4 binary_bit_or(uint4 lhs, uint rhs) { return make_uint4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uniform uint4 binary_bit_or(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline uint4 binary_bit_or(uint lhs, uniform uint4 rhs) { return make_uint4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline uint4 binary_bit_or(uniform uint lhs, uint4 rhs) { return make_uint4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline uint4 binary_bit_or(uint lhs, uint4 rhs) { return make_uint4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline uniform bool binary_bit_or(uniform bool lhs, uniform bool rhs) { return lhs | rhs; }
inline bool binary_bit_or(bool lhs, uniform bool rhs) { return lhs | rhs; }
inline bool binary_bit_or(uniform bool lhs, bool rhs) { return lhs | rhs; }
inline bool binary_bit_or(bool lhs, bool rhs) { return lhs | rhs; }
inline uniform bool2 binary_bit_or(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline bool2 binary_bit_or(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline bool2 binary_bit_or(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline bool2 binary_bit_or(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x | rhs.x, lhs.y | rhs.y); }
inline uniform bool2 binary_bit_or(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x | rhs, lhs.y | rhs); }
inline bool2 binary_bit_or(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x | rhs, lhs.y | rhs); }
inline bool2 binary_bit_or(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x | rhs, lhs.y | rhs); }
inline bool2 binary_bit_or(bool2 lhs, bool rhs) { return make_bool2(lhs.x | rhs, lhs.y | rhs); }
inline uniform bool2 binary_bit_or(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs | rhs.x, lhs | rhs.y); }
inline bool2 binary_bit_or(bool lhs, uniform bool2 rhs) { return make_bool2(lhs | rhs.x, lhs | rhs.y); }
inline bool2 binary_bit_or(uniform bool lhs, bool2 rhs) { return make_bool2(lhs | rhs.x, lhs | rhs.y); }
inline bool2 binary_bit_or(bool lhs, bool2 rhs) { return make_bool2(lhs | rhs.x, lhs | rhs.y); }
inline uniform bool3 binary_bit_or(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline bool3 binary_bit_or(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline bool3 binary_bit_or(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline bool3 binary_bit_or(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
inline uniform bool3 binary_bit_or(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline bool3 binary_bit_or(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline bool3 binary_bit_or(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline bool3 binary_bit_or(bool3 lhs, bool rhs) { return make_bool3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
inline uniform bool3 binary_bit_or(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline bool3 binary_bit_or(bool lhs, uniform bool3 rhs) { return make_bool3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline bool3 binary_bit_or(uniform bool lhs, bool3 rhs) { return make_bool3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline bool3 binary_bit_or(bool lhs, bool3 rhs) { return make_bool3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
inline uniform bool4 binary_bit_or(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline bool4 binary_bit_or(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline bool4 binary_bit_or(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline bool4 binary_bit_or(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
inline uniform bool4 binary_bit_or(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline bool4 binary_bit_or(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline bool4 binary_bit_or(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline bool4 binary_bit_or(bool4 lhs, bool rhs) { return make_bool4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
inline uniform bool4 binary_bit_or(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline bool4 binary_bit_or(bool lhs, uniform bool4 rhs) { return make_bool4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline bool4 binary_bit_or(uniform bool lhs, bool4 rhs) { return make_bool4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
inline bool4 binary_bit_or(bool lhs, bool4 rhs) { return make_bool4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }

inline uniform int binary_bit_and(uniform int lhs, uniform int rhs) { return lhs & rhs; }
inline int binary_bit_and(int lhs, uniform int rhs) { return lhs & rhs; }
inline int binary_bit_and(uniform int lhs, int rhs) { return lhs & rhs; }
inline int binary_bit_and(int lhs, int rhs) { return lhs & rhs; }
inline uniform int2 binary_bit_and(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline int2 binary_bit_and(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline int2 binary_bit_and(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline int2 binary_bit_and(int2 lhs, int2 rhs) { return make_int2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uniform int2 binary_bit_and(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x & rhs, lhs.y & rhs); }
inline int2 binary_bit_and(int2 lhs, uniform int rhs) { return make_int2(lhs.x & rhs, lhs.y & rhs); }
inline int2 binary_bit_and(uniform int2 lhs, int rhs) { return make_int2(lhs.x & rhs, lhs.y & rhs); }
inline int2 binary_bit_and(int2 lhs, int rhs) { return make_int2(lhs.x & rhs, lhs.y & rhs); }
inline uniform int2 binary_bit_and(uniform int lhs, uniform int2 rhs) { return make_int2(lhs & rhs.x, lhs & rhs.y); }
inline int2 binary_bit_and(int lhs, uniform int2 rhs) { return make_int2(lhs & rhs.x, lhs & rhs.y); }
inline int2 binary_bit_and(uniform int lhs, int2 rhs) { return make_int2(lhs & rhs.x, lhs & rhs.y); }
inline int2 binary_bit_and(int lhs, int2 rhs) { return make_int2(lhs & rhs.x, lhs & rhs.y); }
inline uniform int3 binary_bit_and(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline int3 binary_bit_and(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline int3 binary_bit_and(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline int3 binary_bit_and(int3 lhs, int3 rhs) { return make_int3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uniform int3 binary_bit_and(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline int3 binary_bit_and(int3 lhs, uniform int rhs) { return make_int3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline int3 binary_bit_and(uniform int3 lhs, int rhs) { return make_int3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline int3 binary_bit_and(int3 lhs, int rhs) { return make_int3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uniform int3 binary_bit_and(uniform int lhs, uniform int3 rhs) { return make_int3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline int3 binary_bit_and(int lhs, uniform int3 rhs) { return make_int3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline int3 binary_bit_and(uniform int lhs, int3 rhs) { return make_int3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline int3 binary_bit_and(int lhs, int3 rhs) { return make_int3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uniform int4 binary_bit_and(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline int4 binary_bit_and(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline int4 binary_bit_and(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline int4 binary_bit_and(int4 lhs, int4 rhs) { return make_int4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uniform int4 binary_bit_and(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline int4 binary_bit_and(int4 lhs, uniform int rhs) { return make_int4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline int4 binary_bit_and(uniform int4 lhs, int rhs) { return make_int4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline int4 binary_bit_and(int4 lhs, int rhs) { return make_int4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uniform int4 binary_bit_and(uniform int lhs, uniform int4 rhs) { return make_int4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline int4 binary_bit_and(int lhs, uniform int4 rhs) { return make_int4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline int4 binary_bit_and(uniform int lhs, int4 rhs) { return make_int4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline int4 binary_bit_and(int lhs, int4 rhs) { return make_int4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline uniform uint binary_bit_and(uniform uint lhs, uniform uint rhs) { return lhs & rhs; }
inline uint binary_bit_and(uint lhs, uniform uint rhs) { return lhs & rhs; }
inline uint binary_bit_and(uniform uint lhs, uint rhs) { return lhs & rhs; }
inline uint binary_bit_and(uint lhs, uint rhs) { return lhs & rhs; }
inline uniform uint2 binary_bit_and(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uint2 binary_bit_and(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uint2 binary_bit_and(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uint2 binary_bit_and(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uniform uint2 binary_bit_and(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x & rhs, lhs.y & rhs); }
inline uint2 binary_bit_and(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x & rhs, lhs.y & rhs); }
inline uint2 binary_bit_and(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x & rhs, lhs.y & rhs); }
inline uint2 binary_bit_and(uint2 lhs, uint rhs) { return make_uint2(lhs.x & rhs, lhs.y & rhs); }
inline uniform uint2 binary_bit_and(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs & rhs.x, lhs & rhs.y); }
inline uint2 binary_bit_and(uint lhs, uniform uint2 rhs) { return make_uint2(lhs & rhs.x, lhs & rhs.y); }
inline uint2 binary_bit_and(uniform uint lhs, uint2 rhs) { return make_uint2(lhs & rhs.x, lhs & rhs.y); }
inline uint2 binary_bit_and(uint lhs, uint2 rhs) { return make_uint2(lhs & rhs.x, lhs & rhs.y); }
inline uniform uint3 binary_bit_and(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uint3 binary_bit_and(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uint3 binary_bit_and(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uint3 binary_bit_and(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uniform uint3 binary_bit_and(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uint3 binary_bit_and(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uint3 binary_bit_and(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uint3 binary_bit_and(uint3 lhs, uint rhs) { return make_uint3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uniform uint3 binary_bit_and(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uint3 binary_bit_and(uint lhs, uniform uint3 rhs) { return make_uint3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uint3 binary_bit_and(uniform uint lhs, uint3 rhs) { return make_uint3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uint3 binary_bit_and(uint lhs, uint3 rhs) { return make_uint3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uniform uint4 binary_bit_and(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uint4 binary_bit_and(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uint4 binary_bit_and(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uint4 binary_bit_and(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uniform uint4 binary_bit_and(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uint4 binary_bit_and(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uint4 binary_bit_and(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uint4 binary_bit_and(uint4 lhs, uint rhs) { return make_uint4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uniform uint4 binary_bit_and(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline uint4 binary_bit_and(uint lhs, uniform uint4 rhs) { return make_uint4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline uint4 binary_bit_and(uniform uint lhs, uint4 rhs) { return make_uint4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline uint4 binary_bit_and(uint lhs, uint4 rhs) { return make_uint4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline uniform bool binary_bit_and(uniform bool lhs, uniform bool rhs) { return lhs & rhs; }
inline bool binary_bit_and(bool lhs, uniform bool rhs) { return lhs & rhs; }
inline bool binary_bit_and(uniform bool lhs, bool rhs) { return lhs & rhs; }
inline bool binary_bit_and(bool lhs, bool rhs) { return lhs & rhs; }
inline uniform bool2 binary_bit_and(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline bool2 binary_bit_and(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline bool2 binary_bit_and(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline bool2 binary_bit_and(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x & rhs.x, lhs.y & rhs.y); }
inline uniform bool2 binary_bit_and(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x & rhs, lhs.y & rhs); }
inline bool2 binary_bit_and(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x & rhs, lhs.y & rhs); }
inline bool2 binary_bit_and(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x & rhs, lhs.y & rhs); }
inline bool2 binary_bit_and(bool2 lhs, bool rhs) { return make_bool2(lhs.x & rhs, lhs.y & rhs); }
inline uniform bool2 binary_bit_and(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs & rhs.x, lhs & rhs.y); }
inline bool2 binary_bit_and(bool lhs, uniform bool2 rhs) { return make_bool2(lhs & rhs.x, lhs & rhs.y); }
inline bool2 binary_bit_and(uniform bool lhs, bool2 rhs) { return make_bool2(lhs & rhs.x, lhs & rhs.y); }
inline bool2 binary_bit_and(bool lhs, bool2 rhs) { return make_bool2(lhs & rhs.x, lhs & rhs.y); }
inline uniform bool3 binary_bit_and(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline bool3 binary_bit_and(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline bool3 binary_bit_and(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline bool3 binary_bit_and(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
inline uniform bool3 binary_bit_and(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline bool3 binary_bit_and(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline bool3 binary_bit_and(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline bool3 binary_bit_and(bool3 lhs, bool rhs) { return make_bool3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
inline uniform bool3 binary_bit_and(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline bool3 binary_bit_and(bool lhs, uniform bool3 rhs) { return make_bool3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline bool3 binary_bit_and(uniform bool lhs, bool3 rhs) { return make_bool3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline bool3 binary_bit_and(bool lhs, bool3 rhs) { return make_bool3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
inline uniform bool4 binary_bit_and(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline bool4 binary_bit_and(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline bool4 binary_bit_and(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline bool4 binary_bit_and(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
inline uniform bool4 binary_bit_and(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline bool4 binary_bit_and(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline bool4 binary_bit_and(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline bool4 binary_bit_and(bool4 lhs, bool rhs) { return make_bool4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
inline uniform bool4 binary_bit_and(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline bool4 binary_bit_and(bool lhs, uniform bool4 rhs) { return make_bool4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline bool4 binary_bit_and(uniform bool lhs, bool4 rhs) { return make_bool4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
inline bool4 binary_bit_and(bool lhs, bool4 rhs) { return make_bool4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }

inline uniform int binary_bit_xor(uniform int lhs, uniform int rhs) { return lhs ^ rhs; }
inline int binary_bit_xor(int lhs, uniform int rhs) { return lhs ^ rhs; }
inline int binary_bit_xor(uniform int lhs, int rhs) { return lhs ^ rhs; }
inline int binary_bit_xor(int lhs, int rhs) { return lhs ^ rhs; }
inline uniform int2 binary_bit_xor(uniform int2 lhs, uniform int2 rhs) { return make_int2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline int2 binary_bit_xor(int2 lhs, uniform int2 rhs) { return make_int2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline int2 binary_bit_xor(uniform int2 lhs, int2 rhs) { return make_int2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline int2 binary_bit_xor(int2 lhs, int2 rhs) { return make_int2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uniform int2 binary_bit_xor(uniform int2 lhs, uniform int rhs) { return make_int2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline int2 binary_bit_xor(int2 lhs, uniform int rhs) { return make_int2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline int2 binary_bit_xor(uniform int2 lhs, int rhs) { return make_int2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline int2 binary_bit_xor(int2 lhs, int rhs) { return make_int2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uniform int2 binary_bit_xor(uniform int lhs, uniform int2 rhs) { return make_int2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline int2 binary_bit_xor(int lhs, uniform int2 rhs) { return make_int2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline int2 binary_bit_xor(uniform int lhs, int2 rhs) { return make_int2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline int2 binary_bit_xor(int lhs, int2 rhs) { return make_int2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uniform int3 binary_bit_xor(uniform int3 lhs, uniform int3 rhs) { return make_int3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline int3 binary_bit_xor(int3 lhs, uniform int3 rhs) { return make_int3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline int3 binary_bit_xor(uniform int3 lhs, int3 rhs) { return make_int3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline int3 binary_bit_xor(int3 lhs, int3 rhs) { return make_int3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uniform int3 binary_bit_xor(uniform int3 lhs, uniform int rhs) { return make_int3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline int3 binary_bit_xor(int3 lhs, uniform int rhs) { return make_int3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline int3 binary_bit_xor(uniform int3 lhs, int rhs) { return make_int3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline int3 binary_bit_xor(int3 lhs, int rhs) { return make_int3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uniform int3 binary_bit_xor(uniform int lhs, uniform int3 rhs) { return make_int3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline int3 binary_bit_xor(int lhs, uniform int3 rhs) { return make_int3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline int3 binary_bit_xor(uniform int lhs, int3 rhs) { return make_int3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline int3 binary_bit_xor(int lhs, int3 rhs) { return make_int3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uniform int4 binary_bit_xor(uniform int4 lhs, uniform int4 rhs) { return make_int4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline int4 binary_bit_xor(int4 lhs, uniform int4 rhs) { return make_int4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline int4 binary_bit_xor(uniform int4 lhs, int4 rhs) { return make_int4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline int4 binary_bit_xor(int4 lhs, int4 rhs) { return make_int4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uniform int4 binary_bit_xor(uniform int4 lhs, uniform int rhs) { return make_int4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline int4 binary_bit_xor(int4 lhs, uniform int rhs) { return make_int4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline int4 binary_bit_xor(uniform int4 lhs, int rhs) { return make_int4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline int4 binary_bit_xor(int4 lhs, int rhs) { return make_int4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uniform int4 binary_bit_xor(uniform int lhs, uniform int4 rhs) { return make_int4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline int4 binary_bit_xor(int lhs, uniform int4 rhs) { return make_int4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline int4 binary_bit_xor(uniform int lhs, int4 rhs) { return make_int4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline int4 binary_bit_xor(int lhs, int4 rhs) { return make_int4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline uniform uint binary_bit_xor(uniform uint lhs, uniform uint rhs) { return lhs ^ rhs; }
inline uint binary_bit_xor(uint lhs, uniform uint rhs) { return lhs ^ rhs; }
inline uint binary_bit_xor(uniform uint lhs, uint rhs) { return lhs ^ rhs; }
inline uint binary_bit_xor(uint lhs, uint rhs) { return lhs ^ rhs; }
inline uniform uint2 binary_bit_xor(uniform uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uint2 binary_bit_xor(uint2 lhs, uniform uint2 rhs) { return make_uint2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uint2 binary_bit_xor(uniform uint2 lhs, uint2 rhs) { return make_uint2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uint2 binary_bit_xor(uint2 lhs, uint2 rhs) { return make_uint2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uniform uint2 binary_bit_xor(uniform uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uint2 binary_bit_xor(uint2 lhs, uniform uint rhs) { return make_uint2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uint2 binary_bit_xor(uniform uint2 lhs, uint rhs) { return make_uint2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uint2 binary_bit_xor(uint2 lhs, uint rhs) { return make_uint2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uniform uint2 binary_bit_xor(uniform uint lhs, uniform uint2 rhs) { return make_uint2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uint2 binary_bit_xor(uint lhs, uniform uint2 rhs) { return make_uint2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uint2 binary_bit_xor(uniform uint lhs, uint2 rhs) { return make_uint2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uint2 binary_bit_xor(uint lhs, uint2 rhs) { return make_uint2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uniform uint3 binary_bit_xor(uniform uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uint3 binary_bit_xor(uint3 lhs, uniform uint3 rhs) { return make_uint3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uint3 binary_bit_xor(uniform uint3 lhs, uint3 rhs) { return make_uint3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uint3 binary_bit_xor(uint3 lhs, uint3 rhs) { return make_uint3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uniform uint3 binary_bit_xor(uniform uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uint3 binary_bit_xor(uint3 lhs, uniform uint rhs) { return make_uint3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uint3 binary_bit_xor(uniform uint3 lhs, uint rhs) { return make_uint3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uint3 binary_bit_xor(uint3 lhs, uint rhs) { return make_uint3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uniform uint3 binary_bit_xor(uniform uint lhs, uniform uint3 rhs) { return make_uint3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uint3 binary_bit_xor(uint lhs, uniform uint3 rhs) { return make_uint3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uint3 binary_bit_xor(uniform uint lhs, uint3 rhs) { return make_uint3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uint3 binary_bit_xor(uint lhs, uint3 rhs) { return make_uint3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uniform uint4 binary_bit_xor(uniform uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uint4 binary_bit_xor(uint4 lhs, uniform uint4 rhs) { return make_uint4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uint4 binary_bit_xor(uniform uint4 lhs, uint4 rhs) { return make_uint4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uint4 binary_bit_xor(uint4 lhs, uint4 rhs) { return make_uint4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uniform uint4 binary_bit_xor(uniform uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uint4 binary_bit_xor(uint4 lhs, uniform uint rhs) { return make_uint4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uint4 binary_bit_xor(uniform uint4 lhs, uint rhs) { return make_uint4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uint4 binary_bit_xor(uint4 lhs, uint rhs) { return make_uint4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uniform uint4 binary_bit_xor(uniform uint lhs, uniform uint4 rhs) { return make_uint4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline uint4 binary_bit_xor(uint lhs, uniform uint4 rhs) { return make_uint4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline uint4 binary_bit_xor(uniform uint lhs, uint4 rhs) { return make_uint4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline uint4 binary_bit_xor(uint lhs, uint4 rhs) { return make_uint4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline uniform bool binary_bit_xor(uniform bool lhs, uniform bool rhs) { return lhs ^ rhs; }
inline bool binary_bit_xor(bool lhs, uniform bool rhs) { return lhs ^ rhs; }
inline bool binary_bit_xor(uniform bool lhs, bool rhs) { return lhs ^ rhs; }
inline bool binary_bit_xor(bool lhs, bool rhs) { return lhs ^ rhs; }
inline uniform bool2 binary_bit_xor(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline bool2 binary_bit_xor(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline bool2 binary_bit_xor(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline bool2 binary_bit_xor(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
inline uniform bool2 binary_bit_xor(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline bool2 binary_bit_xor(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline bool2 binary_bit_xor(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline bool2 binary_bit_xor(bool2 lhs, bool rhs) { return make_bool2(lhs.x ^ rhs, lhs.y ^ rhs); }
inline uniform bool2 binary_bit_xor(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline bool2 binary_bit_xor(bool lhs, uniform bool2 rhs) { return make_bool2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline bool2 binary_bit_xor(uniform bool lhs, bool2 rhs) { return make_bool2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline bool2 binary_bit_xor(bool lhs, bool2 rhs) { return make_bool2(lhs ^ rhs.x, lhs ^ rhs.y); }
inline uniform bool3 binary_bit_xor(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline bool3 binary_bit_xor(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline bool3 binary_bit_xor(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline bool3 binary_bit_xor(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
inline uniform bool3 binary_bit_xor(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline bool3 binary_bit_xor(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline bool3 binary_bit_xor(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline bool3 binary_bit_xor(bool3 lhs, bool rhs) { return make_bool3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
inline uniform bool3 binary_bit_xor(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline bool3 binary_bit_xor(bool lhs, uniform bool3 rhs) { return make_bool3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline bool3 binary_bit_xor(uniform bool lhs, bool3 rhs) { return make_bool3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline bool3 binary_bit_xor(bool lhs, bool3 rhs) { return make_bool3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
inline uniform bool4 binary_bit_xor(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline bool4 binary_bit_xor(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline bool4 binary_bit_xor(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline bool4 binary_bit_xor(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
inline uniform bool4 binary_bit_xor(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline bool4 binary_bit_xor(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline bool4 binary_bit_xor(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline bool4 binary_bit_xor(bool4 lhs, bool rhs) { return make_bool4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
inline uniform bool4 binary_bit_xor(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline bool4 binary_bit_xor(bool lhs, uniform bool4 rhs) { return make_bool4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline bool4 binary_bit_xor(uniform bool lhs, bool4 rhs) { return make_bool4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
inline bool4 binary_bit_xor(bool lhs, bool4 rhs) { return make_bool4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }

inline uniform bool binary_or(uniform bool lhs, uniform bool rhs) { return lhs || rhs; }
inline bool binary_or(bool lhs, uniform bool rhs) { return lhs || rhs; }
inline bool binary_or(uniform bool lhs, bool rhs) { return lhs || rhs; }
inline bool binary_or(bool lhs, bool rhs) { return lhs || rhs; }
inline uniform bool2 binary_or(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
inline bool2 binary_or(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
inline bool2 binary_or(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
inline bool2 binary_or(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
inline uniform bool2 binary_or(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x || rhs, lhs.y || rhs); }
inline bool2 binary_or(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x || rhs, lhs.y || rhs); }
inline bool2 binary_or(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x || rhs, lhs.y || rhs); }
inline bool2 binary_or(bool2 lhs, bool rhs) { return make_bool2(lhs.x || rhs, lhs.y || rhs); }
inline uniform bool2 binary_or(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs || rhs.x, lhs || rhs.y); }
inline bool2 binary_or(bool lhs, uniform bool2 rhs) { return make_bool2(lhs || rhs.x, lhs || rhs.y); }
inline bool2 binary_or(uniform bool lhs, bool2 rhs) { return make_bool2(lhs || rhs.x, lhs || rhs.y); }
inline bool2 binary_or(bool lhs, bool2 rhs) { return make_bool2(lhs || rhs.x, lhs || rhs.y); }
inline uniform bool3 binary_or(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
inline bool3 binary_or(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
inline bool3 binary_or(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
inline bool3 binary_or(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
inline uniform bool3 binary_or(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
inline bool3 binary_or(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
inline bool3 binary_or(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
inline bool3 binary_or(bool3 lhs, bool rhs) { return make_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
inline uniform bool3 binary_or(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
inline bool3 binary_or(bool lhs, uniform bool3 rhs) { return make_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
inline bool3 binary_or(uniform bool lhs, bool3 rhs) { return make_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
inline bool3 binary_or(bool lhs, bool3 rhs) { return make_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
inline uniform bool4 binary_or(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
inline bool4 binary_or(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
inline bool4 binary_or(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
inline bool4 binary_or(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
inline uniform bool4 binary_or(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
inline bool4 binary_or(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
inline bool4 binary_or(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
inline bool4 binary_or(bool4 lhs, bool rhs) { return make_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
inline uniform bool4 binary_or(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
inline bool4 binary_or(bool lhs, uniform bool4 rhs) { return make_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
inline bool4 binary_or(uniform bool lhs, bool4 rhs) { return make_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
inline bool4 binary_or(bool lhs, bool4 rhs) { return make_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
inline uniform bool binary_and(uniform bool lhs, uniform bool rhs) { return lhs && rhs; }
inline bool binary_and(bool lhs, uniform bool rhs) { return lhs && rhs; }
inline bool binary_and(uniform bool lhs, bool rhs) { return lhs && rhs; }
inline bool binary_and(bool lhs, bool rhs) { return lhs && rhs; }
inline uniform bool2 binary_and(uniform bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
inline bool2 binary_and(bool2 lhs, uniform bool2 rhs) { return make_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
inline bool2 binary_and(uniform bool2 lhs, bool2 rhs) { return make_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
inline bool2 binary_and(bool2 lhs, bool2 rhs) { return make_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
inline uniform bool2 binary_and(uniform bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x && rhs, lhs.y && rhs); }
inline bool2 binary_and(bool2 lhs, uniform bool rhs) { return make_bool2(lhs.x && rhs, lhs.y && rhs); }
inline bool2 binary_and(uniform bool2 lhs, bool rhs) { return make_bool2(lhs.x && rhs, lhs.y && rhs); }
inline bool2 binary_and(bool2 lhs, bool rhs) { return make_bool2(lhs.x && rhs, lhs.y && rhs); }
inline uniform bool2 binary_and(uniform bool lhs, uniform bool2 rhs) { return make_bool2(lhs && rhs.x, lhs && rhs.y); }
inline bool2 binary_and(bool lhs, uniform bool2 rhs) { return make_bool2(lhs && rhs.x, lhs && rhs.y); }
inline bool2 binary_and(uniform bool lhs, bool2 rhs) { return make_bool2(lhs && rhs.x, lhs && rhs.y); }
inline bool2 binary_and(bool lhs, bool2 rhs) { return make_bool2(lhs && rhs.x, lhs && rhs.y); }
inline uniform bool3 binary_and(uniform bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
inline bool3 binary_and(bool3 lhs, uniform bool3 rhs) { return make_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
inline bool3 binary_and(uniform bool3 lhs, bool3 rhs) { return make_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
inline bool3 binary_and(bool3 lhs, bool3 rhs) { return make_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
inline uniform bool3 binary_and(uniform bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
inline bool3 binary_and(bool3 lhs, uniform bool rhs) { return make_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
inline bool3 binary_and(uniform bool3 lhs, bool rhs) { return make_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
inline bool3 binary_and(bool3 lhs, bool rhs) { return make_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
inline uniform bool3 binary_and(uniform bool lhs, uniform bool3 rhs) { return make_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
inline bool3 binary_and(bool lhs, uniform bool3 rhs) { return make_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
inline bool3 binary_and(uniform bool lhs, bool3 rhs) { return make_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
inline bool3 binary_and(bool lhs, bool3 rhs) { return make_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
inline uniform bool4 binary_and(uniform bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
inline bool4 binary_and(bool4 lhs, uniform bool4 rhs) { return make_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
inline bool4 binary_and(uniform bool4 lhs, bool4 rhs) { return make_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
inline bool4 binary_and(bool4 lhs, bool4 rhs) { return make_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
inline uniform bool4 binary_and(uniform bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
inline bool4 binary_and(bool4 lhs, uniform bool rhs) { return make_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
inline bool4 binary_and(uniform bool4 lhs, bool rhs) { return make_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
inline bool4 binary_and(bool4 lhs, bool rhs) { return make_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
inline uniform bool4 binary_and(uniform bool lhs, uniform bool4 rhs) { return make_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
inline bool4 binary_and(bool lhs, uniform bool4 rhs) { return make_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
inline bool4 binary_and(uniform bool lhs, bool4 rhs) { return make_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
inline bool4 binary_and(bool lhs, bool4 rhs) { return make_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }

inline uniform bool any(uniform bool2 v) { return v.x || v.y; }
inline bool any(bool2 v) { return v.x || v.y; }
inline uniform bool any(uniform bool3 v) { return v.x || v.y || v.z; }
inline bool any(bool3 v) { return v.x || v.y || v.z; }
inline uniform bool any(uniform bool4 v) { return v.x || v.y || v.z || v.w; }
inline bool any(bool4 v) { return v.x || v.y || v.z || v.w; }
inline uniform bool all(uniform bool2 v) { return v.x && v.y; }
inline bool all(bool2 v) { return v.x && v.y; }
inline uniform bool all(uniform bool3 v) { return v.x && v.y && v.z; }
inline bool all(bool3 v) { return v.x && v.y && v.z; }
inline uniform bool all(uniform bool4 v) { return v.x && v.y && v.z && v.w; }
inline bool all(bool4 v) { return v.x && v.y && v.z && v.w; }
inline uniform bool none(uniform bool2 v) { return !v.x && !v.y; }
inline bool none(bool2 v) { return !v.x && !v.y; }
inline uniform bool none(uniform bool3 v) { return !v.x && !v.y && !v.z; }
inline bool none(bool3 v) { return !v.x && !v.y && !v.z; }
inline uniform bool none(uniform bool4 v) { return !v.x && !v.y && !v.z && !v.w; }
inline bool none(bool4 v) { return !v.x && !v.y && !v.z && !v.w; }

#define select_scalar(f, t, p) ((p) ? (t) : (f))
inline int2 select(int2 f, int2 t, bool2 p) { return make_int2(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y)); }
inline int2 select(int2 f, int2 t, uniform bool2 p) { return make_int2(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y)); }
inline uniform int2 select(uniform int2 f, uniform int2 t, uniform bool2 p) { return make_int2(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y)); }
inline int3 select(int3 f, int3 t, bool3 p) { return make_int3(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z)); }
inline int3 select(int3 f, int3 t, uniform bool3 p) { return make_int3(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z)); }
inline uniform int3 select(uniform int3 f, uniform int3 t, uniform bool3 p) { return make_int3(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z)); }
inline int4 select(int4 f, int4 t, bool4 p) { return make_int4(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z), select_scalar(f.w, t.w, p.w)); }
inline int4 select(int4 f, int4 t, uniform bool4 p) { return make_int4(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z), select_scalar(f.w, t.w, p.w)); }
inline uniform int4 select(uniform int4 f, uniform int4 t, uniform bool4 p) { return make_int4(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z), select_scalar(f.w, t.w, p.w)); }
inline uint2 select(uint2 f, uint2 t, bool2 p) { return make_uint2(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y)); }
inline uint2 select(uint2 f, uint2 t, uniform bool2 p) { return make_uint2(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y)); }
inline uniform uint2 select(uniform uint2 f, uniform uint2 t, uniform bool2 p) { return make_uint2(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y)); }
inline uint3 select(uint3 f, uint3 t, bool3 p) { return make_uint3(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z)); }
inline uint3 select(uint3 f, uint3 t, uniform bool3 p) { return make_uint3(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z)); }
inline uniform uint3 select(uniform uint3 f, uniform uint3 t, uniform bool3 p) { return make_uint3(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z)); }
inline uint4 select(uint4 f, uint4 t, bool4 p) { return make_uint4(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z), select_scalar(f.w, t.w, p.w)); }
inline uint4 select(uint4 f, uint4 t, uniform bool4 p) { return make_uint4(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z), select_scalar(f.w, t.w, p.w)); }
inline uniform uint4 select(uniform uint4 f, uniform uint4 t, uniform bool4 p) { return make_uint4(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z), select_scalar(f.w, t.w, p.w)); }
inline float2 select(float2 f, float2 t, bool2 p) { return make_float2(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y)); }
inline float2 select(float2 f, float2 t, uniform bool2 p) { return make_float2(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y)); }
inline uniform float2 select(uniform float2 f, uniform float2 t, uniform bool2 p) { return make_float2(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y)); }
inline float3 select(float3 f, float3 t, bool3 p) { return make_float3(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z)); }
inline float3 select(float3 f, float3 t, uniform bool3 p) { return make_float3(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z)); }
inline uniform float3 select(uniform float3 f, uniform float3 t, uniform bool3 p) { return make_float3(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z)); }
inline float4 select(float4 f, float4 t, bool4 p) { return make_float4(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z), select_scalar(f.w, t.w, p.w)); }
inline float4 select(float4 f, float4 t, uniform bool4 p) { return make_float4(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z), select_scalar(f.w, t.w, p.w)); }
inline uniform float4 select(uniform float4 f, uniform float4 t, uniform bool4 p) { return make_float4(select_scalar(f.x, t.x, p.x), select_scalar(f.y, t.y, p.y), select_scalar(f.z, t.z, p.z), select_scalar(f.w, t.w, p.w)); }

inline float fma(float a, float b, float c) { return a * b + c; }
inline uniform float fma(uniform float a, uniform float b, uniform float c) { return a * b + c; }
inline float copysign(float a, float b) { return floatbits((intbits(a) & 0x7fffffffu) | signbits(b)); }
inline uniform float copysign(uniform float a, uniform float b) { return floatbits((intbits(a) & 0x7fffffffu) | signbits(b)); }
inline float log2(float x) { return log(x) / log(2.f); }
inline uniform float log2(uniform float x) { return log(x) / log(2.f); }
inline float log10(float x) { return log(x) / log(10.f); }
inline uniform float log10(uniform float x) { return log(x) / log(10.f); }
inline float exp2(float x) { return pow(2.f, x); }
inline uniform float exp2(uniform float x) { return pow(2.f, x); }
inline float exp10(float x) { return pow(10.f, x); }
inline uniform float exp10(uniform float x) { return pow(10.f, x); }
inline bool is_nan(float x) {
  uint u = intbits(x);
  return (u & 0x7F800000u) == 0x7F800000u && (u & 0x7FFFFFu);
}
inline bool is_inf(float x) {
  uint u = intbits(x);
  return (u & 0x7F800000u) == 0x7F800000u && !(u & 0x7FFFFFu);
}
inline uniform bool is_nan(uniform float x) {
  uniform uint u = intbits(x);
  return (u & 0x7F800000u) == 0x7F800000u && (u & 0x7FFFFFu);
}
inline uniform bool is_inf(uniform float x) {
  uniform uint u = intbits(x);
  return (u & 0x7F800000u) == 0x7F800000u && !(u & 0x7FFFFFu);
}
inline float sinh(float x) { return .5f * (exp(x) - exp(-x)); }
inline uniform float sinh(uniform float x) { return .5f * (exp(x) - exp(-x)); }
inline float cosh(float x) { return .5f * (exp(x) + exp(-x)); }
inline uniform float cosh(uniform float x) { return .5f * (exp(x) + exp(-x)); }
inline float tanh(float x) { return sinh(x) / cosh(x); }
inline uniform float tanh(uniform float x) { return sinh(x) / cosh(x); }
inline float asinh(float x) { return log(x + sqrt(x * x + 1.f)); }
inline uniform float asinh(uniform float x) { return log(x + sqrt(x * x + 1.f)); }
inline float acosh(float x) { return log(x + sqrt(x * x - 1.f)); }
inline uniform float acosh(uniform float x) { return log(x + sqrt(x * x - 1.f)); }
inline float atanh(float x) { return .5f * log((1.f + x) / (1.f - x)); }
inline uniform float atanh(uniform float x) { return .5f * log((1.f + x) / (1.f - x)); }
inline float saturate(float x) { return clamp(x, 0.f, 1.f); }
inline uniform float saturate(uniform float x) { return clamp(x, 0.f, 1.f); }
inline float lerp(float a, float b, float t) { return fma(t, b - a, a); }
inline uniform float lerp(uniform float a, uniform float b, uniform float t) { return fma(t, b - a, a); }
inline float degrees(float x) { return x * (180.f * M_1_PI); }
inline uniform float degrees(uniform float x) { return x * (180.f * M_1_PI); }
inline float radians(float x) { return x * (M_PI / 180.f); }
inline uniform float radians(uniform float x) { return x * (M_PI / 180.f); }
inline float step(float edge, float x) { return x < edge ? 0.0f : 1.0f; }
inline uniform float step(uniform float edge, uniform float x) { return x < edge ? 0.0f : 1.0f; }
inline float smoothstep(float edge0, float edge1, float x) {
    float t = saturate((x - edge0) / (edge1 - edge0));
    return t * t * (3.0f - 2.0f * t);
}
inline uniform float smoothstep(uniform float edge0, uniform float edge1, uniform float x) {
    uniform float t = saturate((x - edge0) / (edge1 - edge0));
    return t * t * (3.0f - 2.0f * t);
}
inline uint ctz(uint x) { return count_trailing_zeros((int)x); }
inline uniform uint ctz(uniform uint x) { return count_trailing_zeros((int)x); }
inline uint clz(uint x) { return count_leading_zeros((int)x); }
inline uniform uint clz(uniform uint x) { return count_leading_zeros((int)x); }
inline uint popcount(uint x) { return popcnt((int)x); }
inline uniform uint popcount(uniform uint x) { return popcnt((int)x); }

inline float3 cross(float3 u, float3 v) {
    return make_float3(
        u.y * v.z - v.y * u.z,
        u.z * v.x - v.z * u.x,
        u.x * v.y - v.x * u.y);
}
inline uniform float3 cross(uniform float3 u, uniform float3 v) {
    return make_float3(
        u.y * v.z - v.y * u.z,
        u.z * v.x - v.z * u.x,
        u.x * v.y - v.x * u.y);
}
inline float dot(float2 a, float2 b) { return a.x * b.x + a.y * b.y; }
inline float dot(float3 a, float3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; }
inline float dot(float4 a, float4 b) { return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w; }
inline uniform float dot(uniform float2 a, uniform float2 b) { return a.x * b.x + a.y * b.y; }
inline uniform float dot(uniform float3 a, uniform float3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; }
inline uniform float dot(uniform float4 a, uniform float4 b) { return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w; }
inline float length(float2 v) { return sqrt(dot(v, v)); }
inline float length(float3 v) { return sqrt(dot(v, v)); }
inline float length(float4 v) { return sqrt(dot(v, v)); }
inline uniform float length(uniform float2 v) { return sqrt(dot(v, v)); }
inline uniform float length(uniform float3 v) { return sqrt(dot(v, v)); }
inline uniform float length(uniform float4 v) { return sqrt(dot(v, v)); }
inline float length_squared(float2 v) { return dot(v, v); }
inline float length_squared(float3 v) { return dot(v, v); }
inline float length_squared(float4 v) { return dot(v, v); }
inline uniform float length_squared(uniform float2 v) { return dot(v, v); }
inline uniform float length_squared(uniform float3 v) { return dot(v, v); }
inline uniform float length_squared(uniform float4 v) { return dot(v, v); }
inline float2 normalize(float2 v) { return v * rsqrt(length_squared(v)); }
inline float3 normalize(float3 v) { return v * rsqrt(length_squared(v)); }
inline float4 normalize(float4 v) { return v * rsqrt(length_squared(v)); }
inline uniform float2 normalize(uniform float2 v) { return v * rsqrt(length_squared(v)); }
inline uniform float3 normalize(uniform float3 v) { return v * rsqrt(length_squared(v)); }
inline uniform float4 normalize(uniform float4 v) { return v * rsqrt(length_squared(v)); }
inline float3 faceforward(float3 n, float3 i, float3 n_ref) { return dot(n_ref, i) < 0.f ? n : -n; }
inline uniform float3 faceforward(uniform float3 n, uniform float3 i, uniform float3 n_ref) { return dot(n_ref, i) < 0.f ? n : -n; }

inline int2 min(int2 a, int2 b) { return make_int2(min(a.x, b.x), min(a.y, b.y)); }
inline uniform int2 min(uniform int2 a, uniform int2 b) { return make_int2(min(a.x, b.x), min(a.y, b.y)); }
inline int3 min(int3 a, int3 b) { return make_int3(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z)); }
inline uniform int3 min(uniform int3 a, uniform int3 b) { return make_int3(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z)); }
inline int4 min(int4 a, int4 b) { return make_int4(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w)); }
inline uniform int4 min(uniform int4 a, uniform int4 b) { return make_int4(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w)); }
inline uint2 min(uint2 a, uint2 b) { return make_uint2(min(a.x, b.x), min(a.y, b.y)); }
inline uniform uint2 min(uniform uint2 a, uniform uint2 b) { return make_uint2(min(a.x, b.x), min(a.y, b.y)); }
inline uint3 min(uint3 a, uint3 b) { return make_uint3(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z)); }
inline uniform uint3 min(uniform uint3 a, uniform uint3 b) { return make_uint3(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z)); }
inline uint4 min(uint4 a, uint4 b) { return make_uint4(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w)); }
inline uniform uint4 min(uniform uint4 a, uniform uint4 b) { return make_uint4(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w)); }
inline float2 min(float2 a, float2 b) { return make_float2(min(a.x, b.x), min(a.y, b.y)); }
inline uniform float2 min(uniform float2 a, uniform float2 b) { return make_float2(min(a.x, b.x), min(a.y, b.y)); }
inline float3 min(float3 a, float3 b) { return make_float3(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z)); }
inline uniform float3 min(uniform float3 a, uniform float3 b) { return make_float3(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z)); }
inline float4 min(float4 a, float4 b) { return make_float4(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w)); }
inline uniform float4 min(uniform float4 a, uniform float4 b) { return make_float4(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w)); }

inline int2 max(int2 a, int2 b) { return make_int2(max(a.x, b.x), max(a.y, b.y)); }
inline uniform int2 max(uniform int2 a, uniform int2 b) { return make_int2(max(a.x, b.x), max(a.y, b.y)); }
inline int3 max(int3 a, int3 b) { return make_int3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z)); }
inline uniform int3 max(uniform int3 a, uniform int3 b) { return make_int3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z)); }
inline int4 max(int4 a, int4 b) { return make_int4(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w)); }
inline uniform int4 max(uniform int4 a, uniform int4 b) { return make_int4(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w)); }
inline uint2 max(uint2 a, uint2 b) { return make_uint2(max(a.x, b.x), max(a.y, b.y)); }
inline uniform uint2 max(uniform uint2 a, uniform uint2 b) { return make_uint2(max(a.x, b.x), max(a.y, b.y)); }
inline uint3 max(uint3 a, uint3 b) { return make_uint3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z)); }
inline uniform uint3 max(uniform uint3 a, uniform uint3 b) { return make_uint3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z)); }
inline uint4 max(uint4 a, uint4 b) { return make_uint4(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w)); }
inline uniform uint4 max(uniform uint4 a, uniform uint4 b) { return make_uint4(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w)); }
inline float2 max(float2 a, float2 b) { return make_float2(max(a.x, b.x), max(a.y, b.y)); }
inline uniform float2 max(uniform float2 a, uniform float2 b) { return make_float2(max(a.x, b.x), max(a.y, b.y)); }
inline float3 max(float3 a, float3 b) { return make_float3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z)); }
inline uniform float3 max(uniform float3 a, uniform float3 b) { return make_float3(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z)); }
inline float4 max(float4 a, float4 b) { return make_float4(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w)); }
inline uniform float4 max(uniform float4 a, uniform float4 b) { return make_float4(max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w)); }

inline int2 abs(int2 x) { return make_int2(abs(x.x), abs(x.y)); }
inline uniform int2 abs(uniform int2 x) { return make_int2(abs(x.x), abs(x.y)); }
inline int3 abs(int3 x) { return make_int3(abs(x.x), abs(x.y), abs(x.z)); }
inline uniform int3 abs(uniform int3 x) { return make_int3(abs(x.x), abs(x.y), abs(x.z)); }
inline int4 abs(int4 x) { return make_int4(abs(x.x), abs(x.y), abs(x.z), abs(x.w)); }
inline uniform int4 abs(uniform int4 x) { return make_int4(abs(x.x), abs(x.y), abs(x.z), abs(x.w)); }
inline float2 abs(float2 x) { return make_float2(abs(x.x), abs(x.y)); }
inline uniform float2 abs(uniform float2 x) { return make_float2(abs(x.x), abs(x.y)); }
inline float3 abs(float3 x) { return make_float3(abs(x.x), abs(x.y), abs(x.z)); }
inline uniform float3 abs(uniform float3 x) { return make_float3(abs(x.x), abs(x.y), abs(x.z)); }
inline float4 abs(float4 x) { return make_float4(abs(x.x), abs(x.y), abs(x.z), abs(x.w)); }
inline uniform float4 abs(uniform float4 x) { return make_float4(abs(x.x), abs(x.y), abs(x.z), abs(x.w)); }

inline float2 acos(float2 x) { return make_float2(acos(x.x), acos(x.y)); }
inline uniform float2 acos(uniform float2 x) { return make_float2(acos(x.x), acos(x.y)); }
inline float3 acos(float3 x) { return make_float3(acos(x.x), acos(x.y), acos(x.z)); }
inline uniform float3 acos(uniform float3 x) { return make_float3(acos(x.x), acos(x.y), acos(x.z)); }
inline float4 acos(float4 x) { return make_float4(acos(x.x), acos(x.y), acos(x.z), acos(x.w)); }
inline uniform float4 acos(uniform float4 x) { return make_float4(acos(x.x), acos(x.y), acos(x.z), acos(x.w)); }

inline float2 asin(float2 x) { return make_float2(asin(x.x), asin(x.y)); }
inline uniform float2 asin(uniform float2 x) { return make_float2(asin(x.x), asin(x.y)); }
inline float3 asin(float3 x) { return make_float3(asin(x.x), asin(x.y), asin(x.z)); }
inline uniform float3 asin(uniform float3 x) { return make_float3(asin(x.x), asin(x.y), asin(x.z)); }
inline float4 asin(float4 x) { return make_float4(asin(x.x), asin(x.y), asin(x.z), asin(x.w)); }
inline uniform float4 asin(uniform float4 x) { return make_float4(asin(x.x), asin(x.y), asin(x.z), asin(x.w)); }

inline float2 atan(float2 x) { return make_float2(atan(x.x), atan(x.y)); }
inline uniform float2 atan(uniform float2 x) { return make_float2(atan(x.x), atan(x.y)); }
inline float3 atan(float3 x) { return make_float3(atan(x.x), atan(x.y), atan(x.z)); }
inline uniform float3 atan(uniform float3 x) { return make_float3(atan(x.x), atan(x.y), atan(x.z)); }
inline float4 atan(float4 x) { return make_float4(atan(x.x), atan(x.y), atan(x.z), atan(x.w)); }
inline uniform float4 atan(uniform float4 x) { return make_float4(atan(x.x), atan(x.y), atan(x.z), atan(x.w)); }

inline float2 acosh(float2 x) { return make_float2(acosh(x.x), acosh(x.y)); }
inline uniform float2 acosh(uniform float2 x) { return make_float2(acosh(x.x), acosh(x.y)); }
inline float3 acosh(float3 x) { return make_float3(acosh(x.x), acosh(x.y), acosh(x.z)); }
inline uniform float3 acosh(uniform float3 x) { return make_float3(acosh(x.x), acosh(x.y), acosh(x.z)); }
inline float4 acosh(float4 x) { return make_float4(acosh(x.x), acosh(x.y), acosh(x.z), acosh(x.w)); }
inline uniform float4 acosh(uniform float4 x) { return make_float4(acosh(x.x), acosh(x.y), acosh(x.z), acosh(x.w)); }

inline float2 asinh(float2 x) { return make_float2(asinh(x.x), asinh(x.y)); }
inline uniform float2 asinh(uniform float2 x) { return make_float2(asinh(x.x), asinh(x.y)); }
inline float3 asinh(float3 x) { return make_float3(asinh(x.x), asinh(x.y), asinh(x.z)); }
inline uniform float3 asinh(uniform float3 x) { return make_float3(asinh(x.x), asinh(x.y), asinh(x.z)); }
inline float4 asinh(float4 x) { return make_float4(asinh(x.x), asinh(x.y), asinh(x.z), asinh(x.w)); }
inline uniform float4 asinh(uniform float4 x) { return make_float4(asinh(x.x), asinh(x.y), asinh(x.z), asinh(x.w)); }

inline float2 atanh(float2 x) { return make_float2(atanh(x.x), atanh(x.y)); }
inline uniform float2 atanh(uniform float2 x) { return make_float2(atanh(x.x), atanh(x.y)); }
inline float3 atanh(float3 x) { return make_float3(atanh(x.x), atanh(x.y), atanh(x.z)); }
inline uniform float3 atanh(uniform float3 x) { return make_float3(atanh(x.x), atanh(x.y), atanh(x.z)); }
inline float4 atanh(float4 x) { return make_float4(atanh(x.x), atanh(x.y), atanh(x.z), atanh(x.w)); }
inline uniform float4 atanh(uniform float4 x) { return make_float4(atanh(x.x), atanh(x.y), atanh(x.z), atanh(x.w)); }

inline float2 atan2(float2 y, float2 x) { return make_float2(atan2(y.x, x.x), atan2(y.y, x.y)); }
inline uniform float2 atan2(uniform float2 y, uniform float2 x) { return make_float2(atan2(y.x, x.x), atan2(y.y, x.y)); }
inline float3 atan2(float3 y, float3 x) { return make_float3(atan2(y.x, x.x), atan2(y.y, x.y), atan2(y.z, x.z)); }
inline uniform float3 atan2(uniform float3 y, uniform float3 x) { return make_float3(atan2(y.x, x.x), atan2(y.y, x.y), atan2(y.z, x.z)); }
inline float4 atan2(float4 y, float4 x) { return make_float4(atan2(y.x, x.x), atan2(y.y, x.y), atan2(y.z, x.z), atan2(y.w, x.w)); }
inline uniform float4 atan2(uniform float4 y, uniform float4 x) { return make_float4(atan2(y.x, x.x), atan2(y.y, x.y), atan2(y.z, x.z), atan2(y.w, x.w)); }

inline float2 cos(float2 x) { return make_float2(cos(x.x), cos(x.y)); }
inline uniform float2 cos(uniform float2 x) { return make_float2(cos(x.x), cos(x.y)); }
inline float3 cos(float3 x) { return make_float3(cos(x.x), cos(x.y), cos(x.z)); }
inline uniform float3 cos(uniform float3 x) { return make_float3(cos(x.x), cos(x.y), cos(x.z)); }
inline float4 cos(float4 x) { return make_float4(cos(x.x), cos(x.y), cos(x.z), cos(x.w)); }
inline uniform float4 cos(uniform float4 x) { return make_float4(cos(x.x), cos(x.y), cos(x.z), cos(x.w)); }

inline float2 cosh(float2 x) { return make_float2(cosh(x.x), cosh(x.y)); }
inline uniform float2 cosh(uniform float2 x) { return make_float2(cosh(x.x), cosh(x.y)); }
inline float3 cosh(float3 x) { return make_float3(cosh(x.x), cosh(x.y), cosh(x.z)); }
inline uniform float3 cosh(uniform float3 x) { return make_float3(cosh(x.x), cosh(x.y), cosh(x.z)); }
inline float4 cosh(float4 x) { return make_float4(cosh(x.x), cosh(x.y), cosh(x.z), cosh(x.w)); }
inline uniform float4 cosh(uniform float4 x) { return make_float4(cosh(x.x), cosh(x.y), cosh(x.z), cosh(x.w)); }

inline float2 sin(float2 x) { return make_float2(sin(x.x), sin(x.y)); }
inline uniform float2 sin(uniform float2 x) { return make_float2(sin(x.x), sin(x.y)); }
inline float3 sin(float3 x) { return make_float3(sin(x.x), sin(x.y), sin(x.z)); }
inline uniform float3 sin(uniform float3 x) { return make_float3(sin(x.x), sin(x.y), sin(x.z)); }
inline float4 sin(float4 x) { return make_float4(sin(x.x), sin(x.y), sin(x.z), sin(x.w)); }
inline uniform float4 sin(uniform float4 x) { return make_float4(sin(x.x), sin(x.y), sin(x.z), sin(x.w)); }

inline float2 sinh(float2 x) { return make_float2(sinh(x.x), sinh(x.y)); }
inline uniform float2 sinh(uniform float2 x) { return make_float2(sinh(x.x), sinh(x.y)); }
inline float3 sinh(float3 x) { return make_float3(sinh(x.x), sinh(x.y), sinh(x.z)); }
inline uniform float3 sinh(uniform float3 x) { return make_float3(sinh(x.x), sinh(x.y), sinh(x.z)); }
inline float4 sinh(float4 x) { return make_float4(sinh(x.x), sinh(x.y), sinh(x.z), sinh(x.w)); }
inline uniform float4 sinh(uniform float4 x) { return make_float4(sinh(x.x), sinh(x.y), sinh(x.z), sinh(x.w)); }

inline float2 tan(float2 x) { return make_float2(tan(x.x), tan(x.y)); }
inline uniform float2 tan(uniform float2 x) { return make_float2(tan(x.x), tan(x.y)); }
inline float3 tan(float3 x) { return make_float3(tan(x.x), tan(x.y), tan(x.z)); }
inline uniform float3 tan(uniform float3 x) { return make_float3(tan(x.x), tan(x.y), tan(x.z)); }
inline float4 tan(float4 x) { return make_float4(tan(x.x), tan(x.y), tan(x.z), tan(x.w)); }
inline uniform float4 tan(uniform float4 x) { return make_float4(tan(x.x), tan(x.y), tan(x.z), tan(x.w)); }

inline float2 tanh(float2 x) { return make_float2(tanh(x.x), tanh(x.y)); }
inline uniform float2 tanh(uniform float2 x) { return make_float2(tanh(x.x), tanh(x.y)); }
inline float3 tanh(float3 x) { return make_float3(tanh(x.x), tanh(x.y), tanh(x.z)); }
inline uniform float3 tanh(uniform float3 x) { return make_float3(tanh(x.x), tanh(x.y), tanh(x.z)); }
inline float4 tanh(float4 x) { return make_float4(tanh(x.x), tanh(x.y), tanh(x.z), tanh(x.w)); }
inline uniform float4 tanh(uniform float4 x) { return make_float4(tanh(x.x), tanh(x.y), tanh(x.z), tanh(x.w)); }

inline float2 exp(float2 x) { return make_float2(exp(x.x), exp(x.y)); }
inline uniform float2 exp(uniform float2 x) { return make_float2(exp(x.x), exp(x.y)); }
inline float3 exp(float3 x) { return make_float3(exp(x.x), exp(x.y), exp(x.z)); }
inline uniform float3 exp(uniform float3 x) { return make_float3(exp(x.x), exp(x.y), exp(x.z)); }
inline float4 exp(float4 x) { return make_float4(exp(x.x), exp(x.y), exp(x.z), exp(x.w)); }
inline uniform float4 exp(uniform float4 x) { return make_float4(exp(x.x), exp(x.y), exp(x.z), exp(x.w)); }

inline float2 exp2(float2 x) { return make_float2(exp2(x.x), exp2(x.y)); }
inline uniform float2 exp2(uniform float2 x) { return make_float2(exp2(x.x), exp2(x.y)); }
inline float3 exp2(float3 x) { return make_float3(exp2(x.x), exp2(x.y), exp2(x.z)); }
inline uniform float3 exp2(uniform float3 x) { return make_float3(exp2(x.x), exp2(x.y), exp2(x.z)); }
inline float4 exp2(float4 x) { return make_float4(exp2(x.x), exp2(x.y), exp2(x.z), exp2(x.w)); }
inline uniform float4 exp2(uniform float4 x) { return make_float4(exp2(x.x), exp2(x.y), exp2(x.z), exp2(x.w)); }

inline float2 exp10(float2 x) { return make_float2(exp10(x.x), exp10(x.y)); }
inline uniform float2 exp10(uniform float2 x) { return make_float2(exp10(x.x), exp10(x.y)); }
inline float3 exp10(float3 x) { return make_float3(exp10(x.x), exp10(x.y), exp10(x.z)); }
inline uniform float3 exp10(uniform float3 x) { return make_float3(exp10(x.x), exp10(x.y), exp10(x.z)); }
inline float4 exp10(float4 x) { return make_float4(exp10(x.x), exp10(x.y), exp10(x.z), exp10(x.w)); }
inline uniform float4 exp10(uniform float4 x) { return make_float4(exp10(x.x), exp10(x.y), exp10(x.z), exp10(x.w)); }

inline float2 log(float2 x) { return make_float2(log(x.x), log(x.y)); }
inline uniform float2 log(uniform float2 x) { return make_float2(log(x.x), log(x.y)); }
inline float3 log(float3 x) { return make_float3(log(x.x), log(x.y), log(x.z)); }
inline uniform float3 log(uniform float3 x) { return make_float3(log(x.x), log(x.y), log(x.z)); }
inline float4 log(float4 x) { return make_float4(log(x.x), log(x.y), log(x.z), log(x.w)); }
inline uniform float4 log(uniform float4 x) { return make_float4(log(x.x), log(x.y), log(x.z), log(x.w)); }

inline float2 log2(float2 x) { return make_float2(log2(x.x), log2(x.y)); }
inline uniform float2 log2(uniform float2 x) { return make_float2(log2(x.x), log2(x.y)); }
inline float3 log2(float3 x) { return make_float3(log2(x.x), log2(x.y), log2(x.z)); }
inline uniform float3 log2(uniform float3 x) { return make_float3(log2(x.x), log2(x.y), log2(x.z)); }
inline float4 log2(float4 x) { return make_float4(log2(x.x), log2(x.y), log2(x.z), log2(x.w)); }
inline uniform float4 log2(uniform float4 x) { return make_float4(log2(x.x), log2(x.y), log2(x.z), log2(x.w)); }

inline float2 log10(float2 x) { return make_float2(log10(x.x), log10(x.y)); }
inline uniform float2 log10(uniform float2 x) { return make_float2(log10(x.x), log10(x.y)); }
inline float3 log10(float3 x) { return make_float3(log10(x.x), log10(x.y), log10(x.z)); }
inline uniform float3 log10(uniform float3 x) { return make_float3(log10(x.x), log10(x.y), log10(x.z)); }
inline float4 log10(float4 x) { return make_float4(log10(x.x), log10(x.y), log10(x.z), log10(x.w)); }
inline uniform float4 log10(uniform float4 x) { return make_float4(log10(x.x), log10(x.y), log10(x.z), log10(x.w)); }

inline float2 pow(float2 x, float2 a) { return make_float2(pow(x.x, a.x), pow(x.y, a.y)); }
inline uniform float2 pow(uniform float2 x, uniform float2 a) { return make_float2(pow(x.x, a.x), pow(x.y, a.y)); }
inline float3 pow(float3 x, float3 a) { return make_float3(pow(x.x, a.x), pow(x.y, a.y), pow(x.z, a.z)); }
inline uniform float3 pow(uniform float3 x, uniform float3 a) { return make_float3(pow(x.x, a.x), pow(x.y, a.y), pow(x.z, a.z)); }
inline float4 pow(float4 x, float4 a) { return make_float4(pow(x.x, a.x), pow(x.y, a.y), pow(x.z, a.z), pow(x.w, a.w)); }
inline uniform float4 pow(uniform float4 x, uniform float4 a) { return make_float4(pow(x.x, a.x), pow(x.y, a.y), pow(x.z, a.z), pow(x.w, a.w)); }

inline float2 sqrt(float2 x) { return make_float2(sqrt(x.x), sqrt(x.y)); }
inline uniform float2 sqrt(uniform float2 x) { return make_float2(sqrt(x.x), sqrt(x.y)); }
inline float3 sqrt(float3 x) { return make_float3(sqrt(x.x), sqrt(x.y), sqrt(x.z)); }
inline uniform float3 sqrt(uniform float3 x) { return make_float3(sqrt(x.x), sqrt(x.y), sqrt(x.z)); }
inline float4 sqrt(float4 x) { return make_float4(sqrt(x.x), sqrt(x.y), sqrt(x.z), sqrt(x.w)); }
inline uniform float4 sqrt(uniform float4 x) { return make_float4(sqrt(x.x), sqrt(x.y), sqrt(x.z), sqrt(x.w)); }

inline float2 rsqrt(float2 x) { return make_float2(rsqrt(x.x), rsqrt(x.y)); }
inline uniform float2 rsqrt(uniform float2 x) { return make_float2(rsqrt(x.x), rsqrt(x.y)); }
inline float3 rsqrt(float3 x) { return make_float3(rsqrt(x.x), rsqrt(x.y), rsqrt(x.z)); }
inline uniform float3 rsqrt(uniform float3 x) { return make_float3(rsqrt(x.x), rsqrt(x.y), rsqrt(x.z)); }
inline float4 rsqrt(float4 x) { return make_float4(rsqrt(x.x), rsqrt(x.y), rsqrt(x.z), rsqrt(x.w)); }
inline uniform float4 rsqrt(uniform float4 x) { return make_float4(rsqrt(x.x), rsqrt(x.y), rsqrt(x.z), rsqrt(x.w)); }

inline float2 ceil(float2 x) { return make_float2(ceil(x.x), ceil(x.y)); }
inline uniform float2 ceil(uniform float2 x) { return make_float2(ceil(x.x), ceil(x.y)); }
inline float3 ceil(float3 x) { return make_float3(ceil(x.x), ceil(x.y), ceil(x.z)); }
inline uniform float3 ceil(uniform float3 x) { return make_float3(ceil(x.x), ceil(x.y), ceil(x.z)); }
inline float4 ceil(float4 x) { return make_float4(ceil(x.x), ceil(x.y), ceil(x.z), ceil(x.w)); }
inline uniform float4 ceil(uniform float4 x) { return make_float4(ceil(x.x), ceil(x.y), ceil(x.z), ceil(x.w)); }

inline float2 floor(float2 x) { return make_float2(floor(x.x), floor(x.y)); }
inline uniform float2 floor(uniform float2 x) { return make_float2(floor(x.x), floor(x.y)); }
inline float3 floor(float3 x) { return make_float3(floor(x.x), floor(x.y), floor(x.z)); }
inline uniform float3 floor(uniform float3 x) { return make_float3(floor(x.x), floor(x.y), floor(x.z)); }
inline float4 floor(float4 x) { return make_float4(floor(x.x), floor(x.y), floor(x.z), floor(x.w)); }
inline uniform float4 floor(uniform float4 x) { return make_float4(floor(x.x), floor(x.y), floor(x.z), floor(x.w)); }

inline float2 trunc(float2 x) { return make_float2(trunc(x.x), trunc(x.y)); }
inline uniform float2 trunc(uniform float2 x) { return make_float2(trunc(x.x), trunc(x.y)); }
inline float3 trunc(float3 x) { return make_float3(trunc(x.x), trunc(x.y), trunc(x.z)); }
inline uniform float3 trunc(uniform float3 x) { return make_float3(trunc(x.x), trunc(x.y), trunc(x.z)); }
inline float4 trunc(float4 x) { return make_float4(trunc(x.x), trunc(x.y), trunc(x.z), trunc(x.w)); }
inline uniform float4 trunc(uniform float4 x) { return make_float4(trunc(x.x), trunc(x.y), trunc(x.z), trunc(x.w)); }

inline float2 round(float2 x) { return make_float2(round(x.x), round(x.y)); }
inline uniform float2 round(uniform float2 x) { return make_float2(round(x.x), round(x.y)); }
inline float3 round(float3 x) { return make_float3(round(x.x), round(x.y), round(x.z)); }
inline uniform float3 round(uniform float3 x) { return make_float3(round(x.x), round(x.y), round(x.z)); }
inline float4 round(float4 x) { return make_float4(round(x.x), round(x.y), round(x.z), round(x.w)); }
inline uniform float4 round(uniform float4 x) { return make_float4(round(x.x), round(x.y), round(x.z), round(x.w)); }

inline float2 fma(float2 x, float2 y, float2 z) { return make_float2(fma(x.x, y.x, z.x), fma(x.y, y.y, z.y)); }
inline uniform float2 fma(uniform float2 x, uniform float2 y, uniform float2 z) { return make_float2(fma(x.x, y.x, z.x), fma(x.y, y.y, z.y)); }
inline float3 fma(float3 x, float3 y, float3 z) { return make_float3(fma(x.x, y.x, z.x), fma(x.y, y.y, z.y), fma(x.z, y.z, z.z)); }
inline uniform float3 fma(uniform float3 x, uniform float3 y, uniform float3 z) { return make_float3(fma(x.x, y.x, z.x), fma(x.y, y.y, z.y), fma(x.z, y.z, z.z)); }
inline float4 fma(float4 x, float4 y, float4 z) { return make_float4(fma(x.x, y.x, z.x), fma(x.y, y.y, z.y), fma(x.z, y.z, z.z), fma(x.w, y.w, z.w)); }
inline uniform float4 fma(uniform float4 x, uniform float4 y, uniform float4 z) { return make_float4(fma(x.x, y.x, z.x), fma(x.y, y.y, z.y), fma(x.z, y.z, z.z), fma(x.w, y.w, z.w)); }

inline float2 copysign(float2 x, float2 y) { return make_float2(copysign(x.x, y.x), copysign(x.y, y.y)); }
inline uniform float2 copysign(uniform float2 x, uniform float2 y) { return make_float2(copysign(x.x, y.x), copysign(x.y, y.y)); }
inline float3 copysign(float3 x, float3 y) { return make_float3(copysign(x.x, y.x), copysign(x.y, y.y), copysign(x.z, y.z)); }
inline uniform float3 copysign(uniform float3 x, uniform float3 y) { return make_float3(copysign(x.x, y.x), copysign(x.y, y.y), copysign(x.z, y.z)); }
inline float4 copysign(float4 x, float4 y) { return make_float4(copysign(x.x, y.x), copysign(x.y, y.y), copysign(x.z, y.z), copysign(x.w, y.w)); }
inline uniform float4 copysign(uniform float4 x, uniform float4 y) { return make_float4(copysign(x.x, y.x), copysign(x.y, y.y), copysign(x.z, y.z), copysign(x.w, y.w)); }

inline float2 is_inf(float2 x) { return make_float2(is_inf(x.x), is_inf(x.y)); }
inline uniform float2 is_inf(uniform float2 x) { return make_float2(is_inf(x.x), is_inf(x.y)); }
inline float3 is_inf(float3 x) { return make_float3(is_inf(x.x), is_inf(x.y), is_inf(x.z)); }
inline uniform float3 is_inf(uniform float3 x) { return make_float3(is_inf(x.x), is_inf(x.y), is_inf(x.z)); }
inline float4 is_inf(float4 x) { return make_float4(is_inf(x.x), is_inf(x.y), is_inf(x.z), is_inf(x.w)); }
inline uniform float4 is_inf(uniform float4 x) { return make_float4(is_inf(x.x), is_inf(x.y), is_inf(x.z), is_inf(x.w)); }

inline float2 is_nan(float2 x) { return make_float2(is_nan(x.x), is_nan(x.y)); }
inline uniform float2 is_nan(uniform float2 x) { return make_float2(is_nan(x.x), is_nan(x.y)); }
inline float3 is_nan(float3 x) { return make_float3(is_nan(x.x), is_nan(x.y), is_nan(x.z)); }
inline uniform float3 is_nan(uniform float3 x) { return make_float3(is_nan(x.x), is_nan(x.y), is_nan(x.z)); }
inline float4 is_nan(float4 x) { return make_float4(is_nan(x.x), is_nan(x.y), is_nan(x.z), is_nan(x.w)); }
inline uniform float4 is_nan(uniform float4 x) { return make_float4(is_nan(x.x), is_nan(x.y), is_nan(x.z), is_nan(x.w)); }

inline int2 clamp(int2 x, int2 l, int2 h) { return make_int2(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y)); }
inline uniform int2 clamp(uniform int2 x, uniform int2 l, uniform int2 h) { return make_int2(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y)); }
inline int3 clamp(int3 x, int3 l, int3 h) { return make_int3(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z)); }
inline uniform int3 clamp(uniform int3 x, uniform int3 l, uniform int3 h) { return make_int3(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z)); }
inline int4 clamp(int4 x, int4 l, int4 h) { return make_int4(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z), clamp(x.w, l.w, h.w)); }
inline uniform int4 clamp(uniform int4 x, uniform int4 l, uniform int4 h) { return make_int4(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z), clamp(x.w, l.w, h.w)); }
inline uint2 clamp(uint2 x, uint2 l, uint2 h) { return make_uint2(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y)); }
inline uniform uint2 clamp(uniform uint2 x, uniform uint2 l, uniform uint2 h) { return make_uint2(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y)); }
inline uint3 clamp(uint3 x, uint3 l, uint3 h) { return make_uint3(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z)); }
inline uniform uint3 clamp(uniform uint3 x, uniform uint3 l, uniform uint3 h) { return make_uint3(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z)); }
inline uint4 clamp(uint4 x, uint4 l, uint4 h) { return make_uint4(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z), clamp(x.w, l.w, h.w)); }
inline uniform uint4 clamp(uniform uint4 x, uniform uint4 l, uniform uint4 h) { return make_uint4(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z), clamp(x.w, l.w, h.w)); }
inline float2 clamp(float2 x, float2 l, float2 h) { return make_float2(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y)); }
inline uniform float2 clamp(uniform float2 x, uniform float2 l, uniform float2 h) { return make_float2(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y)); }
inline float3 clamp(float3 x, float3 l, float3 h) { return make_float3(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z)); }
inline uniform float3 clamp(uniform float3 x, uniform float3 l, uniform float3 h) { return make_float3(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z)); }
inline float4 clamp(float4 x, float4 l, float4 h) { return make_float4(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z), clamp(x.w, l.w, h.w)); }
inline uniform float4 clamp(uniform float4 x, uniform float4 l, uniform float4 h) { return make_float4(clamp(x.x, l.x, h.x), clamp(x.y, l.y, h.y), clamp(x.z, l.z, h.z), clamp(x.w, l.w, h.w)); }

inline float2 saturate(float2 x) { return make_float2(saturate(x.x), saturate(x.y)); }
inline uniform float2 saturate(uniform float2 x) { return make_float2(saturate(x.x), saturate(x.y)); }
inline float3 saturate(float3 x) { return make_float3(saturate(x.x), saturate(x.y), saturate(x.z)); }
inline uniform float3 saturate(uniform float3 x) { return make_float3(saturate(x.x), saturate(x.y), saturate(x.z)); }
inline float4 saturate(float4 x) { return make_float4(saturate(x.x), saturate(x.y), saturate(x.z), saturate(x.w)); }
inline uniform float4 saturate(uniform float4 x) { return make_float4(saturate(x.x), saturate(x.y), saturate(x.z), saturate(x.w)); }

inline float2 lerp(float2 a, float2 b, float2 t) { return make_float2(lerp(a.x, b.x, t.x), lerp(a.y, b.y, t.y)); }
inline uniform float2 lerp(uniform float2 a, uniform float2 b, uniform float2 t) { return make_float2(lerp(a.x, b.x, t.x), lerp(a.y, b.y, t.y)); }
inline float3 lerp(float3 a, float3 b, float3 t) { return make_float3(lerp(a.x, b.x, t.x), lerp(a.y, b.y, t.y), lerp(a.z, b.z, t.z)); }
inline uniform float3 lerp(uniform float3 a, uniform float3 b, uniform float3 t) { return make_float3(lerp(a.x, b.x, t.x), lerp(a.y, b.y, t.y), lerp(a.z, b.z, t.z)); }
inline float4 lerp(float4 a, float4 b, float4 t) { return make_float4(lerp(a.x, b.x, t.x), lerp(a.y, b.y, t.y), lerp(a.z, b.z, t.z), lerp(a.w, b.w, t.w)); }
inline uniform float4 lerp(uniform float4 a, uniform float4 b, uniform float4 t) { return make_float4(lerp(a.x, b.x, t.x), lerp(a.y, b.y, t.y), lerp(a.z, b.z, t.z), lerp(a.w, b.w, t.w)); }

inline float2 radians(float2 x) { return make_float2(radians(x.x), radians(x.y)); }
inline uniform float2 radians(uniform float2 x) { return make_float2(radians(x.x), radians(x.y)); }
inline float3 radians(float3 x) { return make_float3(radians(x.x), radians(x.y), radians(x.z)); }
inline uniform float3 radians(uniform float3 x) { return make_float3(radians(x.x), radians(x.y), radians(x.z)); }
inline float4 radians(float4 x) { return make_float4(radians(x.x), radians(x.y), radians(x.z), radians(x.w)); }
inline uniform float4 radians(uniform float4 x) { return make_float4(radians(x.x), radians(x.y), radians(x.z), radians(x.w)); }

inline float2 degrees(float2 x) { return make_float2(degrees(x.x), degrees(x.y)); }
inline uniform float2 degrees(uniform float2 x) { return make_float2(degrees(x.x), degrees(x.y)); }
inline float3 degrees(float3 x) { return make_float3(degrees(x.x), degrees(x.y), degrees(x.z)); }
inline uniform float3 degrees(uniform float3 x) { return make_float3(degrees(x.x), degrees(x.y), degrees(x.z)); }
inline float4 degrees(float4 x) { return make_float4(degrees(x.x), degrees(x.y), degrees(x.z), degrees(x.w)); }
inline uniform float4 degrees(uniform float4 x) { return make_float4(degrees(x.x), degrees(x.y), degrees(x.z), degrees(x.w)); }

inline float2 step(float2 e, float2 x) { return make_float2(step(e.x, x.x), step(e.y, x.y)); }
inline uniform float2 step(uniform float2 e, uniform float2 x) { return make_float2(step(e.x, x.x), step(e.y, x.y)); }
inline float3 step(float3 e, float3 x) { return make_float3(step(e.x, x.x), step(e.y, x.y), step(e.z, x.z)); }
inline uniform float3 step(uniform float3 e, uniform float3 x) { return make_float3(step(e.x, x.x), step(e.y, x.y), step(e.z, x.z)); }
inline float4 step(float4 e, float4 x) { return make_float4(step(e.x, x.x), step(e.y, x.y), step(e.z, x.z), step(e.w, x.w)); }
inline uniform float4 step(uniform float4 e, uniform float4 x) { return make_float4(step(e.x, x.x), step(e.y, x.y), step(e.z, x.z), step(e.w, x.w)); }

inline float2 smoothstep(float2 e0, float2 e1, float2 x) { return make_float2(smoothstep(e0.x, e1.x, x.x), smoothstep(e0.y, e1.y, x.y)); }
inline uniform float2 smoothstep(uniform float2 e0, uniform float2 e1, uniform float2 x) { return make_float2(smoothstep(e0.x, e1.x, x.x), smoothstep(e0.y, e1.y, x.y)); }
inline float3 smoothstep(float3 e0, float3 e1, float3 x) { return make_float3(smoothstep(e0.x, e1.x, x.x), smoothstep(e0.y, e1.y, x.y), smoothstep(e0.z, e1.z, x.z)); }
inline uniform float3 smoothstep(uniform float3 e0, uniform float3 e1, uniform float3 x) { return make_float3(smoothstep(e0.x, e1.x, x.x), smoothstep(e0.y, e1.y, x.y), smoothstep(e0.z, e1.z, x.z)); }
inline float4 smoothstep(float4 e0, float4 e1, float4 x) { return make_float4(smoothstep(e0.x, e1.x, x.x), smoothstep(e0.y, e1.y, x.y), smoothstep(e0.z, e1.z, x.z), smoothstep(e0.w, e1.w, x.w)); }
inline uniform float4 smoothstep(uniform float4 e0, uniform float4 e1, uniform float4 x) { return make_float4(smoothstep(e0.x, e1.x, x.x), smoothstep(e0.y, e1.y, x.y), smoothstep(e0.z, e1.z, x.z), smoothstep(e0.w, e1.w, x.w)); }

inline uint2 clz(uint2 x) { return make_uint2(clz(x.x), clz(x.y)); }
inline uniform uint2 clz(uniform uint2 x) { return make_uint2(clz(x.x), clz(x.y)); }
inline uint3 clz(uint3 x) { return make_uint3(clz(x.x), clz(x.y), clz(x.z)); }
inline uniform uint3 clz(uniform uint3 x) { return make_uint3(clz(x.x), clz(x.y), clz(x.z)); }
inline uint4 clz(uint4 x) { return make_uint4(clz(x.x), clz(x.y), clz(x.z), clz(x.w)); }
inline uniform uint4 clz(uniform uint4 x) { return make_uint4(clz(x.x), clz(x.y), clz(x.z), clz(x.w)); }

inline uint2 ctz(uint2 x) { return make_uint2(ctz(x.x), ctz(x.y)); }
inline uniform uint2 ctz(uniform uint2 x) { return make_uint2(ctz(x.x), ctz(x.y)); }
inline uint3 ctz(uint3 x) { return make_uint3(ctz(x.x), ctz(x.y), ctz(x.z)); }
inline uniform uint3 ctz(uniform uint3 x) { return make_uint3(ctz(x.x), ctz(x.y), ctz(x.z)); }
inline uint4 ctz(uint4 x) { return make_uint4(ctz(x.x), ctz(x.y), ctz(x.z), ctz(x.w)); }
inline uniform uint4 ctz(uniform uint4 x) { return make_uint4(ctz(x.x), ctz(x.y), ctz(x.z), ctz(x.w)); }

inline uint2 popcount(uint2 x) { return make_uint2(popcount(x.x), popcount(x.y)); }
inline uniform uint2 popcount(uniform uint2 x) { return make_uint2(popcount(x.x), popcount(x.y)); }
inline uint3 popcount(uint3 x) { return make_uint3(popcount(x.x), popcount(x.y), popcount(x.z)); }
inline uniform uint3 popcount(uniform uint3 x) { return make_uint3(popcount(x.x), popcount(x.y), popcount(x.z)); }
inline uint4 popcount(uint4 x) { return make_uint4(popcount(x.x), popcount(x.y), popcount(x.z), popcount(x.w)); }
inline uniform uint4 popcount(uniform uint4 x) { return make_uint4(popcount(x.x), popcount(x.y), popcount(x.z), popcount(x.w)); }

